
FAAIP0M0.CBL, PROGRAM:   FAAIP0M0 - FEP ENROLLMENT MEDICARE DRIVER.; FUNCTION: THIS MODULE IS CALLED BY THE MAIN ENROLLMENT DRIVER; FAENP0M0 THEN ROUTES RETRIEVAL REQUESTS TO FAAIP0M2; AND ALL OTHER REQUESTS TO FAAIP0M1., 

FAAIP0M1.CBL, PROGRAM:   FAAIP0M1; VSCOBII85.; 000800 AUTHOR.    GEOLLY GEORGE.                   00000800; 000900 DATE-WRITTEN. JANUARY 2006.                   00000900; 00; REMARKS.; -*-*-*; PROGRAM DESCRIPTION; -*-*-*; ; ; FUNCTION: EDITS ADDRESS RECORDS CREATED FROM ENROLLMENT; ADDRESS WEB PAGE AND CREATE FEAI DAILY TRANSACTION; ; PROCESSING STEPS:; ; ; RETURN CODES RETURNED BY FAAIP0M1; ---------------------------------------------------------------; VALUES | COMMENTS; ---------------------------------------------------------------; ; ---------------------------------------------------------------; ; PROCESSING NOTES:; ; CALLED PROGRAMS:; FXCEP0M0 - COMMON EDIT MODULES; FXDTP0M0 - INSERT DAILY TRANSACTIONS; FXUEP0M0 - MAINTAIN USER ERROR WORKING STORAGE TABLE; ; DATABASE TABLES AND VIEWS (ACCESS - CRUD):; FADDRESS - ADDRESS      : SELECT; FABNMTRM - ABNORMAL_TERM   : INSERT; FMBRCNTC - MBR_CONTACT_NUMBER : SELECT; ; COPY MEMBERS:; FWEDLKUE - USER ERROR WORKING STORAGE; FWEDLKDT - DAILY TRANSACTION WORKING STORAGE; FWEDTXET - COMMON EDIT WORKING STORAGE; FWEDLKSC - LINKAGE AREA FOR SELECT CONTRACT AND MEMBER; FWEDABT1 - ABNORMAL TERMINATION AREA; FWEDABT2 - ABNORMAL TERMINATION CONTROL FLAGS; FWEDADED - WORKING STORAGE FOR COMMON ADDRESS EDITS; FWEPADED - CODE TO PERFORM COMMON ADDRESS EDITS; ; -*-*-*; PROGRAM HISTORY; -*-*-*; ; DATE   PROGRAMMER; CMR/TT. MM/DD/YY   NAME    CHANGE DESCRIPTION; ---------------------------------------------------------------; ; 407258 01/01/06  G. GEORGE   ORIGINAL; ; 59210 10/14/06  D. TURNER   MODIFIED TO ALLOW SETTING OF; BAD ADDRESS INDICATOR = 'Y'.; ; 59210 10/14/06  D. TURNER   CORRECTION TO ALTERNATE ADDR; LOGIC TO ALLOW SETTING OF; BAD ADDR IND. CORRECTED; RETRIEVAL OF HOME PHONE &; ADDED RETRIEVAL OF ALT-BEGIN; DATE.; ; 65654 01/02/07  D. TURNER   ADDED CERTAIN STW FIELDS; NEEDED FOR FRSU GREEN SCREEN; CONVERSION, TO ALLOW RECORDS; TO BE RE-PROCESSED FROM; SUSPENSE.; PARA.; ; 134554 01/02/10  EMENHEISER  RECOMPILE FOR CHANGES TO; FAAIXF01.; ; 201815 04/10/10  EMENHEISER  MOVE MICROFILM LOC NBR TO; DAILY TRANS FOR NON-PLANS TO; ; 2010SOW040 07/01/11 SRINI    RECOMPILED FOR HIPAA 5010.; ; 348434 4/12/12 D. TURNER  R1 2012 - ALLOW ALTERNATE ADDRES; TO HAVE IDENTICAL BEGIN/END MMYY; ; -*-*-*; E N V I R O N M E N T  D I V I S I O N; -*-*-*; 008400 ENVIRONMENT DIVISION., 

FAAIP0M2.CBL, PROGRAM:   FAAIP0M2 - ADDRESS RETRIEVAL; PROGRAM HISTORY, THIS ROUTINE PERFORMS PROGRAM INITIALIZATION FUNCTIONS., 

FABAP0M0.CBL, PROGRAM:   FABAP0M0 - FEP ENROLLMENT BENEFIT AFFECTED DRIVER.; CALLED PROGRAMS: FABAP0M1 BENEFIT AFFECTED EDIT MODULE; FABAP0M2 BENEFIT AFFECTED ROSTER MODULE; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:   FA99XF01 SIW-STANDARD-INPUT-WORKAREA; FA99XF02 SOW-STANDARD-OUTPUT-WORKAREA; FA99XF03 SAW-STANDARD-ABEND-WORKAREA; FABAXF01 BENEFIT AFFECTED FIELDS, 067300   PERFORM 3600-COMMIT-CHANGES THRU; 067400       3600-COMMIT-CHANGES-EXIT.; %%%K6 - 1358534      - START; ; MOVE WS-MICROFILM-LOC-NBR TO MICROFILM-LOC-NBR OF; DCLDAILY-TRANSACTION; 070600   MOVE WS-CONTRACT-ID-NUM  TO CONTRACT-ID OF; DCLDAILY-TRANSACTION; ; EXEC SQL; 020900   SELECT A.SEQUENCE_NUMBER; 02; 021100      ,B.OPERATOR_ID; 021200      ,B.TRNS_TIME; 021300      ,B.TRNS_ID; 021400      ,B.TRNS_STATUS; 021500      ,B.MEDIUM_TYPE; 021600      ,B.FORM_TYPE; 021700      ,B.ACTION_CODE; 021800      ,B.PLAN_CODE; 021900      ,B.LAST_PROC_DATE; 02; 022100      ,B.MEMBER_ID; 022200      ,B.TRNS_FUNCTION; 022300      ,B.SUBJECT_ID; 022400      ,B.TRANSMITTAL_NBR; 022500      ,B.AGENCY_OFFICE_ID; 022600      ,B.MICROFILM_LOC_NBR; 022700      ,B.CONTRACT_ID; 022800      ,B.ENR_TRNS_CODE; 022900      ,B.TRNS_DATA; 076100   INTO :DCLTRANSACTION-GROUP.SEQUENCE-NUMBER; 076200     ,:DCLTRANSACTION-GROUP.PROGRAM-NAME; 076300     ,:DCLDAILY-TRANSACTION.OPERATOR-ID; 076400     ,:DCLDAILY-TRANSACTION.TRNS-TIME; 076500     ,:DCLDAILY-TRANSACTION.TRNS-ID; 076600     ,:DCLDAILY-TRANSACTION.TRNS-STATUS; 076700     ,:DCLDAILY-TRANSACTION.MEDIUM-TYPE; 076800     ,:DCLDAILY-TRANSACTION.FORM-TYPE; 076900     ,:DCLDAILY-TRANSACTION.ACTION-CODE; 07; 077100     ,:DCLDAILY-TRANSACTION.LAST-PROC-DATE; 077200     ,:DCLDAILY-TRANSACTION.DELETE-IND; 077300     ,:DCLDAILY-TRANSACTION.MEMBER-ID; 077400     ,:DCLDAILY-TRANSACTION.TRNS-FUNCTION; 077500     ,:DCLDAILY-TRANSACTION.SUBJECT-ID; 077600     ,:DCLDAILY-TRANSACTION.TRANSMITTAL-NBR; 077700     ,:DCLDAILY-TRANSACTION.AGENCY-OFFICE-ID; 077800     ,:DCLDAILY-TRANSACTION.MICROFILM-LOC-NBR; 077900     ,:DCLDAILY-TRANSACTION.CONTRACT-ID; 07; 078100     ,:DCLDAILY-TRANSACTION.TRNS-DATA; 02; 023100      ,DAILY_TRANSACTION B; 023200    WHERE B.CONTRACT_ID    =; 023300      :DCLDAILY-TRANSACTION.CONTRACT-ID; 023400     AND B.MICROFILM_LOC_NBR = :MICROFILM-LOC-NBR; 023500     AND B.TRNS_TIME  BETWEEN :WS-BEG-TIME AND :WS-END-TIME; 023600     AND B.TRNS_STATUS IN ('P', 'W'); 023700     AND A.TRNS_ID      = B.TRNS_ID; 023800     AND A.TRANSACTION_GROUP = '5'; 023900    ORDER BY SEQUENCE_NUMBER; 02; END-EXEC.; ; 078300   EVALUATE SQLCODE; 078400     WHEN ZERO-RETURN CONTINUE; 078500     WHEN OTHER; 078600       GO TO 2400-PROC-DLY-TRNS-EXIT; 07; ; 074500   PERFORM 3100-PROCESS-DT THRU; 074600       3100-PROCESS-DT-EXIT.; 2400-PROC-DLY-TRNS-EXIT.; EXIT.; %%%K6 - 1358534      - END, 

FABAP0M1.CBL, PROGRAM:   FABAP0M1 - EDIT BENEFIT AFFECTED RECORDS AND INSERT; 

FABAP0M2.CBL, PROGRAM:   FABAP0M2 - BENEFIT AFFECTED RETRIEVAL; PROGRAM HISTORY, THIS ROUTINE PERFORMS PROGRAM INITIALIZATION FUNCTIONS., 



FABDP0M1.CBL, PROGRAM:   FABDP0M1 - TRANSLATOR 1; PROGRAM HISTORY, /, ** THERE CAN BE MULTIPLE OPTIONS, SO LOOK IN ALL 3 POSITIONS, SAME FUNCTION PERFORMED IN FWEPCTCE TELON MEMBER IN FEC1SC00  00136600, SAME FUNCTION PERFORMED IN FWEPCTAP TELON MEMBER IN FEC1SC00  00148900, ** UPDATE THE DAILY TRANSACTION                 00168800, ** IF THE TRANSLATOR-2 PROGRAM WAS SUCCESSFUL, KEEP GOING., 

FABDP0M2.CBL, PROGRAM:; E N V I R O N M E N T  D I V I S I O N, SOURCE UNKNOWN, 

FABDPBM3.CBL, 

FABDPBMM.CBL, PROGRAM:; 

FACVP0M0.CBL, PROGRAM:   FACVP0M0 - FEP ENROLLMENT OTHER COVERAGE DRIVER.; CALLED PROGRAMS: FACVP0M1 OTHER COVERAGE EDIT MODULE; FACVP0M2 OTHER COVERAGE ROSTER MODULE; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:   FA99XF01 SIW-STANDARD-INPUT-WORKAREA; FA99XF02 SOW-STANDARD-OUTPUT-WORKAREA; FA99XF03 SAW-STANDARD-ABEND-WORKAREA; FACVXF01 OTHER COVERAGE FIELDS, 004800 WORKING-STORAGE SECTION.; 004900 77 PAN-VALET PICTURE X(24) VALUE '001FACVP0M0 01/01/06'.; ; 005200   04 FACVP0M1-MODULE     PIC X(08) VALUE 'FACVP0M1'.; 005300   04 FACVP0M2-MODULE     PIC X(08) VALUE 'FACVP0M2'.; 012800 01 WS-TIME           PIC X(26).; 012900 01 WS-BEG-TIME         PIC X(26).; 01; 017700 01 WS-BD-RUN-DATE        PIC X(10) VALUE SPACES.; 017800 01 WS-BD-RUN-TS         PIC X(26) VALUE SPACES.; 01 WS-MISC.; 012800   04 WS-CSR-OPN-SW      PIC X(01) VALUE SPACES.; 012800   04 EOF-SW          PIC X(01) VALUE SPACES.; 012800   04 WS-RECORD-ABT      PIC X(01) VALUE SPACES.; 012800   04 WS-ERROR-ROLLBACK-INDIC PIC X(01) VALUE SPACES.; 017800   04 WS-PARM-DATE1      PIC X(10) VALUE SPACES.; 018600   04 WS-NULL-INDICATORS.; 018700     08 PARM-DATE1-NN    PIC S9(4) COMP VALUE +0.; 018800   04 WS-PREV-TRNS-SOURCE   PIC S9(4) COMP VALUE +0.; 018900   04 WS-PREV-MEDIUM      PIC X(1) VALUE SPACES.; 01; 019100   04 WS-ABT-RETURN-CODE-SAVE PIC S9(9) COMP VALUE +0.; 019200   04 WS-ABT-COUNT-HOLD    PIC 9(9) COMP VALUE 0.; 001650   04 FXAT-PGM         PIC X(8) VALUE 'FXATPBM0'.   012; 001650   04 FXUE-PGM         PIC X(8) VALUE 'FXUEPBM0'.   012; 04 WS-MICROFILM-LOC-NBR   PIC 9(11) VALUE ZEROES.; 04 WS-MICROFILM-LOC-NBR-X REDEFINES; WS-MICROFILM-LOC-NBR   PIC X(11).; 04 WS-CONTRACT-ID      PIC 9(09) VALUE ZEROES.; 015500 01 WS-TRX-DATA-WORK-AREA.; 015600   02 FILLER          PIC X(01).; 015700   02 WS-TRX-DATA-AREA     PIC X(8057).; 01; 016100   COPY FWEDTXET.; %%%K8 - 1209145 - R42018 - END; ; -----------------------------------------------------------------; ; 005700 01 WS-FACVP0M1-REQUEST.; 005800   04 WS-EDIT-HEADER     PIC X(28).; 005900   COPY FA99XF01.; 00; 006100     REPLACING ==OCCURS 0 TO 100 TIMES==; 006200         BY ==OCCURS 1 TIMES.==; 006300          ==DEPENDING ON FACV-NUMBER-OF-RECORDS.==; 006400         BY == ==.; -----------------------------------------------------------------; 006600 01 WS-FACVP0M1-RESPONSE.; 006700   COPY FA99XF02.; -----------------------------------------------------------------; 006900 01 WS-FACVP0M1-RESPONSE-LEN   PIC 9(06).; ; ; 008600 01 WS-FACV-ABEND-RESPONSE.; 008700   COPY FA99XF03.; ; %%%K8 - 1209145 - R42018 - START; 015800 01 STANDARD-LINK-AREA.; 015900   COPY FE99XF01.; 016200 01 ABNORMAL-TERMINATION-AREA.; 016300   COPY FWEDABT1.; 016400   EXEC SQL INCLUDE FWEDABT2 END-EXEC.; ---------------------------------------------------------------; DB2 DECLARATIONS; ---------------------------------------------------------------; 019600   EXEC SQL INCLUDE SQLCA END-EXEC SUPPRESS.; 019700   EXEC SQL INCLUDE FDLYTRNS END-EXEC.; 0; 020100   EXEC SQL INCLUDE FSRCEMED END-EXEC.; 019900   EXEC SQL INCLUDE FPROCPRM END-EXEC.; 019900   EXEC SQL INCLUDE FWEDCNST END-EXEC.; 019900   EXEC SQL INCLUDE FSUSPERR END-EXEC.; ; ---------------------------------------------------------------; DB2 CURSORS; ---------------------------------------------------------------; 020700                           EXEC SQL; 020800   DECLARE DAILY-TRANS-CSR CURSOR WITH HOLD FOR; 020900   SELECT A.SEQUENCE_NUMBER; 02; 021100      ,B.OPERATOR_ID; 021200      ,B.TRNS_TIME; 021300      ,B.TRNS_ID; 021400      ,B.TRNS_STATUS; 021500      ,B.MEDIUM_TYPE; 021600      ,B.FORM_TYPE; 021700      ,B.ACTION_CODE; 021800      ,B.PLAN_CODE; 021900      ,B.LAST_PROC_DATE; 02; 022100      ,B.MEMBER_ID; 022200      ,B.TRNS_FUNCTION; 022300      ,B.SUBJECT_ID; 022400      ,B.TRANSMITTAL_NBR; 022500      ,B.AGENCY_OFFICE_ID; 022600      ,B.MICROFILM_LOC_NBR; 022700      ,B.CONTRACT_ID; 022800      ,B.ENR_TRNS_CODE; 022900      ,B.TRNS_DATA; 02; 023100      ,DAILY_TRANSACTION B; 023200    WHERE B.CONTRACT_ID    =; 023300      :DCLDAILY-TRANSACTION.CONTRACT-ID; 023400     AND B.MICROFILM_LOC_NBR = :MICROFILM-LOC-NBR; 023500     AND B.TRNS_TIME  BETWEEN :WS-BEG-TIME AND :WS-END-TIME; 023600     AND B.TRNS_STATUS IN ('P', 'W'); 023700     AND A.TRNS_ID      = B.TRNS_ID; 023800     AND A.TRANSACTION_GROUP = '5'; 023900    ORDER BY SEQUENCE_NUMBER; 02; END-EXEC.; %%%K8 - 1209145 - R42018 - END; ; -*-*-*; LINKAGE SECTION; -*-*-*; ; 009300 LINKAGE SECTION.; ----------------; ; 009600 01 LK-FACV-RETURN-CODE       PIC 9(02).; ; 009800 01 LK-FACV-MESSAGE-LEN       PIC 9(06).; ; 0; 010100   04 LK-PASS-HEADER.; 010200     08 LK-PASS-DRIVER     PIC X(08).; 010300     08 LK-PASS-OPTIONS.; 010400       12 LK-PASS-OPTION   PIC X OCCURS 20 TIMES.; 010500   COPY FA99XF01.; 010600   04 FILLER           PIC X(31781)., 075900                       EXEC SQL; 07; 076100     :DCLTRANSACTION-GROUP.SEQUENCE-NUMBER; 076200     ,:DCLTRANSACTION-GROUP.PROGRAM-NAME; 076300     ,:DCLDAILY-TRANSACTION.OPERATOR-ID; 076400     ,:DCLDAILY-TRANSACTION.TRNS-TIME; 076500     ,:DCLDAILY-TRANSACTION.TRNS-ID; 076600     ,:DCLDAILY-TRANSACTION.TRNS-STATUS; 076700     ,:DCLDAILY-TRANSACTION.MEDIUM-TYPE; 076800     ,:DCLDAILY-TRANSACTION.FORM-TYPE; 076900     ,:DCLDAILY-TRANSACTION.ACTION-CODE; 07; 077100     ,:DCLDAILY-TRANSACTION.LAST-PROC-DATE; 077200     ,:DCLDAILY-TRANSACTION.DELETE-IND; 077300     ,:DCLDAILY-TRANSACTION.MEMBER-ID; 077400     ,:DCLDAILY-TRANSACTION.TRNS-FUNCTION; 077500     ,:DCLDAILY-TRANSACTION.SUBJECT-ID; 077600     ,:DCLDAILY-TRANSACTION.TRANSMITTAL-NBR; 077700     ,:DCLDAILY-TRANSACTION.AGENCY-OFFICE-ID; 077800     ,:DCLDAILY-TRANSACTION.MICROFILM-LOC-NBR; 077900     ,:DCLDAILY-TRANSACTION.CONTRACT-ID; 07; 078100     ,:DCLDAILY-TRANSACTION.TRNS-DATA; 078200                       END-EXEC.; 078300   EVALUATE SQLCODE; 078400     WHEN ZERO-RETURN CONTINUE; 078500     WHEN NOT-FOUND  MOVE  'Y'   TO EOF-SW; 078600             GO TO  2240-FETCH-DT-CSR-EXIT; 078700     WHEN OTHER    MOVE  22401  TO SWS-ABT-ACCESS-POINT; 078800             PERFORM; 078900; 07; 079100; 079200 2240-FETCH-DT-CSR-EXIT.; 079300   EXIT., 

FACVP0M1.CBL, PROGRAM:   FACVP0M1 - EDIT OTHER COVERAGE RECORDS AND INSERT; DAILY TRANSACTIONS.; ; FUNCTION: EDITS OTHER COVERAGE ROWS CREATED BY WEB-BASED; OTHER COVERAGE ENROLLMENT PAGE.; ; PROCESSING NOTES:; ; CALLED PROGRAMS:; FXCEP0M0 - COMMON EDIT MODULES; FXDTP0M0 - INSERT DAILY TRANSACTIONS; FXUEP0M0 - MAINTAIN USER ERROR WORKING STORAGE TABLE; ; DATABASE TABLES AND VIEWS (ACCESS):; FASGPYRL - ASGN_PAYROLL_OFC  : SELECT; FCNTRENR - CONTRACT_ENRL   : SELECT; FOTHPTYL - OTR_PRTY_LIABILITY : FETCH; ; COPY MEMBERS:; FWEDLKUE - USER ERROR WORKING STORAGE; FWEDLKDT - DAILY TRANSACTION WORKING STORAGE; FWEDTXET - COMMON EDIT WORKING STORAGE, 

FACVP0M2.CBL, PROGRAM:   FACVP0M2 - EDITS MULTIPLE MEMBER RECORDS FOR OTHER; FUNCTION: EDITS OTHER COVERAGE ROWS CREATED BY WEB-BASED; MULTIPLE MEMBER ROSTER ENROLLMENT PAGE, 

FAEEP0M0.CBL, PROGRAM:   FAEEP0M0 - FEP ENROLLMENT ELIGIBILITY EXCEPTION; CALLED PROGRAMS: FAEEP0M1 ELIGIBILITY EXCEPTION EDIT MODULE; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:   FA99XF01 SIW-STANDARD-INPUT-WORKAREA; FA99XF02 SOW-STANDARD-OUTPUT-WORKAREA; FA99XF03 SAW-STANDARD-ABEND-WORKAREA; FE99XF01 STW-STANDARD-WORKAREA; FWEDABT1 ABNORMAL-TERMINATION-AREA; FAEEXF01 ELIGIBILITY EXCEPTION FIELDS, 

FAEEP0M1.CBL, 

FAENPCM0.CBL, PROGRAM: FALRP0M4  FUNCTION: LETRHIST; 

FAESP0M0.CBL, FUNCTION: PROCESS ENROLLMENT WEB SERVICE TRANSACTIONS, 

FAESP1M0.CBL, PROGRAM:   FAESP1M0; 

FAESP2M0.CBL, 05 FAESP2M1-MODULE     PIC X(08)  VALUE 'FAESP2M1'.

FAESP2M1.CBL, 

FAESP3M0.CBL, 

FAESP3M1.CBL, PROGRAM:   FAESP3M1 - ONLINE BATCH DRIVER; PROGRAM HISTORY, 05 WS-TIME         PIC X(26).; 05 WS-BEG-TIME       PIC X(26).; 05 WS-END-TIME       PIC X(26).; 05 WS-HLD-TIME       PIC X(26).; 05 SUB1           PIC 9(07) COMP-3 VALUE 0.; 05 WS-HOLD-CONTRACT-ID   PIC 9(08).; 05 WS-LEN       COMP PIC S9(8).; 05 WS-BEG-PTR     COMP PIC S9(8).; 05 WS-END-PTR     COMP PIC S9(8).; 05 TRANSLATOR-1       PIC X(08) VALUE 'FABDP0M1'.; 05 TRANSLATOR-2       PIC X(08) VALUE 'FABDP0M2'.; 05 D-SQL          PIC -999.; 05 D-FLD          PIC 9(05).; 05 WS-MICRO-FLD       PIC X(11).; 05 WS-SEG-LEN     COMP PIC S9(08).; 05 WS-SEG-OFF     COMP PIC S9(08).; 05 WS-SEG-TOT     COMP PIC S9(08).; 05 WS-SEG-DIF     COMP PIC S9(08).; 05 WS-ERR-SEG-LEN   COMP PIC S9(08).; 05 WS-TEMP-AREA       PIC X(; 05 WS-CTR          PIC 9(03) VALUE 0.; 05 WS-HOLD-PAYROLL-OFC   PIC 9(08).; 05 WS-MEMBER-ID        PIC 9(9) VALUE ZEROS.; 05 WS-MEMBER-ID-REDEF REDEFINES WS-MEMBER-ID.; 08 FILLER         PIC 9(7).; 08 WS-MEMBER-PART     PIC 9.; 08 FILLER         PIC 9.; 05 WS-CONTRACT-ID       PIC 9(9) VALUE ZEROS.; 05 WS-CONTRACT-ID-REDEF REDEFINES WS-CONTRACT-ID.; 08 FILLER         PIC 9(7).; 08 WS-CONTRACT-PART    PIC 9.; 08 FILLER         PIC 9.; 05 CONTRACT-FOUND-FLAG    PIC X(01).; 88 CONTRACT-NOT-FOUND  VALUE 'N'.; 88 CONTRACT-FOUND    VALUE 'Y'.; 05 MEMBER-FOUND-FLAG     PIC X(01).; 88 MEMBER-NOT-FOUND   VALUE 'N'.; 88 MEMBER-FOUND     VALUE 'Y'.; ; ---------------------------------------------------------------; PROGRAM WORK AREA; ---------------------------------------------------------------; AREA USED TO REMOVE LEADING SPACE FROM TRANSACTION DATA.; XDB DOES NOT ALLOW LEADING LOW-VALUE IN VARCHAR, SO PAD WITH A; SPACE.; 01 WS-TRX-DATA-WORK-AREA.; 02 FILLER          PIC X(01).; %%%V9 - 2010SOW040 - HIPAA 5010     - START:; 02 WS-TRX-DATA-AREA     PIC X(4095).; 02 WS-TRX-DATA-AREA     PIC X(8057).; %%%V9 - 2010SOW040 - HIPAA 5010     -  END:; 01 STANDARD-LINK-AREA.; COPY FE99XF01.; 01 COMMON-EDIT-LINK-AREA.; COPY FWEDTXET.; 01 ABNORMAL-TERMINATION-AREA.; COPY FWEDABT1.; EXEC SQL INCLUDE FWEDABT2 END-EXEC.; ---------------------------------------------------------------; PROGRAM SWITCHES; ---------------------------------------------------------------; ; 01 PROGRAM-SWITCHES.; 04 EOF-SW             PIC X(01).; 04 WS-CSR-OPN-SW          PIC X(01).; 04 WS-FND-SW            PIC X(01).; 04 WS-DONE-SW           PIC X(01).; 04 WS-FATAL-ERR-SW         PIC X(01) VALUE SPACES.; 04 WS-TERM-PGM-SW         PIC X(01) VALUE 'Y'.; 04 WS-IGNORE-NOT-FND-SW      PIC X(01) VALUE SPACES.; 04 WS-RECORD-ABT          PIC X(01) VALUE SPACES.; 04 WS-BD-RUN-DATE         PIC X(10) VALUE SPACES.; 04 WS-BD-RUN-TS          PIC X(26) VALUE SPACES.; 04 WS-SORT-IDENTIFIER       PIC X(1).; 04 WS-TRANSACTIONS-PROCESSED COMP PIC 9(09) VALUE 0.; 04 WS-ERROR-LENGTH      COMP PIC 9(04) VALUE 46.; 04 WS-ERROR-ROLLBACK-INDIC     PIC X(1).; 04 WS-PROCESS-NAME-BUILD.; 08 FILLER           PIC X(5) VALUE 'GROUP'.; 08 WS-PROCESS-GROUP      PIC X(1).; 04 WS-NULL-INDICATORS.; 08 PARM-DATE1-NN        PIC S9(4) COMP VALUE +0.; 04 WS-PREV-TRNS-SOURCE       PIC S9(4) COMP VALUE +0.; 04 WS-PREV-MEDIUM         PIC X(1) VALUE SPACES.; 04 WS-PREV-PROCESS-CODE      PIC X(1) VALUE SPACES.; 04 WS-ABT-RETURN-CODE-SAVE     PIC S9(9) COMP VALUE +0.; 04 WS-ABT-COUNT-HOLD        PIC 9(9) COMP VALUE 0.; 04 PREF-PHONE-CONTACT-FLAG  PIC X(01).; 88 PREF-PHONE-CONTACT-NOT-FOUND VALUE 'N'.; 88 PREF-PHONE-CONTACT-FOUND   VALUE 'Y'.; 04 EMAIL-ADDR-CONTACT-FLAG  PIC X(01).; 88 EMAIL-ADDR-CONTACT-NOT-FOUND VALUE 'N'.; 88 EMAIL-ADDR-CONTACT-FOUND   VALUE 'Y'.; 04 SUSP-DAILY-TRAN-FLAG   PIC X(01).; 88 SUSP-DAILY-TRAN-NOTFOUND VALUE 'N'.; 88 SUSP-DAILY-TRAN-FOUND  VALUE 'Y'.; 04 DB-PREF-PHONE-CONTACT-INFO  PIC X(60).; 04 DB-EMAIL-ADDR-CONTACT-INFO  PIC X(60).; 04 WF-ZIP-CODE.; 08 WF-ZIP-CODE-5      PIC X(05).; 08 WF-ZIP-CODE-4      PIC X(04).; 08 WF-ZIP-CODE-4-BYTE REDEFINES WF-ZIP-CODE-4; PIC X OCCURS 4 TIMES.; 08 WF-ZIP-CODE-10-15    PIC X(06).; 04 ADDRESS-MATCH-SW  PIC 9 VALUE 0.; 88 ADDRESS-MATCH     VALUE 1.; 88 ADDRESS-NOT-MATCH   VALUE 0.; ; ; 01 WS-CONTRACT-CONVERT     PIC 9(9) VALUE ZEROS.; ---------------------------------------------------------------; DB2 DECLARATIONS; ---------------------------------------------------------------; EXEC SQL INCLUDE SQLCA END-EXEC SUPPRESS.; EXEC SQL INCLUDE FCNTRENR END-EXEC.; EXEC SQL INCLUDE FMEMBER END-EXEC.; EXEC SQL INCLUDE FDLYTRNS END-EXEC.; EXEC SQL INCLUDE FSUSPERR END-EXEC.; EXEC SQL INCLUDE FPROCPRM END-EXEC.; EXEC SQL INCLUDE FTRANGRP END-EXEC.; EXEC SQL INCLUDE FSRCEMED END-EXEC.; EXEC SQL INCLUDE FERRMESG END-EXEC.; EXEC SQL INCLUDE FPYRLOFC END-EXEC.; EXEC SQL INCLUDE FCNTRYRF END-EXEC.; EXEC SQL INCLUDE FMBRCNTC END-EXEC.; EXEC SQL INCLUDE FADDRESS END-EXEC.; ; ---------------------------------------------------------------; DB2 CURSORS; ---------------------------------------------------------------; EXEC SQL; DECLARE DAILY-TRANS-CSR CURSOR WITH HOLD FOR; SELECT A.SEQUENCE_NUMBER; ,A.PROGRAM_NAME; ,B.OPERATOR_ID; ,B.TRNS_TIME; ,B.TRNS_ID; ,B.TRNS_STATUS; ,B.MEDIUM_TYPE; ,B.FORM_TYPE; ,B.ACTION_CODE; ,B.PLAN_CODE; ,B.LAST_PROC_DATE; ,B.DELETE_IND; ,B.MEMBER_ID; ,B.TRNS_FUNCTION; ,B.SUBJECT_ID; ,B.TRANSMITTAL_NBR; ,B.AGENCY_OFFICE_ID; ,B.MICROFILM_LOC_NBR; ,B.CONTRACT_ID; ,B.ENR_TRNS_CODE; ,B.TRNS_DATA; FROM TRANSACTION_GROUP A; ,DAILY_TRANSACTION B; WHERE B.CONTRACT_ID    =; :DCLDAILY-TRANSACTION.CONTRACT-ID; AND B.MICROFILM_LOC_NBR = :MICROFILM-LOC-NBR; AND (B.TRNS_TIME BETWEEN :WS-BEG-TIME AND :WS-END-TIME; OR B.LAST_PROC_TS BETWEEN :WS-BEG-TIME AND :WS-END-TIME; AND B.TRNS_STATUS IN ('P', 'W'); AND A.TRNS_ID      = B.TRNS_ID; AND A.TRANSACTION_GROUP = '5'; ORDER BY SEQUENCE_NUMBER; ,TRNS_TIME              END-EXEC., EXEC SQL INCLUDE FAPCXF02 END-EXEC., *** IF THE FLAG IS SET, CREATE A DAILY TRANSACTION WITH THE; *** OTR IN IT. THIS IS A TESTING FUNCTION. THERE WILL BE NO; *** PROCESS RUN PARMS ROW IN PRODUCTION, SO THIS CAN BE LEFT IN., THIS ROUTINE COMPARES THE TABLE ADDRESS WITH THE REQUEST; ADDRESS TO CHECK FOR DUPLICATES., 0160-REFORMAT-FCCT-AREA.                     00145600, 0170-UPDATE-FSCV.                        00146900; 0014; INITIALIZE DCLDAILY-TRANSACTION.               00147100; 00147200; MOVE ENTB-SUBJECT-ID     TO SUBJECT-ID          00147300; OF DCLDAILY-TRANSACTION.    00147400; MOVE ENTB-MICROFILM-LOC-NBR TO MICROFILM-LOC-NBR      00147500; OF DCLDAILY-TRANSACTION.    00147600; MOVE ENTB-KEYER-ID      TO OPERATOR-ID         00147700; OF DCLDAILY-TRANSACTION.    00147800; AS WE ONLY HAVE +VE FSCV IN LINKED STATE FROM 834        00147900; WE ONLY WANT TO UPDATE THEM TO WAITING STATUS          0014; MOVE 995           TO PLAN-CODE          00148100; OF DCLDAILY-TRANSACTION.    00148200; 00148300; PERFORM 0140-GET-TIMESTAMP THRU               00148400; 0140-GET-TIMESTAMP-EXIT.               00148500; 00148600; MOVE  WS-TIME         TO WS-HLD-TIME.       00148700; 00148800; EXEC SQL                           00148900; UPDATE DAILY_TRANSACTION                 0014; SET OPERATOR_ID =                   00149100; :DCLDAILY-TRANSACTION.OPERATOR-ID,         00149200; TRNS_STATUS = 'W',                 00149300; LAST_PROC_DATE = :WS-BD-RUN-DATE,         00149400; LAST_PROC_TS = :WS-HLD-TIME            00149500; WHERE TRNS_ID = 'FSCV'                  00149600; AND SUBJECT_ID = :DCLDAILY-TRANSACTION.SUBJECT-ID   00149700; AND TRNS_STATUS = 'L'                 00149800; AND PLAN_CODE  = :DCLDAILY-TRANSACTION.PLAN-CODE   00149900; AND MICROFILM_LOC_NBR =                001; :DCLDAILY-TRANSACTION.MICROFILM-LOC-NBR  00150100; AND DELETE_IND <> 'Y'                 00150200; END-EXEC.                          00150300; EVALUATE SQLCODE                       00150400; WHEN ZERO-RETURN                      00150500; CONTINUE                       00150600; WHEN NOT-FOUND                       00150700; CONTINUE                       00150800; WHEN OTHER                         00150900; MOVE  01701      TO SWS-ABT-ACCESS-POINT   0015; PERFORM 9900-ERROR-RTN THRU              00151100; 9900-ERROR-RTN-EXIT              00151200; END-EVALUATE.                        00151300, MOVE 'P'       TO TRANSLATOR-2-FUNCTION.        0015; MOVE 'P'       TO OTR-COM-TRN-STA           00157100; CALL TRANSLATOR-2 USING TRANSLATOR-2-FUNCTION        00157200; WS-OTR-MESSAGE            00157300; TRANSLATOR-2-SUSP-DATA        00157400; TRANSLATOR-2-RESP-DATA        00157500; ABNORMAL-TERMINATION-AREA      00157600; ON EXCEPTION                       00157700; MOVE  21001     TO SWS-ABT-ACCESS-POINT     00157800; PERFORM 9900-ERROR-RTN THRU              00157900; 9900-ERROR-RTN-EXIT              0015; END-CALL.                          00158100; 00158200, IF OTR-FUNCTION = 'PRCCONTR'                 00171100; MOVE OTR-COM-CONTRACT-ID(02:08) TO STW-CONTRACT-ID    00171200; MOVE STW-CONTRACT-ID-NUM    TO CONTRACT-ID      00171300; OF DCLDAILY-TRANSACTION  00171400; IF OTR-COM-MICR-NBR (11:01) = ' '             00171500; MOVE '2'           TO WS-MICRO-FLD (01:01) 00171600; MOVE OTR-COM-MICR-NBR (01:10) TO WS-MICRO-FLD (02:10) 00171700; MOVE WS-MICRO-FLD       TO OTR-COM-MICR-NBR   00171800; END-IF                          00171900; MOVE OTR-COM-MICR-NBR-NUM    TO MICROFILM-LOC-NBR   0017; END-IF.                           00172100; 00172200; IF OTR-FUNCTION = 'PRCFILEC'                 00172300; MOVE OTR-FCCT-CONTRACT-ID    TO STW-CONTRACT-ID    00172400; MOVE STW-CONTRACT-ID-NUM    TO CONTRACT-ID      00172500; OF DCLDAILY-TRANSACTION  00172600; IF OTR-FCCT-MICR-NBR (11:01) = ' '            00172700; MOVE '2'            TO WS-MICRO-FLD (01:01) 00172800; MOVE OTR-FCCT-MICR-NBR (01:10) TO WS-MICRO-FLD (02:10) 00172900; MOVE WS-MICRO-FLD       TO OTR-FCCT-MICR-NBR  0017; END-IF                          00173100; MOVE OTR-FCCT-MICR-NBR-NUM    TO MICROFILM-LOC-NBR   00173200; END-IF.                           00173300; 00173400; EXEC SQL OPEN DAILY-TRANS-CSR END-EXEC.           00173500; EVALUATE SQLCODE                       00173600; WHEN ZERO-RETURN MOVE 'Y'   TO WS-CSR-OPN-SW     00173700; WHEN OTHER    MOVE 24101  TO SWS-ABT-ACCESS-POINT  00173800; PERFORM 9900-ERROR-RTN THRU       00173900; 9900-ERROR-RTN-EXIT       0017; END-EVALUATE.                        00174100; 00174200; 2410-OPEN-DT-CSR-EXIT.                      00174300; EXIT.                            00174400, EXEC SQL      00177300; FETCH DAILY-TRANS-CSR INTO                  00177400; :DCLTRANSACTION-GROUP.SEQUENCE-NUMBER          00177500; ,:DCLTRANSACTION-GROUP.PROGRAM-NAME           00177600; ,:DCLDAILY-TRANSACTION.OPERATOR-ID            00177700; ,:DCLDAILY-TRANSACTION.TRNS-TIME             00177800; ,:DCLDAILY-TRANSACTION.TRNS-ID              00177900; ,:DCLDAILY-TRANSACTION.TRNS-STATUS            0017; ,:DCLDAILY-TRANSACTION.MEDIUM-TYPE            00178100; ,:DCLDAILY-TRANSACTION.FORM-TYPE             00178200; ,:DCLDAILY-TRANSACTION.ACTION-CODE            00178300; ,:DCLDAILY-TRANSACTION.PLAN-CODE             00178400; ,:DCLDAILY-TRANSACTION.LAST-PROC-DATE          00178500; ,:DCLDAILY-TRANSACTION.DELETE-IND            00178600; ,:DCLDAILY-TRANSACTION.MEMBER-ID             00178700; ,:DCLDAILY-TRANSACTION.TRNS-FUNCTION           00178800; ,:DCLDAILY-TRANSACTION.SUBJECT-ID            00178900; ,:DCLDAILY-TRANSACTION.TRANSMITTAL-NBR          0017; ,:DCLDAILY-TRANSACTION.AGENCY-OFFICE-ID         00179100; ,:DCLDAILY-TRANSACTION.MICROFILM-LOC-NBR         00179200; ,:DCLDAILY-TRANSACTION.CONTRACT-ID            00179300; ,:DCLDAILY-TRANSACTION.ENR-TRNS-CODE           00179400; ,:DCLDAILY-TRANSACTION.TRNS-DATA             00179500; END-EXEC.      00179600; EVALUATE SQLCODE                       00179700; WHEN ZERO-RETURN CONTINUE                00179800; WHEN NOT-FOUND  MOVE  'Y'   TO EOF-SW       00179900; GO TO  2430-FETCH-DT-CSR-EXIT     001; WHEN OTHER    MOVE  24301  TO SWS-ABT-ACCESS-POINT00180100; PERFORM 9900-ERROR-RTN THRU       00180200; 9900-ERROR-RTN-EXIT       00180300; END-EVALUATE.                        00180400; 00180500; 2430-FETCH-DT-CSR-EXIT.                     00180600; EXIT.                            00180700, FUNCTION: CREATE AND PROCESS DAILY TRANSACTIONS; ; PROCESSING STEPS:; --------------------------------------------------------------; 01) CHECK INCOMING FEPDIRECT DATA TO SEE IF IT IS 'PEND' DATA.; IF IT IS, CALL THE TRANSLATOR 2 (FABDP0M2) MODULE AND THEN; EXIT. BASED ON THE RESPONSE FROM TRANSLATOR 2, WE WILL PASS; EITHER SUCCESS OR FAILURE BACK TO THE CALLING MODULE.; ; 02) CALL THE TRANSLATOR 1 (FABDP0M1) PROGRAM. IT WILL ATTEMPT; TO CREATE DAILY TRANSACTIONS FROM THE INPUT DATA. IF IT; FAILS TO DO SO, WE WILL EXIT, PASSING FAILURE BACK TO THE; CALLING MODULE.; ; 03) PERFORM A COMMIT. TRANSLATOR 1 HAS CREATED AND WRITTEN; DAILY TRANSACTIONS. IF A FUTURE PROBLEM REQUIRES A; ROLLBACK, THE DAILY TRANSACTIONS WILL STILL BE THERE.; ; 04) SET UP A CURSOR FOR THE DAILY TRANSACTIONS WE HAVE JUST; CREATED, BASED ON OPERATOR_ID, TRANSACTION TIME AND; MICROFILM INDEX NUMBER.; ; FOR EACH ONE OF THE DAILY TRANSACTIONS RETURNED FROM THE; TRANSLATOR 1 PROGRAM, RUN THEM THRU THE APPROPRIATE; BATCH DRIVER MODULE. FUTURE PROCESSING WILL PASS THE; SUSPENSIONS TO TRANSLATOR 2. THE INITIAL IMPLEMENTATION; WILL NOT.; ; IF AN ABNORMAL TERMINATION CONDITION OCCURS, SUSPEND/REJECT; THE TRANSACTION AND WRITE A RECORD TO THE; ABNORMAL_TERMINATION TABLE. OTHERWISE, MARK THE DAILY; TRANSACTION AS COMPLETE.; ; IF SUCCESSFUL, PERFORM A COMMIT. WE WANT TO PROCESS AS; MANY PIECES AS WE CAN. COMMITING AFTER EACH DAILY TRANS.; ; IF A FATAL ERROR OCCURS, ROLLBACK THE CHANGES.; ; 05) WHEN THE DAILY TRANSACTIONS RAN, THEY MIGHT HAVE CREATED; ADDITONAL DAILY TRANSACTIONS WHICH NEED TO BE PROCESSED.; ; SO, REPEAT THE PROCESS FOLLOWED IN BULLRT 4 ABOVE.; ; 06) FORMAT THE RETURN AREA AND EXIT.; ; ; CALLED PROGRAMS:; FXUEPBM0 - PROCESS USER ERROR; FXATPBM0 - INSERT ABNORMAL_TERMINATION RECORD; ; ERROR MESSAGES:; 0102S; ; DATABASE TABLES AND VIEWS (ACCESS):; FDLYTRNS - DAILY TRANSACTION RECORD (UPDATE); FSUSPERR - SUSPENSE ERROR (UPDATE); FTRANGRP - TRANSACTION GROUP (ACCESS); FSRCEMED - SOURCE MEDIUM (ACCESS); ; COPY MEMBERS:; FE99XF01 - COMMON ELEMENTS / DAILY TRANSACTION AREA; FWEPCAUE - CALL USER ERROR; FWEPCAAT - CALL CREATE ABNORMAL TERMINATION; FWEPABT6 - ABNORMAL TERMINATION HANDLER; FWEDABT1 - ABNORMAL TERMINATION WORKING STORAGE; FWEDABT2 - ABNORMAL TERMINATION WORKING STORAGE; TEAM  IMPLEMENT PROGRAMMER; TRACK DATE    NAME      DESCRIPTION; ------ ---------- ------------ -------------------------------; XXXXXX 06/15/2015 S VIJAYANATHAN INITIAL IMPLEMENATION; ; 924328 05/13/2016 V MAGANTI    MAY MONTHLY 2016 CHANGES; XXXXXX 07/16/2016 AMIT DUSAD   ONBASE CHANGES; 1236075 04/27/2019 FE99TFR     REMOVE FWEDPGNM; 1316789   09/28/19 S VIJAYANATHAN ADDDED SUSPENDED FSCV TRAN-; SACTIONS TO ENRL TABLE LOAD; ENVIRONMENT DIVISION.; CONFIGURATION SECTION.; SOURCE-COMPUTER.  IBM-370.; OBJECT-COMPUTER.  IBM-370.; INPUT-OUTPUT SECTION.; FILE-CONTROL.; DATA DIVISION.; WORKING STORAGE SECTION; 01 WS-WORK-AREA.; 01 WS-OTR-MESSAGE.; 01 TRANSLATOR-2-FUNCTION     PIC X(01).; 01 TRANSLATOR-2-SUSP-DATA.; 01 TRANSLATOR-2-RESP-DATA.; 01 TRANSLATOR-2-RESP-UNPACKED.; 01 TRANSLATOR-1-PASS-DATA.; 01 TRANSLATOR-1-RESP-DATA     PIC X(9999).; 01 OTR-OUTPUT-OK-MSG-AREA.; 01 OTR-OUTPUT-ERR-MSG-AREA.; LINKAGE SECTION.; P R O C E D U R E  D I V I S I O N; PROCEDURE DIVISION USING LS-FECT-PARMS; LS-FECT-RECORDS; LS-FECT-RESP.; ; IF PARM-RC = 44; MOVE 55 TO PARM-RC; END-IF.; ; PERFORM 0100-HOUSEKEEPING THRU; 0100-HOUSEKEEPING-EXIT.; ; IF ENTB-DELETE-IND NOT = 'Y'; PERFORM; ; END-IF.; ; PERFORM; ; ; GO TO 9999-RETURN.; ; ; EXIT.; EJECT; ; MOVE  LOW-VALUES       TO STANDARD-LINK-AREA; MOVE  LOW-VALUES       TO ABNORMAL-TERMINATION-AREA; MOVE  'FAESP3M1'        TO SWS-ABT-MODULE-NAME.; MOVE  INPUT-OUTPUT-PARMS   TO WS-OTR-MESSAGE.; MOVE  'Y'           TO WS-IGNORE-NOT-FND-SW; INITIALIZE WS-OTR-MESSAGE.; ; PERFORM 0105-MARK-DELETE THRU 0105-EXIT.; PERFORM 0107-CHECK-SUSPENSE THRU 0107-EXIT.; ; PERFORM 0110-MOVE-FIELDS THRU 0110-EXIT.; ; MOVE  'B'           TO STW-LINK-ONLINE-BATCH.; PERFORM 0110-GET-PROCESS-DATE THRU; 0110-GET-PROCESS-DATE-EXIT.; MOVE  PARM-DATE1       TO TR1-BD-RUN-DATE.; ; MOVE  WS-BD-RUN-DATE     TO STW-CURRENT-DATE-DB2.; ; PERFORM 0140-GET-TIMESTAMP THRU; 0140-GET-TIMESTAMP-EXIT; ; MOVE  WS-TIME         TO WS-BD-RUN-TS; WS-BEG-TIME; WS-HLD-TIME.; ; PERFORM 0170-UPDATE-FSCV  THRU 0170-UPDATE-FSCV-EXIT.; MOVE  'FAESP3M1'      TO PROCESS-NAME.; MOVE  'N'         TO WS-FND-SW; PERFORM 0120-GET-PROC-RUN-PARMS THRU; 0120-GET-PROC-RUN-PARMS-EXIT.; IF WS-FND-SW = 'Y' AND PARM-ALPHA1 (01:01) = 'Y'; PERFORM 9999-CREATE-FEXX-RTN THRU; 9999-CREATE-FEXX-RTN-EXIT; END-IF.; ; IF OTR-FUNCTION = 'PRCCONTR'; PERFORM 0150-REFORMAT-SUSP-AREA THRU; 0150-REFORMAT-SUSP-AREA-EXIT; GO TO 0100-HOUSEKEEPING-EXIT; END-IF.; IF OTR-FUNCTION = 'PRCFILEC'; PERFORM 0160-REFORMAT-FCCT-AREA THRU; 0160-REFORMAT-FCCT-AREA-EXIT; GO TO 0100-HOUSEKEEPING-EXIT; END-IF.; ; 0100-HOUSEKEEPING-EXIT.; EXIT.; ; ; 0105-MARK-DELETE.; ; IF ENTB-DELETE-IND = 'Y'; MOVE ENTB-TRNS-TS TO TRNS-TIME; OF DCLDAILY-TRANSACTION; ELSE; GO TO 0105-EXIT; END-IF.; ; EXEC SQL; SELECT CONTRACT_ID, SUBJECT_ID, MICROFILM_LOC_NBR; INTO; :DCLDAILY-TRANSACTION.CONTRACT-ID,; :DCLDAILY-TRANSACTION.SUBJECT-ID,; :DCLDAILY-TRANSACTION.MICROFILM-LOC-NBR; FROM DAILY_TRANSACTION; WHERE TRNS_TIME  = :DCLDAILY-TRANSACTION.TRNS-TIME; AND TRNS_STATUS = 'S'; END-EXEC.; ; EVALUATE SQLCODE; WHEN ZERO-RETURN SET SUSP-DAILY-TRAN-FOUND TO TRUE; WHEN NOT-FOUND  SET SUSP-DAILY-TRAN-NOTFOUND TO TRUE; WHEN OTHER; MOVE  01051      TO SWS-ABT-ACCESS-POINT; PERFORM 9900-ERROR-RTN THRU; 9900-ERROR-RTN-EXIT; END-EVALUATE.; ; IF SUSP-DAILY-TRAN-FOUND; CONTINUE; ELSE; GO TO 0105-EXIT; END-IF.; ; ; EXEC SQL; UPDATE DAILY_TRANSACTION; SET DELETE_IND = 'Y'; WHERE CONTRACT_ID = :DCLDAILY-TRANSACTION.CONTRACT-ID; AND SUBJECT_ID  = :DCLDAILY-TRANSACTION.SUBJECT-ID; AND MICROFILM_LOC_NBR =; :DCLDAILY-TRANSACTION.MICROFILM-LOC-NBR; AND TRNS_STATUS = 'S'; END-EXEC.; ; EVALUATE SQLCODE; WHEN ZERO-RETURN CONTINUE; WHEN OTHER; MOVE  01052      TO SWS-ABT-ACCESS-POINT; PERFORM 9900-ERROR-RTN THRU; 9900-ERROR-RTN-EXIT; END-EVALUATE.; ; 0105-EXIT.; EXIT.; ; 0107-CHECK-SUSPENSE.; ; IF ENTB-TRNS-STATUS-CD NOT = 'R'; CONTINUE; ELSE; GO TO 0107-EXIT; END-IF.; ; INITIALIZE DCLDAILY-TRANSACTION.; SET SUSP-DAILY-TRAN-NOTFOUND TO TRUE.; ; MOVE ENTB-SUBJECT-ID      TO SUBJECT-ID; OF DCLDAILY-TRANSACTION.; IF ENTB-ASSIGN-CONTRACT-ID-IND = 'Y'; MOVE ZEROES     TO CONTRACT-ID; OF DCLDAILY-TRANSACTION; ELSE; MOVE ENTB-CONTRACT-ID-UD(2:8) TO CONTRACT-ID; OF DCLDAILY-TRANSACTION; END-IF.; MOVE ENTB-MICROFILM-LOC-NBR  TO MICROFILM-LOC-NBR; OF DCLDAILY-TRANSACTION.; ; EXEC SQL; SELECT TRNS_TIME; INTO; :DCLDAILY-TRANSACTION.TRNS-TIME; FROM DAILY_TRANSACTION; WHERE CONTRACT_ID = :DCLDAILY-TRANSACTION.CONTRACT-ID; AND  SUBJECT_ID = :DCLDAILY-TRANSACTION.SUBJECT-ID; AND MICROFILM_LOC_NBR =; :DCLDAILY-TRANSACTION.MICROFILM-LOC-NBR; AND TRNS_STATUS = 'S'; AND DELETE_IND <> 'Y'; FETCH FIRST ROW ONLY; END-EXEC.; ; EVALUATE SQLCODE; WHEN ZERO-RETURN SET SUSP-DAILY-TRAN-FOUND TO TRUE; WHEN NOT-FOUND  SET SUSP-DAILY-TRAN-NOTFOUND TO TRUE; WHEN OTHER; MOVE  01071      TO SWS-ABT-ACCESS-POINT; PERFORM 9900-ERROR-RTN THRU; 9900-ERROR-RTN-EXIT; END-EVALUATE.; ; IF SUSP-DAILY-TRAN-FOUND; PERFORM 0108-DELETE-DAILY-TRAN; THRU 0108-EXIT; END-IF.; ; 0107-EXIT.; EXIT.; ; 0108-DELETE-DAILY-TRAN.; ; EXEC SQL; DELETE FROM DAILY_TRANSACTION; WHERE CONTRACT_ID = :DCLDAILY-TRANSACTION.CONTRACT-ID; AND SUBJECT_ID = :DCLDAILY-TRANSACTION.SUBJECT-ID; AND MICROFILM_LOC_NBR =; :DCLDAILY-TRANSACTION.MICROFILM-LOC-NBR; AND NOT (TRNS_ID = 'FSCV' AND PLAN_CODE = 995); AND TRNS_STATUS = 'S'; END-EXEC.; ; EVALUATE SQLCODE; WHEN ZERO-RETURN CONTINUE; WHEN NOT-FOUND  CONTINUE; WHEN OTHER; MOVE  01081      TO SWS-ABT-ACCESS-POINT; PERFORM 9900-ERROR-RTN THRU; 9900-ERROR-RTN-EXIT; END-EVALUATE.; ; 0108-EXIT.; EXIT.; ; 0110-MOVE-FIELDS.; ; MOVE 'PRCCONTR'       TO OTR-FUNCTION.; PERFORM 0106-SET-ACT-CD THRU 0106-EXIT.; PERFORM 0111-SET-OPTION THRU 0111-EXIT.; COMMON DATA; MOVE ENTM-MEMBER-SSN-UD (1) TO OTR-COM-SSN.; MOVE ENTM-MEMBER-ID (1)   TO OTR-COM-MBR-ID.; MOVE ENTB-SUBJECT-ID     TO OTR-COM-SUBJECT-ID.; MOVE ENTB-CONTRACT-ID-UD   TO OTR-COM-CONTRACT-ID.; MOVE ENTB-MICROFILM-LOC-NBR(2:10) TO OTR-COM-MICR-NBR.; MOVE ENTB-KEYER-ID      TO OTR-COM-OPER-ID.; MOVE ENTB-BCBS-PLAN-CD    TO OTR-COM-PLN-CDE.; MOVE ENTB-FORM-TYPE-CD    TO OTR-COM-FORM-TYP.; MOVE ENTB-FORM-ACTION-TYP-CD TO OTR-COM-FORM-ACT-TYP.; MOVE ENTB-TRNS-STATUS-CD   TO OTR-COM-TRN-STA.; EVALUATE ENTB-TRNS-STATUS-CD; WHEN 'P'; MOVE 'P'         TO OTR-COM-ACT-CDE; WHEN 'R'; MOVE 'R'         TO OTR-COM-ACT-CDE; WHEN 'S'; MOVE 'S'         TO OTR-COM-ACT-CDE; WHEN 'U'; MOVE 'U'         TO OTR-COM-ACT-CDE; WHEN OTHER; MOVE 'A'         TO OTR-COM-ACT-CDE; END-EVALUATE.; MOVE ENTB-MEDIUM-TYPE-CD   TO OTR-COM-MEDIUM.; MOVE ENTB-OVERIDE-SW     TO OTR-COM-OVR-SW.; MOVE ENTB-REJECT-SW     TO OTR-COM-REJ-SW.; MOVE ENTB-REJECT-RSN-CD   TO OTR-COM-REJ-RSN.; MOVE ENTB-SEND-LTR-IND1   TO OTR-COM-LTR1-GEN-IND.; MOVE ENTB-REJECT-RSN-CD2   TO OTR-COM-REJ2-RSN.; MOVE ENTB-SEND-LTR-IND2   TO OTR-COM-LTR2-REJ-IND.; MOVE ENTB-REJECT-RSN-CD3   TO OTR-COM-REJ3-RSN.; MOVE ENTB-SEND-LTR-IND3   TO OTR-COM-LTR3-REJ-IND.; MOVE ENTB-REJECT-RSN-CD4   TO OTR-COM-REJ4-RSN.; MOVE ENTB-SEND-LTR-IND4   TO OTR-COM-LTR4-REJ-IND.; MOVE ENTB-REJECT-RSN-CD5   TO OTR-COM-REJ5-RSN.; MOVE ENTB-SEND-LTR-IND5   TO OTR-COM-LTR5-REJ-IND.; IF (ENTB-REJECT-SW = 'Y' OR; (ENTB-REJECT-SW = 'R' AND; ENTB-PREVIOUS-STATUS-CD = 'S')); MOVE 01 TO OTR-SUS-CNT; MOVE 'Y' TO OTR-COM-REJ-SW; MOVE 'U' TO OTR-COM-ACT-CDE; MOVE ENTB-TRNS-TS     TO OTR-SUS-TRNS-TIME(1); ELSE; IF ENTB-REJECT-SW = 'R'; MOVE 'Y' TO OTR-COM-REJ-SW; MOVE 'R' TO OTR-COM-ACT-CDE; END-IF; END-IF.; MOVE ENTB-TRANSMITTAL-NBR  TO OTR-COM-TRANSMITTAL-NBR.; DETAIL; MOVE ENTC-ENRL-TRNS-CD    TO OTR-DET-TRN-CDE.; MOVE ENTC-CRNT-OPM-OPTION-CD TO OTR-DET-CUR-ENR-CDE.; MOVE ENTC-CRNT-EVENT-CD   TO OTR-DET-CUR-EVT-CDE.; MOVE ENTC-CRNT-EMP-STATUS-CD TO OTR-DET-CUR-EMP-STA.; MOVE ENTC-CRNT-EFF-DT-UD   TO OTR-DET-CUR-EFF-DTE.; MOVE ENTC-NEW-OPM-OPTION-CD TO OTR-DET-NEW-ENR-CDE.; MOVE ENTC-NEW-EVENT-CD    TO OTR-DET-NEW-EVT-CDE.; MOVE ENTC-NEW-EMP-STATUS-CD TO OTR-DET-NEW-EMP-STA.; MOVE ENTC-NEW-EFF-DT-UD   TO OTR-DET-NEW-EFF-DTE.; MOVE ENTC-CRNT-AGENCY-OFC-UD TO OTR-DET-CUR-PAY-OFC-NBR.; MOVE ENTC-TCC-TERM-DT-UD   TO OTR-DET-TCC-TRM-DTE.; MOVE ENTC-SIGNATURE-IND   TO OTR-DET-SIGNATURE-SW.; MOVE ENTC-CANCELLATION-IND  TO OTR-DET-CANCEL-SUSPEND-SW.; MOVE ENTC-TRANSFER-IN-IND  TO OTR-DET-TRN-IN-SW.; MOVE 'N'           TO OTR-DET-MEDICARE-SW.; MOVE 'N'           TO OTR-DET-TRM-SW.; MOVE 'N'           TO OTR-DET-REE-SW.; MOVE 'N'           TO OTR-DET-CHG-CARRIER-OUT-SW.; MOVE 'N'           TO OTR-DET-CHG-ENRL-SW.; MOVE 'N'           TO OTR-DET-TRN-OUT-SW.; EVALUATE OTR-DET-TRN-CDE; WHEN '20'; MOVE 'Y' TO OTR-DET-TRN-IN-SW; MOVE ENTC-NEW-EFF-DT-UD TO OTR-DET-TRN-IN-EFF-DTE; MOVE 'Y' TO OTR-DET-MEDICARE-SW; WHEN '80'; MOVE 'Y' TO OTR-DET-TRM-SW; MOVE ENTC-NEW-EFF-DT-UD TO OTR-DET-TRM-EFF-DTE; WHEN '24'; MOVE 'Y' TO OTR-DET-REE-SW; MOVE ENTC-NEW-EFF-DT-UD TO OTR-DET-REE-DTE; WHEN '95'; MOVE 'Y' TO OTR-DET-CHG-CARRIER-OUT-SW; MOVE 'Y' TO OTR-DET-CHG-ENRL-SW; WHEN '30'; MOVE 'Y' TO OTR-DET-CHG-ENRL-SW; END-EVALUATE.; IF OTR-DET-TRN-IN-SW = 'Y'; MOVE ENTC-NEW-EFF-DT-UD TO OTR-DET-TRN-IN-EFF-DTE; END-IF.; IF OTR-DET-TRN-CDE > ' ' AND OTR-DET-TRN-CDE > ZEROS; MOVE 'Y' TO OTR-DET-CHG-CTR-SW; OTR-DET-CHG-ENRL-SW; END-IF.; IF OTR-DET-NEW-ENR-CDE = (SPACES OR ZEROES OR LOW-VALUES); MOVE OTR-DET-CUR-ENR-CDE TO OTR-DET-NEW-ENR-CDE; END-IF.; MOVE ENTC-NEW-AGENCY-OFC-UD TO OTR-DET-NEW-PAY-OFC-NBR.; IF ENTC-NEW-AGENCY-OFC-UD > SPACES; PERFORM 0113-GET-PAYROLL-OFFICE; THRU 0113-EXIT; END-IF.; IF ENTC-ENRL-TRNS-CD = '11' OR '12'; AND CONTRACT-NOT-FOUND; MOVE 'Y'        TO OTR-DET-CONTRACT-ID-ASGN-SW; MOVE 'Y'        TO OTR-DET-MBR-ID-ASGN-SW; END-IF.; MEMBER; IF ENTW-OWCP-CASE-ID > SPACES; MOVE ENTW-OWCP-CASE-ID TO OTR-DET-OWCP-CASE-ID; END-IF.; MOVE ENTM-COUNT       TO OTR-MBR-CNT.; PERFORM 0112-MOVE-MEMBER THRU 0112-EXIT; VARYING WS-CTR FROM 1 BY 1 UNTIL WS-CTR > ENTM-COUNT; IF OTR-COM-FORM-ACT-TYP = 'SA'; PERFORM 0114-SURVIVOR-ANNUITANT-LOOP; THRU 0114-EXIT; END-IF.; ; 0110-EXIT.; EXIT.; ; 0106-SET-ACT-CD.; ; PERFORM 106A-CHK-CONTRACT THRU 106A-EXIT.; ; IF ENTC-ENRL-TRNS-CD = '11' OR; ENTC-ENRL-TRNS-CD = '12' OR; ENTC-ENRL-TRNS-CD = '50' OR; ENTC-ENRL-TRNS-CD = '60'; PERFORM VARYING WS-CTR FROM 1 BY 1 UNTIL; WS-CTR > ENTM-COUNT; MOVE ENTM-MEMBER-ID (WS-CTR) TO; MEMBER-ID   OF DCLMEMBER; PERFORM 106B-CHK-MEMBER  THRU 106B-EXIT; IF ENTM-ACTION-CD (WS-CTR) = 'X' AND; MEMBER-NOT-FOUND; MOVE 'A' TO ENTM-ACTION-CD (WS-CTR); END-IF; END-PERFORM; PERFORM VARYING WS-CTR FROM 1 BY 1 UNTIL; WS-CTR > ENTA-COUNT; IF ENTA-ACTION-CD (WS-CTR) = 'X' AND; ENTA-ADDRESS-TYPE-CD (WS-CTR) = 'C'; MOVE 'A' TO ENTA-ACTION-CD (WS-CTR); END-IF; END-PERFORM; END-IF.; ; 0106-EXIT.; EXIT.; ; 106A-CHK-CONTRACT.; ; INITIALIZE DCLCONTRACT-ENRL.; MOVE ENTB-CONTRACT-ID-UD(2:8); TO CONTRACT-ID OF DCLCONTRACT-ENRL.; MOVE ENTB-CONTRACT-ID-UD(8:1); TO PARTITION  OF DCLCONTRACT-ENRL.; ; EXEC SQL; SELECT CONTRACT_ID; INTO  :DCLCONTRACT-ENRL.CONTRACT-ID; FROM  CONTRACT_ENRL; WHERE PARTITION =; :DCLCONTRACT-ENRL.PARTITION AND; CONTRACT_ID =; :DCLCONTRACT-ENRL.CONTRACT-ID; END-EXEC.; ; EVALUATE SQLCODE; WHEN 0; SET CONTRACT-FOUND TO TRUE; WHEN OTHER; SET CONTRACT-NOT-FOUND TO TRUE; END-EVALUATE.; ; 106A-EXIT.; EXIT.; ; 106B-CHK-MEMBER.; ; EXEC SQL; SELECT MEMBER_ID; INTO  :DCLMEMBER.MEMBER-ID; FROM  MEMBER; WHERE MEMBER_ID  =; :DCLMEMBER.MEMBER-ID; END-EXEC.; ; EVALUATE SQLCODE; WHEN 0; SET MEMBER-FOUND TO TRUE; WHEN OTHER; SET MEMBER-NOT-FOUND TO TRUE; END-EVALUATE.; ; 106B-EXIT.; EXIT.; ; 0111-SET-OPTION.; ; EVALUATE ENTB-TRNS-ID; WHEN 'FECT'; MOVE '0'  TO OTR-OPTIONS(1:1); BELOW IS NOT REQUIRED FOR CONTRACT ADDRESS CHANGE; IF (ENTA-ACTION-CD (1) = 'U' ); AND; ENTM-MEMBER-TYPE-CD (1) = 'C'; MOVE 'Y'  TO OTR-DET-PRC-ADDR-SW; MOVE 'U'  TO OTR-MBR-ADDR-ACT-CDE (1); MOVE '01' TO OTR-OPTIONS(1:2); END-IF; PERFORM VARYING WS-CTR FROM 1 BY 1 UNTIL; WS-CTR > ENTM-COUNT; IF ENTB-TRNS-ID = 'FECT'  AND; ((ENTM-ACTION-CD (WS-CTR) = 'A' OR; ENTM-ACTION-CD (WS-CTR) = 'U' OR; ENTM-ACTION-CD (WS-CTR) = 'D') OR; (ENTA-ACTION-CD (WS-CTR) = 'A' OR; ENTA-ACTION-CD (WS-CTR) = 'U' OR; ENTA-ACTION-CD (WS-CTR) = 'D')); MOVE '02' TO OTR-OPTIONS(1:3); END-IF; IF ENTM-OTHER-COVERAGE-IND(WS-CTR) = 'Y'; MOVE 'Y' TO OTR-DET-OTH-COV-SW; IF ENTM-OTHER-COVERAGE-IND(WS-CTR) > SPACES; MOVE ENTM-OTHER-COVERAGE-IND(WS-CTR) TO; OTR-DET-OTH-COV-SW; END-IF; END-PERFORM; WHEN 'FCMB'; MOVE '1'  TO OTR-OPTIONS(1:1); PERFORM VARYING WS-CTR FROM 1 BY 1 UNTIL; WS-CTR > ENTM-COUNT; IF (ENTB-TRNS-ID = 'FECT'  OR; ENTB-TRNS-ID = 'FCMB')  AND; IF (ENTM-ACTION-CD (WS-CTR) = 'U' OR; ENTM-ACTION-CD (WS-CTR) = 'A' OR; ENTM-ACTION-CD (WS-CTR) = 'D') AND; ENTM-MEMBER-TYPE-CD (WS-CTR) = 'D'; MOVE '12' TO OTR-OPTIONS(1:2); END-IF; IF ENTM-OTHER-COVERAGE-IND(WS-CTR) = 'Y'; MOVE 'Y' TO OTR-DET-OTH-COV-SW; IF ENTM-OTHER-COVERAGE-IND(WS-CTR) > SPACES; MOVE ENTM-OTHER-COVERAGE-IND(WS-CTR) TO; OTR-DET-OTH-COV-SW; END-IF; END-PERFORM; WHEN 'FEMB'; WHEN 'FSEE'; WHEN 'FEAI'; MOVE '2'  TO OTR-OPTIONS(1:1); END-EVALUATE.; ; 0111-EXIT.; EXIT.; ; 0112-MOVE-MEMBER.; INITIALIZE OTR-MBR(WS-CTR).; MOVE ENTM-MEMBER-ID(WS-CTR) TO OTR-MBR-MBR-ID(WS-CTR).; MOVE ENTM-LAST-NM(WS-CTR)  TO OTR-MBR-L-NAME(WS-CTR).; MOVE ENTM-FIRST-NM(WS-CTR)  TO OTR-MBR-F-NAME(WS-CTR).; MOVE ENTM-MIDDLE-INITIAL-NM(WS-CTR); TO OTR-MBR-MID(WS-CTR).; MOVE ENTM-NICKNAME-NM(WS-CTR); TO OTR-MBR-NICK-NAME(WS-CTR).; MOVE ENTM-PREVIOUS-NM-IND(WS-CTR); TO OTR-MBR-PRV-NAME-SW(WS-CTR); OTR-MBR-SPELL-CHG-SW(WS-CTR); IF  ENTM-PREVIOUS-NM-IND(WS-CTR) = 'Y'; MOVE 'Y' TO OTR-MBR-PRV-NAME-SW(WS-CTR); MOVE 'N' TO OTR-MBR-SPELL-CHG-SW(WS-CTR); END-IF.; IF  ENTM-SPELL-CHANGE-IND(WS-CTR) = 'Y'; MOVE 'N' TO OTR-MBR-PRV-NAME-SW(WS-CTR); MOVE 'Y' TO OTR-MBR-SPELL-CHG-SW(WS-CTR); END-IF.; MOVE ENTM-BIRTH-DT-UD(WS-CTR); TO OTR-MBR-DOB(WS-CTR).; MOVE ENTM-MEMBER-SSN-UD(WS-CTR); TO OTR-MBR-SSN(WS-CTR).; MOVE ENTM-CSA-CSF-ID(WS-CTR) TO OTR-MBR-CSA-CSF-ID(WS-CTR).; MOVE ENTM-MEMBER-ITIN-UD(WS-CTR); TO OTR-MBR-ITIN(WS-CTR).; MOVE ENTM-GENDER-CD(WS-CTR) TO OTR-MBR-SEX(WS-CTR).; MOVE ENTM-RELATIONSHIP-CD (WS-CTR); TO OTR-MBR-REL(WS-CTR).; MOVE ENTM-CHG-CNTR-HLDR-IND(WS-CTR); TO OTR-MBR-CTR-HLDR-SW(WS-CTR).; MOVE ENTM-TWIN-IND(WS-CTR)  TO OTR-MBR-TWIN-SW(WS-CTR).; MOVE ENTM-INCOMPLETE-DOB(WS-CTR); TO OTR-MBR-INC-SW(WS-CTR).; MOVE ENTM-ELIG-EXCP-TYPE-CD(WS-CTR); TO OTR-MBR-ELIG-EXCEPTION(WS-CTR); MOVE ENTM-ELIG-EXCP-EVTDT-UD(WS-CTR); TO OTR-MBR-EVENT-DTE(WS-CTR).; PERFORM 0115-MOVE-CORRECT-ADDRESS; THRU 0115-MOVE-CORRECT-ADDRESS-EXIT; VARYING SUB1 FROM WS-CTR BY 1; UNTIL SUB1 > ENTA-COUNT.; IF  ENTM-ACTION-CD(WS-CTR) = 'X'; MOVE ' '        TO OTR-MBR-ACT-CDE(WS-CTR); ELSE; MOVE ENTM-ACTION-CD(WS-CTR) TO OTR-MBR-ACT-CDE(WS-CTR); END-IF.; IF (ENTM-ACTION-CD(WS-CTR) = 'U' OR; ENTM-ACTION-CD(WS-CTR) = 'X') AND WS-CTR > 1; AND ENTM-MBR-ACTIVATE-IND(WS-CTR) = 'Y'; MOVE 'A'        TO OTR-MBR-ACT-CDE(WS-CTR); END-IF.; IF (ENTM-ELIG-EXCP-TYPE-CD(WS-CTR) > SPACES AND; ENTM-ACTION-CD    (WS-CTR) = 'A' OR 'U'); MOVE 'A'     TO OTR-MBR-EXCP-UPD-SW(WS-CTR); ELSE; MOVE ' '     TO OTR-MBR-EXCP-UPD-SW(WS-CTR); END-IF.; MOVE ENTM-BIRTH-SEQUENCE-UD(WS-CTR); TO OTR-MBR-BIR-SEQ(WS-CTR).; MOVE ENTM-OTHER-COVERAGE-IND(WS-CTR); TO OTR-MBR-OTR-INS-SW(WS-CTR).; MOVE ENTM-CHG-CNTR-HLDR-IND(WS-CTR); TO OTR-MBR-CHG-CH-SW(WS-CTR).; MOVE ENTM-MBR-ACTIVATE-IND(WS-CTR); TO OTR-MBR-ACTIVATION-SW(WS-CTR); MOVE ENTM-MEMBER-TYPE-CD(WS-CTR); TO OTR-MBR-TYPE-CDE(WS-CTR).; IF ENTM-MEMBER-TYPE-CD(WS-CTR) = 'C'; MOVE 'Y'        TO OTR-MBR-CTR-HLDR-SW(WS-CTR); ELSE; MOVE 'N'        TO OTR-MBR-CTR-HLDR-SW(WS-CTR); END-IF.; IF ENTC-NEW-EMP-STATUS-CD = '3'; MOVE ENTC-NEW-EMP-STATUS-CD TO OTR-MBR-ELIG-STA(WS-CTR); END-IF.; ADD +1            TO WS-CTR.; ; 0112-EXIT.; EXIT.; ; 0113-GET-PAYROLL-OFFICE.; INITIALIZE DCLPAYROLL-OFFICE.; MOVE ENTC-NEW-AGENCY-OFC-UD TO WS-HOLD-PAYROLL-OFC.; MOVE WS-HOLD-PAYROLL-OFC  TO AGENCY-OFFICE-ID OF; DCLPAYROLL-OFFICE.; EXEC SQL; SELECT PO_TYPE; ,EFFECTIVE_DATE; ,TERM_DATE; ,LAST_PROC_DATE; INTO :PO-TYPE; ,:DCLPAYROLL-OFFICE.EFFECTIVE-DATE; ,:TERM-DATE:PARM-DATE1-NN; ,:DCLPAYROLL-OFFICE.LAST-PROC-DATE; FROM PAYROLL_OFFICE; WHERE; AGENCY_OFFICE_ID = :DCLPAYROLL-OFFICE.AGENCY-OFFICE-ID; END-EXEC.; EVALUATE SQLCODE; WHEN ZERO-RETURN; MOVE PO-TYPE   TO OTR-DET-PAY-OFC-TYP; MOVE LAST-PROC-DATE OF DCLPAYROLL-OFFICE; TO OTR-DET-PAY-OFC-PRC-DTE; MOVE EFFECTIVE-DATE OF DCLPAYROLL-OFFICE; TO OTR-DET-PAY-OFC-EFF-DTE; IF PARM-DATE1-NN = -1; MOVE SPACES     TO OTR-DET-PAY-OFC-TRM-DTE; ELSE; MOVE TERM-DATE   TO OTR-DET-PAY-OFC-TRM-DTE; END-IF; WHEN NOT-FOUND; IF WS-IGNORE-NOT-FND-SW = 'Y'; CONTINUE; ELSE; MOVE  01301 TO SWS-ABT-ACCESS-POINT; PERFORM 9900-ERROR-RTN THRU; 9900-ERROR-RTN-EXIT; END-IF; WHEN OTHER; MOVE  01302 TO SWS-ABT-ACCESS-POINT; PERFORM 9900-ERROR-RTN THRU; 9900-ERROR-RTN-EXIT; END-EVALUATE.; ; ; 0113-EXIT.; EXIT.; ; 0114-SURVIVOR-ANNUITANT-LOOP.; ; MOVE '02'          TO OTR-OPTIONS.; MOVE 'N'           TO OTR-DET-MEDICARE-SW.; MOVE 'N'           TO OTR-DET-TRN-IN-SW.; IF ENTC-CRNT-AGENCY-OFC-UD NOT =; ENTC-NEW-AGENCY-OFC-UD; MOVE '20'        TO OTR-DET-TRN-CDE; MOVE 'Y'         TO OTR-DET-TRN-IN-SW; END-IF.; IF OTR-DET-NEW-ENR-CDE > SPACES AND             00; OTR-DET-NEW-ENR-CDE NOT = OTR-DET-CUR-ENR-CDE       00100100; MOVE '30'          TO OTR-DET-TRN-CDE      00100200; END-IF.                           00100300; MOVE 'Y'           TO OTR-DET-CHG-ENRL-SW.     00100400; MOVE 'N'           TO OTR-DET-NOT-ENROLLED-SW.   00100500; MOVE 'N'           TO OTR-DET-NOT-BCBS-PLAN-SW.  00100600; MOVE 'N'           TO OTR-DET-SIGNATURE-SW.    00100700; MOVE 'N'           TO OTR-DET-CONTRACT-ID-ASGN-SW. 00100800; MOVE 'N'           TO OTR-DET-MBR-ID-ASGN-SW.   00100900; MOVE 'Y'           TO OTR-DET-CHG-CTR-SW.     0010; MOVE 'N'           TO OTR-DET-OTH-COV-SW.     00101100; MOVE 'N'           TO OTR-DET-PRC-ADDR-SW.     00101200; MOVE OTR-MBR-MBR-ID(1)    TO OTR-CH-MBR-ID.        00101300; MOVE OTR-MBR-L-NAME(1)    TO OTR-CH-L-NAME.        00101400; MOVE OTR-MBR-F-NAME(1)    TO OTR-CH-F-NAME.        00101500; MOVE OTR-MBR-MID(1)     TO OTR-CH-MID.         00101600; MOVE OTR-MBR-NICK-NAME(1)  TO OTR-CH-NICK-NAME.      00101700; MOVE OTR-MBR-PRV-NAME-SW(1) TO OTR-CH-PRV-NAME-SW.     00101800; MOVE OTR-MBR-DOB(1)     TO OTR-CH-DOB.         00101900; MOVE OTR-MBR-SSN(1)     TO OTR-CH-SSN.         0010; MOVE OTR-MBR-CSA-CSF-ID(1)  TO OTR-CH-CSA-CSF-ID .     00102100; MOVE OTR-MBR-ITIN(1)     TO OTR-CH-ITIN.         00102200; MOVE OTR-MBR-SEX(1)     TO OTR-CH-SEX.         00102300; MOVE OTR-MBR-REL(1)     TO OTR-CH-REL.         00102400; MOVE OTR-MBR-STREET1(1)   TO OTR-CH-STREET1.       00102500; MOVE OTR-MBR-STREET2(1)   TO OTR-CH-STREET2.       00102600; MOVE OTR-MBR-CITY(1)     TO OTR-CH-CITY.         00102700; MOVE OTR-MBR-STATE(1)    TO OTR-CH-STATE.        00102800; MOVE OTR-MBR-ZIP(1)     TO OTR-CH-ZIP.         00102900; MOVE OTR-MBR-CNTRY-CD(1)   TO OTR-CH-CNTRY-CD.       0010; MOVE OTR-MBR-CNTRY-NAME(1)  TO OTR-CH-CNTRY-NAME.      00103100; MOVE 'C'           TO OTR-CH-ADDR-TYPE.      00103200; IF OTR-MBR-WORK-PHONE(1)  > SPACES OR LOW-VALUES      00103300; MOVE OTR-MBR-WORK-PHONE(1)  TO OTR-CH-WORK-PHONE    00103400; ELSE                             00103500; MOVE ZEROES         TO OTR-CH-WORK-PHONE    00103600; END-IF.                           00103700; IF OTR-MBR-HOME-PHONE(1)  > SPACES OR LOW-VALUES      00103800; MOVE OTR-MBR-HOME-PHONE(1)  TO OTR-CH-HOME-PHONE    00103900; ELSE                             0010; MOVE ZEROES         TO OTR-CH-HOME-PHONE    00104100; END-IF.                           00104200; IF OTR-MBR-MOBILE-PHONE(1)  > SPACES OR LOW-VALUES     00104300; MOVE OTR-MBR-MOBILE-PHONE(1) TO OTR-CH-MOBILE-PHONE   00104400; ELSE                             00104500; MOVE ZEROES         TO OTR-CH-MOBILE-PHONE   00104600; END-IF.                           00104700; IF OTR-MBR-PREF-PHONE(1)  > SPACES OR LOW-VALUES      00104800; MOVE OTR-MBR-PREF-PHONE(1)  TO OTR-CH-PREF-PHONE    00104900; ELSE                             0010; MOVE ZEROES         TO OTR-CH-PREF-PHONE    00105100; END-IF.                           00105200; IF OTR-MBR-EMAIL   (1)  > SPACES OR LOW-VALUES      00105300; MOVE OTR-MBR-EMAIL(1)    TO OTR-CH-EMAIL       00105400; ELSE                             00105500; MOVE SPACES         TO OTR-CH-EMAIL       00105600; END-IF.                           00105700; PERFORM VARYING SUB1 FROM 1 BY 1 UNTIL SUB1 > OTR-MBR-CNT  00105800; IF OTR-MBR-CHG-CH-SW (SUB1) = 'Y'             00105900; MOVE OTR-CH-STREET1    TO OTR-MBR-STREET1(SUB1)   0010; MOVE OTR-CH-STREET2    TO OTR-MBR-STREET2(SUB1)   00106100; MOVE OTR-CH-CITY      TO OTR-MBR-CITY(SUB1)    00106200; MOVE OTR-CH-STATE     TO OTR-MBR-STATE(SUB1)    00106300; MOVE OTR-CH-ZIP      TO OTR-MBR-ZIP(SUB1)     00106400; MOVE OTR-CH-CNTRY-CD    TO OTR-MBR-CNTRY-CD(SUB1)  00106500; MOVE OTR-CH-CNTRY-NAME   TO OTR-MBR-CNTRY-NAME(SUB1) 00106600; MOVE 'C'          TO OTR-CH-ADDR-TYPE     00106700; MOVE OTR-CH-WORK-PHONE   TO OTR-MBR-WORK-PHONE(SUB1) 00106800; MOVE OTR-CH-HOME-PHONE   TO OTR-MBR-HOME-PHONE(SUB1) 00106900; MOVE OTR-CH-PREF-PHONE   TO OTR-MBR-PREF-PHONE(SUB1) 0010; MOVE OTR-CH-MOBILE-PHONE  TO OTR-MBR-MOBILE-PHONE(SUB1)00107100; MOVE OTR-CH-EMAIL     TO OTR-MBR-EMAIL(SUB1)    00107200; MOVE OTR-MBR-FECI-UPD-SW(1)               00107300; TO OTR-MBR-FECI-UPD-SW(SUB1)             00107400; MOVE 'N'                        00107500; TO OTR-MBR-ADDR-ACT-CDE(SUB1)             00107600; END-IF                           00107700; END-PERFORM.                         00107800; INITIALIZE OTR-MBR-STREET1(1)                00107900; OTR-MBR-STREET2(1)                0010; OTR-MBR-CITY(1)                  00108100; OTR-MBR-STATE(1)                 00108200; OTR-MBR-ZIP(1)                  00108300; OTR-MBR-CNTRY-CD(1)                00108400; OTR-MBR-CNTRY-NAME(1)               00108500; OTR-MBR-WORK-PHONE(1)               00108600; OTR-MBR-HOME-PHONE(1)               00108700; OTR-MBR-PREF-PHONE(1)               00108800; OTR-MBR-MOBILE-PHONE(1)              00108900; OTR-MBR-EMAIL(1).                 0010; MOVE 'N' TO OTR-MBR-FECI-UPD-SW(1).             00109100; MOVE 'N' TO OTR-MBR-ADDR-ACT-CDE(1).             00109200; 00109300; 0114-EXIT.                            00109400; EXIT.                            00109500; 00109600; 0115-MOVE-CORRECT-ADDRESS.                    00109700; IF (ENTM-TRN-DETAIL-SEQ-NBR(WS-CTR) NOT =          00109800; ENTA-TRN-DETAIL-SEQ-NBR(SUB1)              00109900; AND                    001; ENTM-MEMBER-ID(WS-CTR) NOT =               00110100; ENTA-MEMBER-ID(SUB1) )                 00110200; GO TO 0115-MOVE-CORRECT-ADDRESS-EXIT           00110300; END-IF.                           00110400; MOVE ENTA-STREET1-TXT(SUB1)                 00110500; TO OTR-MBR-STREET1(WS-CTR).   00110600; MOVE ENTA-STREET2-TXT(SUB1)                 00110700; TO OTR-MBR-STREET2(WS-CTR).   00110800; MOVE ENTA-CITY-NM(SUB1)   TO OTR-MBR-CITY(WS-CTR).    00110900; MOVE ENTA-STATE-CD(SUB1)   TO OTR-MBR-STATE(WS-CTR).    0011; MOVE ENTA-ZIP-CD(SUB1)    TO OTR-MBR-ZIP(WS-CTR).     00111100; MOVE ENTA-COUNTRY-CD-UD(SUB1)                00111200; TO OTR-MBR-CNTRY-CD(WS-CTR).  00111300; IF  ENTA-COUNTRY-CD-UD(SUB1) > 0              00111400; INITIALIZE DCLCOUNTRY-REFERENCE             00111500; MOVE ENTA-COUNTRY-CD-UD(SUB1)              00111600; TO NUMERIC-CODE                    00111700; EXEC SQL                        00111800; SELECT NAME                     00111900; INTO :DCLCOUNTRY-REFERENCE.NAME          0011; FROM COUNTRY_REFERENCE               00112100; WHERE NUMERIC_CODE =                00112200; :NUMERIC-CODE              00112300; END-EXEC                         00112400; IF SQLCODE   = +0                  00112500; MOVE NAME OF DCLCOUNTRY-REFERENCE         00112600; TO OTR-MBR-CNTRY-NAME(WS-CTR)            00112700; ELSE                           00112800; MOVE 'UNKNOWN'                   00112900; TO OTR-MBR-CNTRY-NAME(WS-CTR)            0011; END-IF                          00113100; END-IF.                           00113200; 00113300; MOVE ENTA-WORK-PHONE-NBR(SUB1)                00113400; TO OTR-MBR-WORK-PHONE(WS-CTR). 00113500; MOVE ENTA-HOME-PHONE-NBR(SUB1)                00113600; TO OTR-MBR-HOME-PHONE(WS-CTR). 00113700; MOVE ENTA-CELL-PHONE-NBR(SUB1)                00113800; TO OTR-MBR-MOBILE-PHONE(WS-CTR).00113900; MOVE ENTA-PREFER-PHONE-NBR(SUB1)               0011; TO OTR-MBR-PREF-PHONE(WS-CTR). 00114100; MOVE ENTA-EMAIL-ADDRESS-TXT(SUB1)              00114200; TO OTR-MBR-EMAIL(WS-CTR).    00114300; PERFORM 0116-DETERMINE-FECI                 00114400; THRU 0116-DETERMINE-FECI-EXIT               00114500; IF ENTA-ACTION-CD(SUB1) ='A' OR 'U' OR 'D'         00114600; INITIALIZE DCLADDRESS                  00114700; MOVE ENTA-ADDRESS-TYPE-CD(SUB1)             00114800; TO ADDRESS-TYPE OF DCLADDRESS             00114900; IF ADDRESS-TYPE = 'C'                  0011; MOVE ZEROS                      00115100; TO WS-MEMBER-ID                  00115200; MEMBER-ID OF DCLADDRESS             00115300; MOVE ENTB-CONTRACT-ID-UD(2:8)             00115400; TO CONTRACT-ID OF DCLADDRESS            00115500; MOVE ENTB-CONTRACT-ID-UD(8:1)             00115600; TO PARTITION OF DCLADDRESS              00115700; ELSE                           00115800; MOVE ZEROS TO CONTRACT-ID OF DCLADDRESS        00115900; MOVE ENTA-MEMBER-ID(SUB1)               0011; TO WS-MEMBER-ID                  00116100; MEMBER-ID OF DCLADDRESS             00116200; MOVE WS-MEMBER-PART                  00116300; TO PARTITION OF DCLADDRESS              00116400; END-IF                          00116500; MOVE 0 TO ADDRESS-MATCH-SW                00116600; PERFORM 0119-CHECK-DUP-ADDR               00116700; THRU 0119-CHECK-DUP-ADDR-EXIT             00116800; IF ADDRESS-MATCH                     00116900; MOVE ' '   TO ENTA-ACTION-CD(WS-CTR)        0011; ELSE                           00117100; MOVE 'Y'   TO OTR-DET-PRC-ADDR-SW         00117200; MOVE ENTA-ACTION-CD(SUB1)               00117300; TO OTR-MBR-ADDR-ACT-CDE(WS-CTR)           00117400; END-IF                          00117500; END-IF.                           00117600; 0115-MOVE-CORRECT-ADDRESS-EXIT.                 00117700; EXIT.                            00117800; 00117900; 0116-DETERMINE-FECI.                       0011; IF ENTB-FORM-TYPE-CD = '2810' OR 'OCCO'           00118100; MOVE 'N' TO OTR-MBR-FECI-UPD-SW(WS-CTR)         00118200; GO TO 0116-DETERMINE-FECI-EXIT              00118300; END-IF.                           00118400; 00118500; ** PREVENT FECI CREATION IN STRAIGHT REJECTIONS         00118600; IF ENTA-MEMBER-ID(SUB1) = 0                 00118700; MOVE 'N' TO OTR-MBR-FECI-UPD-SW(WS-CTR)         00118800; GO TO 0116-DETERMINE-FECI-EXIT              00118900; END-IF.                           0011; 00119100; INITIALIZE DCLMBR-CONTACT-NUMBER              00119200; DB-PREF-PHONE-CONTACT-INFO            00119300; DB-EMAIL-ADDR-CONTACT-INFO.           00119400; MOVE +0 TO CONTRACT-ID OF DCLMBR-CONTACT-NUMBER       00119500; MOVE 'N' TO CONTACT-TYPE-CD OF DCLMBR-CONTACT-NUMBER    00119600; MOVE ENTA-MEMBER-ID(SUB1)  TO WS-MEMBER-ID         00119700; MEMBER-ID OF DCLMBR-CONTACT-NUMBER         00119800; MOVE WS-MEMBER-PART                    00119900; TO PARTITION OF DCLMBR-CONTACT-NUMBER         001; PERFORM 0117-RUN-MBR-CTCT-QUERY               00120100; THRU 0117-RUN-MBR-CTCT-QUERY-EXIT.            00120200; MOVE 'E' TO CONTACT-TYPE-CD OF DCLMBR-CONTACT-NUMBER    00120300; PERFORM 0117-RUN-MBR-CTCT-QUERY               00120400; THRU 0117-RUN-MBR-CTCT-QUERY-EXIT.            00120500; IF DB-PREF-PHONE-CONTACT-INFO NOT =             00120600; ENTA-PREFER-PHONE-NBR(SUB1)               00120700; MOVE 'Y'        TO OTR-MBR-FECI-UPD-SW(WS-CTR) 00120800; END-IF.                           00120900; IF DB-EMAIL-ADDR-CONTACT-INFO NOT =             0012; ENTA-EMAIL-ADDRESS-TXT(SUB1)               00121100; MOVE 'Y'        TO OTR-MBR-FECI-UPD-SW(WS-CTR) 00121200; END-IF.                           00121300; 0116-DETERMINE-FECI-EXIT.                    00121400; EXIT.                            00121500; 0117-RUN-MBR-CTCT-QUERY.                     00121600; EXEC SQL                          00121700; SELECT A.PARTITION, A.CONTRACT_ID, A.MEMBER_ID,     00121800; A.CONTACT_TYPE_CD, A.EFFECTIVE_DT,        00121900; A.TERM_DT, A.VALID_CONTACT_IND,          0012; A.CONTACT_SOURCE_CD, A.LAST_PROC_DT,       00122100; A.CONTACT_NBR                   00122200; INTO :DCLMBR-CONTACT-NUMBER.PARTITION,          00122300; :DCLMBR-CONTACT-NUMBER.CONTRACT-ID,         00122400; :DCLMBR-CONTACT-NUMBER.MEMBER-ID,          00122500; :DCLMBR-CONTACT-NUMBER.CONTACT-TYPE-CD,       00122600; :DCLMBR-CONTACT-NUMBER.EFFECTIVE-DT,        00122700; :DCLMBR-CONTACT-NUMBER.TERM-DT,           00122800; :DCLMBR-CONTACT-NUMBER.VALID-CONTACT-IND,      00122900; :DCLMBR-CONTACT-NUMBER.CONTACT-SOURCE-CD,      0012; :DCLMBR-CONTACT-NUMBER.LAST-PROC-DT,        00123100; :DCLMBR-CONTACT-NUMBER.CONTACT-NBR         00123200; FROM MBR_CONTACT_NUMBER A                00123300; WHERE A.PARTITION =                   00123400; :DCLMBR-CONTACT-NUMBER.PARTITION        00123500; AND A.MEMBER_ID =                   00123600; :DCLMBR-CONTACT-NUMBER.MEMBER-ID        00123700; AND A.CONTRACT_ID =                  00123800; :DCLMBR-CONTACT-NUMBER.CONTRACT-ID       00123900; AND A.CONTACT_TYPE_CD = :CONTACT-TYPE-CD       0012; AND A.TERM_DT = (SELECT MAX(B.TERM_DT)        00124100; FROM MBR_CONTACT_NUMBER B             00124200; WHERE B.PARTITION =                  00124300; :DCLMBR-CONTACT-NUMBER.PARTITION          00124400; AND B.MEMBER_ID =                   00124500; :DCLMBR-CONTACT-NUMBER.MEMBER-ID          00124600; AND B.CONTRACT_ID =                  00124700; :DCLMBR-CONTACT-NUMBER.CONTRACT-ID         00124800; AND B.CONTACT_TYPE_CD = :CONTACT-TYPE-CD       00124900; AND B.TERM_DT > CURRENT_DATE )            0012; END-EXEC                            00125100; 00125200; EVALUATE SQLCODE                     00125300; WHEN ZERO-RETURN                   00125400; IF CONTACT-TYPE-CD = 'N'            00125500; SET PREF-PHONE-CONTACT-FOUND TO TRUE    00125600; MOVE CONTACT-NBR-TEXT            00125700; TO DB-PREF-PHONE-CONTACT-INFO       00125800; ELSE                      00125900; SET EMAIL-ADDR-CONTACT-FOUND TO TRUE    0012; MOVE CONTACT-NBR-TEXT            00126100; TO DB-EMAIL-ADDR-CONTACT-INFO       00126200; END-IF                     00126300; WHEN NOT-FOUND                    00126400; IF WS-IGNORE-NOT-FND-SW = 'Y'         00126500; IF CONTACT-TYPE-CD = 'N'          00126600; SET PREF-PHONE-CONTACT-NOT-FOUND TO TRUE 00126700; ELSE                    00126800; SET EMAIL-ADDR-CONTACT-NOT-FOUND TO TRUE 00126900; END-IF                   0012; CONTINUE                  00127100; ELSE                      00127200; MOVE  01701 TO SWS-ABT-ACCESS-POINT   00127300; PERFORM 9900-ERROR-RTN THRU         00127400; 9900-ERROR-RTN-EXIT         00127500; END-IF                     00127600; WHEN OTHER                     00127700; MOVE  01702 TO SWS-ABT-ACCESS-POINT     00127800; PERFORM 9900-ERROR-RTN THRU          00127900; 9900-ERROR-RTN-EXIT          0012; END-EVALUATE.                      00128100; 0117-RUN-MBR-CTCT-QUERY-EXIT.                  00128200; EXIT.                            00128300; 0119-CHECK-DUP-ADDR.                       00128400; 00128900; EXEC SQL                           0012; SELECT                          00129100; STATE,                      00129200; ZIP_CODE,                     00129300; COUNTRY_CD,                    00129400; CITY,                       00129500; STREET1,                     00129600; STREET2,                     00129700; BAD_ADDR_IND,                   00129800; TELEPHONE,                    00129900; STANDARDIZE_IND                  001; INTO  :DCLADDRESS.STATE,                00130100; :DCLADDRESS.ZIP-CODE,               00130200; :DCLADDRESS.COUNTRY-CD,              00130300; :DCLADDRESS.CITY,                 00130400; :DCLADDRESS.STREET1,               00130500; :DCLADDRESS.STREET2,               00130600; :DCLADDRESS.BAD-ADDR-IND,             00130700; :DCLADDRESS.TELEPHONE,              00130800; :DCLADDRESS.STANDARDIZE-IND            00130900; FROM  ADDRESS                      0013; WHERE  ADDRESS_TYPE = :DCLADDRESS.ADDRESS-TYPE AND   00131100; CONTRACT_ID = :DCLADDRESS.CONTRACT-ID  AND   00131200; MEMBER_ID  = :DCLADDRESS.MEMBER-ID   AND   00131300; "PARTITION" = :DCLADDRESS.PARTITION       00131400; END-EXEC                           00131500; 00131600; EVALUATE SQLCODE                       00131700; 00131800; WHEN ZERO-RETURN                     00131900; MOVE ZIP-CODE OF DCLADDRESS TO WF-ZIP-CODE      0013; IF (STREET1-TEXT OF DCLADDRESS = ENTA-STREET1-TXT(SUB1) 00132100; AND                 00132200; STREET2-TEXT OF DCLADDRESS = ENTA-STREET2-TXT(SUB1) 00132300; AND                 00132400; CITY-TEXT  OF DCLADDRESS = ENTA-CITY-NM(SUB1) AND 00132500; STATE    OF DCLADDRESS = ENTA-STATE-CD(SUB1)) AND00132600; (                          00132700; (ZIP-CODE  OF DCLADDRESS = ENTA-ZIP-CD(SUB1))   00132800; OR                         00132900; ( (WF-ZIP-CODE-5  = ENTA-ZIP-CD(SUB1)(1:5)) AND    0013; (ENTA-ZIP-CD(SUB1)(6:4)  =SPACES OR LOW-VALUES) AND    00133100; (WF-ZIP-CODE-4  = SPACES OR LOW-VALUES)  )   00133200; )                        00133300; MOVE 1 TO ADDRESS-MATCH-SW             00133400; END-IF                        00133500; WHEN NOT-FOUND                      00133600; IF ENTA-STREET1-TXT(SUB1) > SPACES AND        00133700; ENTA-CITY-NM(SUB1)   > SPACES AND        00133800; ENTA-STATE-CD(SUB1)  > SPACES AND        00133900; ENTA-ZIP-CD(SUB1)   > SPACES          0013; MOVE 0 TO ADDRESS-MATCH-SW            00134100; ELSE                         00134200; MOVE 1 TO ADDRESS-MATCH-SW            00134300; END-IF                        00134400; 00134500; WHEN OTHER                        00134600; MOVE  01901 TO SWS-ABT-ACCESS-POINT   00134700; PERFORM 9900-ERROR-RTN THRU         00134800; 9900-ERROR-RTN-EXIT         00134900; 0013; END-EVALUATE.                        00135100; 00135200; 0119-CHECK-DUP-ADDR-EXIT.                    00135300; EXIT.                            00135400; 0110-GET-PROCESS-DATE.                      00135900; MOVE  'FEBDPBM0'      TO PROCESS-NAME.         0013; PERFORM 0120-GET-PROC-RUN-PARMS THRU             00136100; 0120-GET-PROC-RUN-PARMS-EXIT.            00136200; 00136300; IF PARM-DATE1-NN = -1                    00136700; MOVE  01101     TO SWS-ABT-ACCESS-POINT      00136800; MOVE  -2       TO SWS-ABT-RETURN-CODE      00136900; PERFORM 9900-ERROR-RTN THRU               0013; 9900-ERROR-RTN-EXIT               00137100; ELSE                             00137200; MOVE PARM-DATE1       TO WS-BD-RUN-DATE      00137300; END-IF.                           00137400; 00137500; 0110-GET-PROCESS-DATE-EXIT.                   00137600; EXIT.                            00137700; 0120-GET-PROC-RUN-PARMS.                     00138100; EXEC SQL  00138200; SELECT PARM_DATE1                      00138300; ,PARM_COMMIT_NBR                   00138400; ,PARM_NUMERIC1                    00138500; ,PARM_ALPHA1                     00138600; ,PARM_TIME                      00138700; INTO :PARM-DATE1:PARM-DATE1-NN               00138800; ,:PARM-COMMIT-NBR                   00138900; ,:PARM-NUMERIC1                    0013; ,:PARM-ALPHA1                     00139100; ,:PARM-TIME                      00139200; FROM PROCESS_RUN_PARMS                  00139300; WHERE PROCESS_NAME = :PROCESS-NAME             00139400; END-EXEC.  00139500; EVALUATE SQLCODE                       00139600; WHEN ZERO-RETURN                     00139700; MOVE 'Y'     TO WS-FND-SW           00139800; WHEN NOT-FOUND                      00139900; IF WS-IGNORE-NOT-FND-SW = 'Y'            001; CONTINUE                     00140100; ELSE                        00140200; MOVE  01201 TO SWS-ABT-ACCESS-POINT      00140300; PERFORM 9900-ERROR-RTN THRU           00140400; 9900-ERROR-RTN-EXIT           00140500; END-IF                       00140600; WHEN OTHER                        00140700; MOVE  01202 TO SWS-ABT-ACCESS-POINT       00140800; PERFORM 9900-ERROR-RTN THRU             00140900; 9900-ERROR-RTN-EXIT             0014; END-EVALUATE.                        00141100; 00141200; 0120-GET-PROC-RUN-PARMS-EXIT.                  00141300; EXIT.                            00141400; EXEC SQL                           00141800; SELECT CURRENT TIMESTAMP                00141900; INTO :WS-TIME                     0014; FROM ERROR_MESSAGE                  00142100; WHERE ERROR_CODE = 0300                00142200; END-EXEC.                          00142300; 00142400; EVALUATE SQLCODE                       00142500; WHEN ZERO-RETURN CONTINUE                00142600; WHEN OTHER    MOVE  01401 TO SWS-ABT-ACCESS-POINT  00142700; PERFORM U-965-ABT-HANDLER        00142800; END-EVALUATE.                        00142900; 0014; 0140-GET-TIMESTAMP-EXIT.                     00143100; EXIT.                            00143200; COMPUTE WS-SEG-LEN = FUNCTION LENGTH(OTR-MBR(1))       00144100; COMPUTE WS-SEG-TOT = (WS-SEG-LEN; COMPUTE WS-SEG-OFF = (WS-SEG-LEN; COMPUTE WS-SEG-DIF = WS-SEG-TOT - WS-SEG-OFF        00144400; MOVE  OTR-MEMBER-DATA(WS-SEG-OFF:WS-SEG-DIF)        00144500; TO OTR-SUSPENSE-AREA.       00144600; IF OTR-SUS-CNT-X IS NUMERIC AND               00144700; OTR-SUS-TRNS-TIME (1) > SPACES              00144800; MOVE 'S'         TO OTR-COM-ACT-CDE       00144900; ****** MOVE '02'         TO OTR-OPTIONS         0014; END-IF.                           00145100; 00145200; 0150-REFORMAT-SUSP-AREA-EXIT.                  00145300; EXIT.                            00145400; COMPUTE WS-SEG-LEN = FUNCTION LENGTH(OTR-FCCT-CE-ENTRY(1))  00145800; 08)       + 2   00145900; OTR-FCCT-CE-CNT) + 3   0014; COMPUTE WS-SEG-DIF = WS-SEG-TOT - WS-SEG-OFF        00146100; MOVE  OTR-FCCT-TABLE-AREA(WS-SEG-OFF:WS-SEG-DIF)      00146200; TO WS-TEMP-AREA          00146300; MOVE  SPACES      TO OTR-FCCT-TABLE-AREA(WS-SEG-OFF:)00146400; MOVE  WS-TEMP-AREA   TO OTR-FCCT-ASGN-PAY-OFC-TABLE.  00146500; 0160-REFORMAT-FCCT-AREA-EXIT.                  00146600; EXIT.                            00146700; 0170-UPDATE-FSCV-EXIT.                      00151500; EXIT.                            00151600; ; ** GENERATE DAILY TRANSACTIONS                  00153400; *** WE ONLY WANT DAILY TRANSACTION CREATED FOR A CERTAIN     0015; *** MICROFILM INDEX NUMBER AND CREATED AT A CERTAIN TIME.    00154100; ** PROCESS THE GENERATED DAILY TRANSACTIONS.           00154800; ** PROCESSING THE DAILY TRANSACTIONS FROM THE TRANSLATOR CAN   00155400; ** CREATE ADDITIONAL DAILY TRANSACTIONS THAT NEED TO BE RUN.   00155500; 2100-PEND-RTN.                          00156800; ** IF THE TRANSLATOR-2 PROGRAM WAS SUCCESSFUL, KEEP GOING.; ** OTHERWISE, FORMAT AN ERROR MESSAGE AND GET OUT.; 2200-SUSPENSE-RTN.                        00160200; ** GENERATE DAILY TRANSACTIONS                  0016; ** PROCESS THE UPDATED DAILY TRANSACTIONS, TAKING ONLY      0016; ** ONES THAT MATCH THE TIMESTAMPS WE WERE PASSED.        00162100; ** PROCESS ANY ADDITONAL GENERATED DAILY TRANSACTIONS THAT WERE 00162700; ** CREATED IN ADDITION TO THE ONES THAT WERE UPDATED.      00162800; ** PROCESSING THE DAILY TRANSACTIONS FROM THE TRANSLATOR CAN   00163400; ** CREATE ADDITIONAL DAILY TRANSACTIONS THAT NEED TO BE RUN.   00163500; 2300-CALL-TRANSLATOR-1.                     00164800; ** IF THE TRANSLATOR-1 PROGRAM WAS SUCCESSFUL, KEEP GOING.; ** OTHERWISE, FORMAT AN ERROR MESSAGE AND GET OUT.; 2400-PROC-DLY-TRNS.                       00168100; ** COMMIT THE DAILY TRANS WRITES BEFORE PROCESSING THEM.     00168500; ** CURSOR COULD HAVE BEEN CLOSED BY A ROLLBACK.         00169900; 2410-OPEN-DT-CSR.                        00170900; 2420-LOOP-THRU-DT-CSR.                      00174600; ** COMMIT AFTER EVERY TRANSACTION IS PROCESSED.         00176300; 2430-FETCH-DT-CSR.                        00177100; 2490-CLOSE-DT-CSR.                        00180900; 2500-PROC-DLY-TRNS.                       00182200; ** COMMIT THE DAILY TRANS WRITES BEFORE PROCESSING THEM.     00182600; ** LOOP THROUGH THE TIME STAMPS RETURNED FROM FABDP0M1      00183200; 2510-LOOP-THRU-SUS-TBL.                     00184100; *** IF TRANSLATOR-1 DID NOT UPDATE THE DAILY TRANS TO WAITING,  00185400; *** IT WAS NOT FOUND, SO WE DON'T WANT TO TRY AND PROCESS IT.  00185500; 2520-SELECT-DAILY-TRANS.                     00186500, IF DAILY-TRANS-TYPE = 'FCCT'                 00248600; GO TO 3400-CALL-TRANSLATOR-2-EXIT             00248700; END-IF.                           00248800; 00248900; MOVE 'S'       TO TRANSLATOR-2-FUNCTION.        0024; MOVE 'S'       TO OTR-COM-TRN-STA           00249100; MOVE ENRL-TRAN-ID  TO ENRL-TRAN-ID-FOR-FABDP0M2      00249200; CALL TRANSLATOR-2 USING TRANSLATOR-2-FUNCTION        00249300; WS-OTR-MESSAGE            00249400; TRANSLATOR-2-SUSP-DATA        00249500; TRANSLATOR-2-RESP-DATA        00249600; ABNORMAL-TERMINATION-AREA      00249700; ON EXCEPTION                       00249800; MOVE  34001     TO SWS-ABT-ACCESS-POINT     00249900; PERFORM 9900-ERROR-RTN THRU              002; 9900-ERROR-RTN-EXIT              00250100; END-CALL.                          00250200; 00250300, MOVE SPACES        TO STW-STANDARD-PASSED-PARAMETERS.00270400; 00270500; MOVE 'FEXX'           TO STW-DT-TRANSACTION-ID.  00270600; MOVE ' '            TO STW-OPERATOR.       00270700; MOVE OTR-COM-ACT-CDE      TO STW-ACTION-CODE.     00270800; MOVE ' '            TO STW-ID.          00270900; MOVE 'R'            TO STW-LINK-STATUS.     0027; MOVE 'Q'            TO STW-MEDIUM.        00271100; MOVE OTR-COM-CONTRACT-ID(02:08) TO STW-CONTRACT-ID.     00271200; IF OTR-FUNCTION = 'PRCCONTR'                 00271300; MOVE OTR-COM-CONTRACT-ID(02:08) TO STW-CONTRACT-ID    00271400; END-IF.                           00271500; 00271600; IF OTR-FUNCTION = 'PRCFILEC'                 00271700; MOVE OTR-FCCT-CONTRACT-ID    TO STW-CONTRACT-ID    00271800; END-IF.                           00271900; MOVE 'Y'            TO DELETE-IND        0027; OF DCLDAILY-TRANSACTION.   00272100; MOVE STW-CONTRACT-ID-NUM    TO CONTRACT-ID        00272200; OF DCLDAILY-TRANSACTION.   00272300; MOVE WS-OTR-MESSAGE       TO STW-TRX-DATA-AREA     00272400; 00272500; PERFORM U-840-CREATE-FDLYTRN                 00272600; THRU U-840-CREATE-FDLYTRN-RETURN.             00272700; 00272800; EXEC SQL  00272900; UPDATE DAILY_TRANSACTION                   0027; SET TRNS_STATUS  = 'X'                 00273100; WHERE TRNS_ID    = 'FEXX'                00273200; AND CONTRACT_ID  = :DCLDAILY-TRANSACTION.CONTRACT-ID  00273300; AND TRNS_TIME   >= :WS-TIME               00273400; END-EXEC.  00273500; EVALUATE SQLCODE                       00273600; WHEN ZERO-RETURN CONTINUE                00273700; WHEN OTHER                        00273800; MOVE  99991 TO SWS-ABT-ACCESS-POINT    00273900; PERFORM 9900-ERROR-RTN THRU         0027; 9900-ERROR-RTN-EXIT         00274100; 00274200; END-EVALUATE.                        00274300; 00274400; 9999-CREATE-FEXX-RTN-EXIT.                    00274500; EXIT.                            00274600, 

FAESP4M0.CBL, PROGRAM:   FAESP4M0; 

FAESP5M0.CBL, PROGRAM:   FAESP5M0; 

FAESP9M0.CBL, PROGRAM: FAESP9M0 - RETURNS DATA & STATUS ON ENRL_TRNS; CALLED PROGRAMS: FAESP0M0 - PROCESS ENROLLMENT WEB SERVICE; TRANSACTIONS.; CALLING PROGRAMS: FX71P0ME - ERROR LOGGING UTILITY MODULE.; ; ---------------------------------------------------------------; DATABASE TABLES AND VIEWS (ACCESS):; FENTRBAS - ENRL_TRNS_BASE   (READ); FENTRCNT - ENRL_TRNS_CONTRACT (READ); FENTRMBR - ENRL_TRNS_MEMBER  (READ); FENTRADR - ENRL_TRNS_ADDRESS (READ); FENTRIDC - ENRL_TRNS_ID_CARD (READ); FENTRERR - ENRL_TRNS_ERROR  (READ); %%%TT#413803 - RELEASE 3 -2013  - START:; FENTRMDC - ENRL_TRNS_MDCRCNTR (READ); FENTROPL - ENRL_TRNS_OPL   (READ); FENTRWDC - ENRL_TRNS_WRKDIAGC (READ); FENTRWSN - ENRL_TRNS_WRKSUBNF (READ); %%%TT#413803 - RELEASE 3 -2013  -  END:; ; ---------------------------------------------------------------; COPY MEMBERS:; FWEDCNST - PROGRAM CONSTANTS; SQLCA  - SQL COMMUNICATIONS AREA STRUCTURE, 

FAESP9M1.CBL, PROGRAM:   FAESP9M1; 

FAESPCM0.CBL, FUNCTION: ENROLLMENT CICS WEB SERVICE PROVIDER DRIVER MODULE.; ; THIS IS CICS WEB SERVICE INTERFACE FOR ENROLLMENT SERVICE.; THIS MODULE WILL RECIEVE THE ENRL-TRAN-ID, INFO OF TABLES VIA; OPTIONS THAT IT NEEDS TO GET THE DATA FROM, ONLINE OR BATCH FLA; AS INPUT.; THIS MODULE DETERMINES WHICH MODULE TO INVOKE BASED ON THE TRNS; ID PRESENT IN BASE AND INVOKES APPROPRIATE BUSINESS MODULE SUCH; AS FAESP1M0 FOR IDCARD, FAESP2M0 FOR ADDRESS, FAESP0M1 FOR; MEMBER OR LIFEEVENT TRANSACTIONS.; WHEN CONTROL RETURNS TO THIS PROGRAM, THE RETURN; CODES ARE CHECKED / TRANSALATED BEFORE RETURNING TO THE; ENROLLMENT SERVICE CLIENT.; ; CALLED PROGRAMS:; FAESP9M0 --- GETTING THE DATA FROM ENRL_TRNS; FAESP1M0 --- FOR ID CARD REQUESTS; FAESP2M0 --- FOR ADDRESS PROCESSING; FAESP3M0 --- FOR MEMBER ADD/UPDATE; FAESP4M0 --- FOR MEDICARE CONTRACTOR FOR PART D, 

FAIDP0M0.CBL, PROGRAM:   FAIDP0M0 - FEP ENROLLMENT IDCARDS DRIVER.; FUNCTION: THIS MODULE IS CALLED BY THE MAIN ENROLLMENT DRIVER; FAENP0M0 THEN ROUTES ADD/UPDATE REQUESTS TO FAIDP0M, 005600   04 FAIDP0M1-MODULE     PIC X(08) VALUE 'FAIDP0M1'.

FAIDP0M1.CBL, PROGRAM:   FAIDP0M1; DETERMINE IF THE MEMBER IS ELIGIBLE TO RECEIVE; RECEIVE AN ID CARD., 

FALRP0M0.CBL, PROGRAM:   FALRP0M0 - FEP ENROLLMENT LETTERS MAIN DRIVER.; CALLED PROGRAMS: FALRP0M1 MEMBER AND ADDRESS INFO RETRIEVAL; FALRP0M2 LETTER REQUEST PROCESSING; FALRP0M3 SPECIAL LETTER REQUEST PROCESSING; FALRP0M4 PROCESS LETTER HISTORY; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --, 

FALRP0M1.CBL, PROGRAM:   FALRP0M1 - ADDRESS RETRIEVAL; FUNCTION: THE PROGRAM READS THE FOLLOWING TABLES:; ADDRESS; ADDRESS_SOURCE; COUNTY_REFERENCE; MEMBER; MEMBER_ELIGIBILITY; MBR_CONTACT_NUMBER; ; CALLED PROGRAMS: NONE; ; ERROR MESSAGES: NONE; ; DATABASE TABLES AND VIEWS (ACCESS):; FADDRESS - ADDRESS       (READ); FADDRSRC - ADDRESS_SOURCE   (READ); FMEMBER - MEMBER       (READ); FMBRELIG - MEMBER_ELIGIBILITY (READ); FCNTRYRF - COUNTRY_REFERENCE  (READ); FMBRCNTC - MBR_CONTACT_NUMBER (READ); ; COPY MEMBERS:; ; FWEDCNST - PROGRAM CONSTANTS, 3260-SELECT-CONTRT-HOLDER-INFO., 

FALRP0M2.CBL, PROGRAM:   FALRP0M2 - EDIT LETTER REQUESTS RECORDS AND INSERT TO; THE DAILY TRANSACTIONS DATABASE.; ; FUNCTION: UPDATE LETTER REQUEST ADDRESSES; ; PROCESSING NOTES:; ; CALLED PROGRAMS:; FXDTP0M0 - INSERT DAILY TRANSACTIONS; FXUEP0M0 - MAINTAIN USER ERROR WORKING STORAGE TABLE; ; DATABASE TABLES AND VIEWS (ACCESS):; FLTTRHST - LETTER HISTORY   : FETCH; FLTTRREF - LETTER REFERENCE  : FETCH; FDLYTRNS - DAILY TRANSACTION  : SELECT; ; COPY MEMBERS:; FWEDLKUE - USER ERROR WORKING STORAGE; FWEDLKDT - DAILY TRANSACTION WORKING STORAGE; FWEDTXET - COMMON EDIT WORKING STORAGE; ; PROGRAM HISTORY:; ; DATE   PROGRAMMER; CMR NO. MM/DD/YY   NAME    CHANGE DESCRIPTION; ---------------------------------------------------------------; ; 78620 01/01/06  MIKE KASE   ORIGINAL IMPLEMENTATION.; ; 94339 04/12/08  DAVID TURNER  MODIFIED FOR FRSU GREEN; SCREEN CONVERSION.; 108718 10/18/08  S VIJAYANATHAN MODIFY 2716 ERR CODE DTLS; ADD 2734 AND 2735 ERR CODES; ; 108722 01/02/09  S VIJAYANATHAN R3 - 2008 CHANGES HSAFLQ; 108723              HSAFL; ; 340923 01/14/11  R.HWANG    Added edit logic for new; FDIR337              letter - "TRMAGN".; It can be requested only; when 80 (event code not 96; OR 97) OR 90 OR 95.; ; 2010SOW040 07/01/2011 SRINI   INCREASE NAME FIELDS; ; 365434 07/15/11  R.HWANG    Changed term code "O26" and; FDIR351              changed from 22 years to; 26 years for TRMOAD letter.; ; 390462 05/19/12  R.HWANG  Added editing logic for a new; FDIR381           letter, "TRMAG2" and modified the; existing logic for letter "TRMAGN"; ########### NEW BUSINESS RULE ######################; "TRMAGN": TRANS CODE 90 OR 95.; "TRMAG2": TRANS CODE 80 BUT EVENT CODE NOT 96 OR 97.; ######################################################; ; 1081369 R3 2018 S.HAWKSLEY ADDITIONAL PPO PROJECT.; ADD NEW ENROLLMENT CODES AS; PART OF THE CONFIGURABLE; ENROLLMENT CODES PROCESS.; ; 1236075 04/27/19 FE99TFR  REMOVE FWEDPGNM, 

FALRP0M3.CBL, PROGRAM:   FALRP0M3 - EDIT SPECIAL LETTERS RECORDS AND INSERT; DAILY TRANSACTIONS.; ; FUNCTION: EDITS SPECIAL LETTERS ROWS CREATED BY WEB-BASED; LETTER PROCESSING ENROLLMENT PAGE.; ; PROCESSING NOTES:; ; CALLED PROGRAMS:; FXDTP0M0 - INSERT DAILY TRANSACTIONS; FXUEP0M0 - MAINTAIN USER ERROR WORKING STORAGE TABLE; ; DATABASE TABLES AND VIEWS (ACCESS):; FLTTRHST - LETTER HISTORY   : FETCH; FLTTRREF - LETTER REFERENCE  : FETCH; FDLYTRNS - DAILY TRANSACTION : SELECT; ; COPY MEMBERS:; FWEDLKUE - USER ERROR WORKING STORAGE; FWEDLKDT - DAILY TRANSACTION WORKING STORAGE; FWEDTXET - COMMON EDIT WORKING STORAGE; ; PROGRAM HISTORY:; ; DATE   PROGRAMMER; CMR NO. MM/DD/YY   NAME    CHANGE DESCRIPTION; ---------------------------------------------------------------; ; 78620 01/01/06  MIKE KASE   ORIGINAL IMPLEMENTATION.; ; 94339 04/12/08  DAVID TURNER  MODIFIED FOR FRSU GREEN; SCREEN CONVERSION.; ; 97979 10/18/08  MIKE KASE   FIX TO ADDRESS UPDATE.; CONTRACT PARTITION WAS; NOT BEING MOVED.; ; 118999 10/17/09  Richard Hwang R3, 2009 change:; Modified to move alternate; address begin & end dates; when creating 'FELR' trans.; ; 2010SOW040 07/01/2011 SRINI   INCREASE NAME FIELDS; ; 1236075  04/27/2019 FE99TFR  REMOVE FWEDPGNM, 

FALRP0M4.CBL, PROGRAM:   FALRP0M4; CALLED PROGRAMS: FXCMP0M0 (CONTRACT ID VALIDATION); FXDTP0M0 (WRITE DAILY TRANS RECORD); ; DATABASE TABLES: FLTTRHST - LETTER_HISTORY; FLTTRREQ - LETTER_REQUEST; ; COPY MEMBERS:   FWEDLKDT - WRITE DAILY TRANS REC AREA; FWEDLKSC - VALIDATE CONTRACT ID AREA; FWG07792 - FY71P0ME ERROR LOG DATA AREA; FWEDABT1 - ENROLLMENT ABEND AREA 1; FWEDABT2 - ENROLLMENT ABEND AREA 2; FE99XF01 - LINKAGE FOR CONTRACT/MEM DATA; FELHXF01 - LETTER HISTORY ENROLLMENT DATA; FE99XF02 - MISC WORK AREA (STW-MISC-AREA); FE99XF10 - CONTRACT/MEMBER REDEF (FXCM); FALRXF04 - INPUT OTR FROM FALRP0M0; FWG07793 - ERROR LOG CALL TO FX71P0ME, 

FAMEP0M0.CBL, PROGRAM:   FAMEP0M0; FUNCTION:; ; RETRIEVES MEMBER LIST FOR ALL MEMBERS ON A CONTRACT.; MEMBER LIST CONSISTS OF MEMBER ID, PATIENT CODE,; NAME, DOB, AND GENDER. ADDITIONALLY, A CONTRACT HLD; 'Y/N' FLAG IS ADDED TO EACH ENTRY IN THE LIST TO; IDENTIFY THE CONTRACT HOLDER.; ; RECEIVE CONTRACT ID FROM CALLING PROGRAM.; ; VERIFY THE CONTRACT ID IS VALID.; ; IF THE CONTRACT IS NOT VALID THEN RETURN TO THE; CALLING PROGRAM WITH ERROR RESPONSE.; ; IF THE CONTRACT IS VALID THEN RETRIEVE REQUESTED; MEMBER INFO FOR ALL MEMBERS ON THE SPECIFIED CONTRAC; . SELECTED DATA ELEMENTS ARE THEN PASSED BACK; TO THE CALLING PROGRAM. A TWO-BYTE MEMBER COUNT; FIELD, CONTAINING A COUNT OF MEMBERS RETURNED, WILL; PRECEED THE LIST. MAXIMUM NUMBER OF MEMBERS RETURNE; IS 26., 

FAMRP0M0.CBL, PROGRAM:   FAMRP0M0 - FEP ENROLLMENT MEDICARE DRIVER.; FUNCTION: THIS MODULE IS CALLED BY THE MAIN ENROLLMENT DRIVER; FAENP0M0 THEN ROUTES RETRIEVAL REQUESTS TO FAMRP0M2; AND ALL OTHER REQUESTS TO FAMRP0M1., 005200 WORKING-STORAGE SECTION.; ------------------------; ; 005600   04 FAMRP0M1-MODULE     PIC X(08) VALUE 'FAMRP0M1'.; 005700   04 FAMRP0M2-MODULE     PIC X(08) VALUE 'FAMRP0M2'.; ----------------------------------------------------------------; ; %%%K8 - 1209145 - R42018 - START; 012800 01 WS-TIME           PIC X(26).; 012900 01 WS-BEG-TIME         PIC X(26).; 01; 017700 01 WS-BD-RUN-DATE        PIC X(10) VALUE SPACES.; 017800 01 WS-BD-RUN-TS         PIC X(26) VALUE SPACES.; 01 WS-MISC.; 012800   04 WS-CSR-OPN-SW      PIC X(01) VALUE SPACES.; 012800   04 EOF-SW          PIC X(01) VALUE SPACES.; 012800   04 WS-RECORD-ABT      PIC X(01) VALUE SPACES.; 012800   04 WS-ERROR-ROLLBACK-INDIC PIC X(01) VALUE SPACES.; 017800   04 WS-PARM-DATE1      PIC X(10) VALUE SPACES.; 018600   04 WS-NULL-INDICATORS.; 018700     08 PARM-DATE1-NN    PIC S9(4) COMP VALUE +0.; 018800   04 WS-PREV-TRNS-SOURCE   PIC S9(4) COMP VALUE +0.; 018900   04 WS-PREV-MEDIUM      PIC X(1) VALUE SPACES.; 01; 019100   04 WS-ABT-RETURN-CODE-SAVE PIC S9(9) COMP VALUE +0.; 019200   04 WS-ABT-COUNT-HOLD    PIC 9(9) COMP VALUE 0.; 001650   04 FXAT-PGM         PIC X(8) VALUE 'FXATPBM0'.   012; 001650   04 FXUE-PGM         PIC X(8) VALUE 'FXUEPBM0'.   012; 04 WS-MICROFILM-LOC-NBR   PIC 9(11) VALUE ZEROES.; 04 WS-MICROFILM-LOC-NBR-X REDEFINES; WS-MICROFILM-LOC-NBR   PIC X(11).; 04 WS-CONTRACT-ID      PIC 9(09) VALUE ZEROES.; 015500 01 WS-TRX-DATA-WORK-AREA.; 015600   02 FILLER          PIC X(01).; 015700   02 WS-TRX-DATA-AREA     PIC X(8057).; 01; 016100   COPY FWEDTXET.; %%%K8 - 1209145 - R42018 - END; 006100 01 WS-FAMRP0M1-REQUEST.; 006200   04 WS-EDIT-HEADER     PIC X(28).; 006300   COPY FA99XF01.; 006400   COPY FAMRXF01; 006500     REPLACING ==OCCURS 0 TO 100 TIMES==; 006600         BY ==OCCURS 1 TIMES.==; 006700          ==DEPENDING ON FAMR-OPL-NBR-OF-RECORDS.==; 006800         BY == ==.; ; ----------------------------------------------------------------; ; 007200 01 WS-FAMRP0M1-RESPONSE.; 007300   COPY FA99XF02.; ; ----------------------------------------------------------------; ; 007700 01 WS-FAMRP0M2-REQUEST.; 007800   04 WS-ROSTER-HEADER     PIC X(28).; 007900   COPY FA99XF01.; ; ----------------------------------------------------------------; ; 008300 01 WS-FAMRP0M2-RESPONSE.; 008400   COPY FA99XF02.; 008500   COPY FA99XF01.; 008600   COPY FAMRXF01; 008700     REPLACING ==OCCURS 0 TO 100 TIMES==; 008800         BY ==OCCURS 100 TIMES.==; 008900          ==DEPENDING ON FAMR-OPL-NBR-OF-RECORDS.==; 00; ; ----------------------------------------------------------------; ; 009400 01 WS-FAMR-ABEND-RESPONSE.; 009500   COPY FA99XF03.; %%%K8 - 1209145 - R42018 - START; 015800 01 STANDARD-LINK-AREA.; 015900   COPY FE99XF01.; 016200 01 ABNORMAL-TERMINATION-AREA.; 016300   COPY FWEDABT1.; 016400   EXEC SQL INCLUDE FWEDABT2 END-EXEC.; ---------------------------------------------------------------; DB2 DECLARATIONS; ---------------------------------------------------------------; 019600   EXEC SQL INCLUDE SQLCA END-EXEC SUPPRESS.; 019700   EXEC SQL INCLUDE FDLYTRNS END-EXEC.; 0; 020100   EXEC SQL INCLUDE FSRCEMED END-EXEC.; 019900   EXEC SQL INCLUDE FPROCPRM END-EXEC.; 019900   EXEC SQL INCLUDE FWEDCNST END-EXEC.; 019900   EXEC SQL INCLUDE FSUSPERR END-EXEC.; ; ---------------------------------------------------------------; DB2 CURSORS; ---------------------------------------------------------------; 020700                           EXEC SQL; 020800   DECLARE DAILY-TRANS-CSR CURSOR WITH HOLD FOR; 020900   SELECT A.SEQUENCE_NUMBER; 02; 021100      ,B.OPERATOR_ID; 021200      ,B.TRNS_TIME; 021300      ,B.TRNS_ID; 021400      ,B.TRNS_STATUS; 021500      ,B.MEDIUM_TYPE; 021600      ,B.FORM_TYPE; 021700      ,B.ACTION_CODE; 021800      ,B.PLAN_CODE; 021900      ,B.LAST_PROC_DATE; 02; 022100      ,B.MEMBER_ID; 022200      ,B.TRNS_FUNCTION; 022300      ,B.SUBJECT_ID; 022400      ,B.TRANSMITTAL_NBR; 022500      ,B.AGENCY_OFFICE_ID; 022600      ,B.MICROFILM_LOC_NBR; 022700      ,B.CONTRACT_ID; 022800      ,B.ENR_TRNS_CODE; 022900      ,B.TRNS_DATA; 02; 023100      ,DAILY_TRANSACTION B; 023200    WHERE B.CONTRACT_ID    =; 023300      :DCLDAILY-TRANSACTION.CONTRACT-ID; 023400     AND B.MICROFILM_LOC_NBR = :MICROFILM-LOC-NBR; 023500     AND B.TRNS_TIME  BETWEEN :WS-BEG-TIME AND :WS-END-TIME; 023600     AND B.TRNS_STATUS IN ('P', 'W'); 023700     AND A.TRNS_ID      = B.TRNS_ID; 023800     AND A.TRANSACTION_GROUP = '5'; 023900    ORDER BY SEQUENCE_NUMBER; 02; END-EXEC.; %%%K8 - 1209145 - R42018 - END; ; -*-*-*; LINKAGE SECTION; -*-*-*; ; 010100 LINKAGE SECTION.; ----------------; ; 010400 01 LS-FAMR-RETURN-CODE       PIC 9(02).; ; 010600 01 LS-FAMR-MESSAGE-LEN       PIC 9(6).; ; 010800 01 LS-FAMR-MESSAGE.; 010900   04 LS-PASS-HEADER.; 01; 011100     08 LS-PASS-OPTIONS.; 011200       12 LS-PASS-OPTION   PIC X OCCURS 20 TIMES.; 011300   COPY FA99XF01.; 04 FILLER           PIC X(31781).; 011410   04 FILLER           PIC X(31753).; ; -*-*-*; PROCEDURE DIVISION; -*-*-*; ; 01; 012100             LS-FAMR-MESSAGE-LEN; 012200             LS-FAMR-MESSAGE.; ; %%%K8 - 1209145 - R42018 - START; PERFORM; %%%K8 - 1209145 - R42018 - END, 016100   MOVE LS-FAMR-MESSAGE TO WS-FAMRP0M1-REQUEST; 016200   MOVE ZEROS      TO LS-FAMR-MESSAGE-LEN; 016300   MOVE SPACES     TO WS-FAMRP0M1-RESPONSE; ; 016500   CALL FAMRP0M1-MODULE USING DFHEIBLK; 016600                 DFHCOMMAREA; 016700                 WS-FAMRP0M1-REQUEST; 016800                 LS-FAMR-MESSAGE-LEN; 016900                 WS-FAMRP0M1-RESPONSE; 01; 017100      MOVE SPACES     TO SAW-STANDARD-ABEND-WORKAREA; 017200      MOVE -5             TO SAW-RETURN-CODE; 017300      MOVE 'ERROR ON CALL TO FAMRP0M1' TO SAW-SQL-MESSAGE; 017400      MOVE; 017500      MOVE SIW-OPERATOR-ID OF WS-FAMRP0M1-REQUEST; 017600                      TO SAW-OPERATOR-ID; 017700      PERFORM; 017800       THRU; 017900    NOT ON EXCEPTION; 01; 018100      MOVE WS-FAMRP0M1-RESPONSE TO LS-FAMR-MESSAGE; MOVE WS-FAMRP0M1-RESPONSE-LEN TO LS-FAMR-MESSAGE-LEN; 018300      IF SOW-SUCCESS-IND OF WS-FAMRP0M1-RESPONSE = 'S'; 018400       MOVE ZEROS TO LS-FAMR-RETURN-CODE; 018500      ELSE; 018600       MOVE 01  TO LS-FAMR-RETURN-CODE; 018700      END-IF; 018800      INSPECT LS-FAMR-MESSAGE; 018900       REPLACING ALL LOW-VALUES BY SPACES; 01; 019100   .; %%%K8 - 1209145 - R42018  - START; 017600   IF SOW-SUCCESS-IND OF WS-FAMRP0M1-RESPONSE = 'S'; PERFORM 2100-PROC-DLY-TRNS; THRU 2100-PROC-DLY-TRNS-EXIT; END-IF.; %%%K8 - 1209145 - R42018  - END; ; ---------------------------; 019400; 019500   EXIT.; ---------------------------; ; %%%K8 - 1209145 - R42018 - START; 2100-PROC-DLY-TRNS.; ** PROCESS THE GENERATED DAILY TRANSACTIONS.; PERFORM 2110-GET-TIMESTAMP; THRU 2110-GET-TIMESTAMP-EXIT.; ; MOVE WS-TIME  TO WS-END-TIME.; ; ** COMMIT THE DAILY TRANS WRITES BEFORE PROCESSING THEM.; 067300   PERFORM 3600-COMMIT-CHANGES THRU; 067400       3600-COMMIT-CHANGES-EXIT.; 067500; 067600   MOVE  'N'         TO WS-CSR-OPN-SW; 067700   PERFORM 2200-OPEN-DT-CSR THRU; 067800       2200-OPEN-DT-CSR-EXIT; 067900; 06; 068100   PERFORM 2220-LOOP-THRU-DT-CSR THRU; 068200       2220-LOOP-THRU-DT-CSR-EXIT UNTIL EOF-SW = 'Y'.; 068300; ** CURSOR COULD HAVE BEEN CLOSED BY A ROLLBACK.; 068700   IF WS-CSR-OPN-SW = 'Y'; 068800    PERFORM 2260-CLOSE-DT-CSR THRU; 068900        2260-CLOSE-DT-CSR-EXIT; 06; 069100; 069200 2100-PROC-DLY-TRNS-EXIT.; 069300   EXIT.; 045200 2110-GET-TIMESTAMP.; 045400   EXEC SQL; 045500     SELECT CURRENT TIMESTAMP; 045600      INTO :WS-TIME; 045700      FROM SYSIBM.SYSDUMMY1; 045900   END-EXEC.; 04; 046100   EVALUATE SQLCODE; 046200     WHEN ZERO-RETURN CONTINUE; 046300     WHEN OTHER    MOVE  21101 TO SWS-ABT-ACCESS-POINT; 046400             PERFORM U-965-ABT-HANDLER; 046500   END-EVALUATE.; 046600; 046700 2110-GET-TIMESTAMP-EXIT.; 046800   EXIT.; 069500 2200-OPEN-DT-CSR.; MOVE WS-MICROFILM-LOC-NBR TO MICROFILM-LOC-NBR OF; DCLDAILY-TRANSACTION; 070600   MOVE WS-CONTRACT-ID    TO CONTRACT-ID OF; DCLDAILY-TRANSACTION; 07; 072100   EXEC SQL OPEN DAILY-TRANS-CSR END-EXEC.; 072200   EVALUATE SQLCODE; 072300     WHEN ZERO-RETURN MOVE 'Y'   TO WS-CSR-OPN-SW; 072400     WHEN OTHER    MOVE 22001  TO SWS-ABT-ACCESS-POINT; 072500             PERFORM; 072600; 072700   END-EVALUATE.; 072800; 072900 2200-OPEN-DT-CSR-EXIT.; 07; 073200 2220-LOOP-THRU-DT-CSR.; 073400   PERFORM 2240-FETCH-DT-CSR THRU; 073500       2240-FETCH-DT-CSR-EXIT.; 073600; 073700   IF EOF-SW = 'Y'; 073800    GO TO 2220-LOOP-THRU-DT-CSR-EXIT; 073900   END-IF.; 07; 074500   PERFORM; 074600; ; 075400 2220-LOOP-THRU-DT-CSR-EXIT.; 075500   EXIT.; 075700 2240-FETCH-DT-CSR.; 075900                       EXEC SQL; 07; 076100     :DCLTRANSACTION-GROUP.SEQUENCE-NUMBER; 076200     ,:DCLTRANSACTION-GROUP.PROGRAM-NAME; 076300     ,:DCLDAILY-TRANSACTION.OPERATOR-ID; 076400     ,:DCLDAILY-TRANSACTION.TRNS-TIME; 076500     ,:DCLDAILY-TRANSACTION.TRNS-ID; 076600     ,:DCLDAILY-TRANSACTION.TRNS-STATUS; 076700     ,:DCLDAILY-TRANSACTION.MEDIUM-TYPE; 076800     ,:DCLDAILY-TRANSACTION.FORM-TYPE; 076900     ,:DCLDAILY-TRANSACTION.ACTION-CODE; 07; 077100     ,:DCLDAILY-TRANSACTION.LAST-PROC-DATE; 077200     ,:DCLDAILY-TRANSACTION.DELETE-IND; 077300     ,:DCLDAILY-TRANSACTION.MEMBER-ID; 077400     ,:DCLDAILY-TRANSACTION.TRNS-FUNCTION; 077500     ,:DCLDAILY-TRANSACTION.SUBJECT-ID; 077600     ,:DCLDAILY-TRANSACTION.TRANSMITTAL-NBR; 077700     ,:DCLDAILY-TRANSACTION.AGENCY-OFFICE-ID; 077800     ,:DCLDAILY-TRANSACTION.MICROFILM-LOC-NBR; 077900     ,:DCLDAILY-TRANSACTION.CONTRACT-ID; 07; 078100     ,:DCLDAILY-TRANSACTION.TRNS-DATA; 078200                       END-EXEC.; 078300   EVALUATE SQLCODE; 078400     WHEN ZERO-RETURN CONTINUE; 078500     WHEN NOT-FOUND  MOVE  'Y'   TO EOF-SW; 078600             GO TO  2240-FETCH-DT-CSR-EXIT; 078700     WHEN OTHER    MOVE  22401  TO SWS-ABT-ACCESS-POINT; 078800             PERFORM; 078900; 07; 079100; 079200 2240-FETCH-DT-CSR-EXIT.; 079300   EXIT.; 079500 2260-CLOSE-DT-CSR.; 079700   EXEC SQL CLOSE DAILY-TRANS-CSR END-EXEC.; 079800   EVALUATE SQLCODE; 079900     WHEN ZERO-RETURN MOVE  'N'   TO WS-CSR-OPN-SW; 0; 080100             PERFORM; 080200; 080300   END-EVALUATE.; 080400; 080500 2260-CLOSE-DT-CSR-EXIT.; 080600   EXIT.; ; PROCESS THE DAILY TRANSACTIONS PULLED FROM THE CURSOR.; ----------------------------------------------------------------; SET UP THE CALL TO THE APPROPRIATE TRANSACTION AND CALL IT.; ; IF THE DAILY TRANSACTION PROCESSED OK:; 1. KEEP GOING.; ; IF THERE WAS A PROBLEM:; 1. ROLLBACK ANY UPDATES; 2. SUSPEND THE TRANSACTION; 3. GENERATE A SUSPENSE ERROR RECORD; 5. UPDATE THE RESPONSE AREA (WHICH ERRORS WOULD BE FATAL?); ; 094800; 09; 095200; GET THE TRNS_DATA PORTION OF THE DAILY TRANSACTION RECORD.; 095600   PERFORM 3200-SET-UP-CALL-TRANS THRU; 095700       3200-SET-UP-CALL-TRANS-EXIT; 095800; 095900   PERFORM 3300-CALL-TRANSACTION THRU; 09; 096100; ** ADD 1  TO WS-TRANSACTIONS-PROCESSED; INITIALIZE DCLGEN - VARCHAR FIELDS ARE NOT CLEARED BY DB2; 096600   INITIALIZE DCLDAILY-TRANSACTION; 096700        DCLSUSPENSE-ERROR; 096800        DCLTRANSACTION-GROUP.; LOW-VALUES ARE TRUNCATED BY CREATE DAILY TRANSACTION (FXDTP0M0); WHEN THE LENGTH OF TRNS-DATA IS DETERMINED. INITIALIZE; TRNS-DATA UPON RETRIEVAL TO RESTORE THE LOST LOW-VALUES.; VARCHAR DATA IS OVERLAYED INTO THE DCLGEN FIELD WHEN RETRIEVED.; 097500   MOVE LOW-VALUES TO TRNS-DATA-TEXT OF DCLDAILY-TRANSACTION.; ; ** COMMIT AFTER EVERY DAILY TRANSACTION; 09; 098100       3600-COMMIT-CHANGES-EXIT.; 098200; 098300; 098400   EXIT.; SET UP THE CALL TO THE APPROPRIATE PROGRAM. MOVE FIELDS NOT; ALREADY DEFINED WITHIN STANDARD-PASSED-PARAMETERS TO STW.; 098900 3200-SET-UP-CALL-TRANS.; 09; RESET USER ERROR FIELDS; 099400   MOVE LOW-VALUES       TO STW-HIGHEST-SEVERITY.; 099500   MOVE 0           TO STW-MSG-ARRAY-INDEX.; 099600   INITIALIZE STW-USER-ERROR-LINK.; 099700; RESET FIELD THAT INDICATES THAT AN ERROR (APPLICATION OR; ABT) OCCURED THAT CAUSES A ROLLBACK.; 100200   MOVE 'N'      TO WS-ERROR-ROLLBACK-INDIC.; 100300; REFRESH RUN DATE & TIMESTAMP; 100700   MOVE WS-BD-RUN-DATE TO STW-CURRENT-DATE-DB2.; 100800   MOVE WS-TIME    TO STW-CURRENT-TS-DB2.; 034900   MOVE  'B'     TO STW-LINK-ONLINE-BATCH.; 100900; CLEAR WORK AREAS; 101300   MOVE LOW-VALUES   TO STW-STANDARD-PASSED-PARAMETERS.; 101400   MOVE LOW-VALUES   TO ABNORMAL-TERMINATION-AREA.; 101500; FIELD THAT INDICATES WHETHER OR NOT TO INVOKE THE ABT ROUTINE; 101900   MOVE 'N'        TO WS-RECORD-ABT.; 10; FIELD THAT INDICATES WHETHER OR NOT THE CALLED TRANSACTION; MODIFIED THE DATABASE. SET TO 'N' SO IF CALLED TRX HAD A; SYSTEM ERROR, WE DO NOT ROLLBACK THE DT STATUS UPDATE AND; SUSPENSE_ERROR INSERT PERFORMED BELOW WHEN WE CALL ABT TO; RECORD THE SYSTEM ERROR.; 102800   MOVE 'N'        TO SWS-ABT-UPDATE-INDIC.; 102900   MOVE OPERATOR-ID    OF DCLDAILY-TRANSACTION; 10; 103100; TRNS-TIME IS A TIMESTAMP - TRUNCATION OF TIME OCCURS ON THIS; MOVE.; 103600   MOVE TRNS-TIME OF DCLDAILY-TRANSACTION TO STW-DT-TRNS-DATE.; 103700   MOVE TRNS-ID  OF DCLDAILY-TRANSACTION TO STW-TRANSACTION-ID.; 103800   MOVE PLAN-CODE OF DCLDAILY-TRANSACTION TO STW-DT-SOURCE-NUM.; 103900   MOVE ENR-TRNS-CODE; 10; DUE TO XDB TO DB2 INCOMPATIBILITY, TRNS-DATA-TEXT WAS PADDED; WITH A LEADING SPACE. XDB DOES NOT ALLOW LOW-VALUE IN FIRST; POSITION OF A VARCHAR. THIS CODE REMOVES THE LEADING SPACE.; 104700   MOVE TRNS-DATA-TEXT  OF DCLDAILY-TRANSACTION; 104800              TO WS-TRX-DATA-WORK-AREA.; 104900   MOVE WS-TRX-DATA-AREA TO STW-STANDARD-PASSED-PARAMETERS.; 10; 105100 3200-SET-UP-CALL-TRANS-EXIT.; 105200   EXIT.; 105400 3300-CALL-TRANSACTION.; 105600; CALL THE PROGRAM TO PROCESS THE DAILY TRANSACTION DATA.; 10; 106100               ABNORMAL-TERMINATION-AREA.; 106200; RETURN-CODE IS < 0 WHEN AN ABNORMAL TERMINATION CONDITION; OCCURS.; ; HIGHEST-SEVERITY IS VALUED BY USER ERROR WHEN AN APPLICATION; ERROR OCCURS.; ; TEST FOR APPLICATION OR ABT ERROR. IF NO ERRORS, UPDATE STATUS; TO INDICATE 'C'OMPLETE.; 107300   IF SWS-ABT-RETURN-CODE >= 0 AND; 107400    STW-HIGHEST-SEVERITY = LOW-VALUES; 107500    MOVE  'C'    TO TRNS-STATUS OF DCLDAILY-TRANSACTION; 107600    PERFORM 3350-UPDATE-DT-STATUS THRU; 107700        3350-UPDATE-DT-STATUS-EXIT; 107800    GO TO  3300-CALL-TRANSACTION-EXIT; 107900   END-IF.; 10; UPDATE-INDIC IS SET BY THE APPLICATION PROGRAM WHEN THE; DATABASE IS MODIFIED.; 108500   IF SWS-ABT-UPDATE-INDIC = 'Y'; 108600     MOVE 'N' TO SWS-ABT-UPDATE-INDIC; INDICATES THAT AN APPLICATION OR ABT ERROR OCCURED THAT CAUSED; A ROLLBACK.; 109100     MOVE 'Y' TO WS-ERROR-ROLLBACK-INDIC; 109200     PERFORM 3340-ROLLBACK-CHANGES THRU; 109300         3340-ROLLBACK-CHANGES-EXIT; %%%K6 1240621         -START; IF WS-CSR-OPN-SW = 'Y' AND EOF-SW = 'N'; MOVE 'N' TO WS-CSR-OPN-SW; MOVE 'Y' TO EOF-SW; END-IF; 109400   END-IF.; %%%K6 1240621         -END; 109500; 109600   IF SWS-ABT-RETURN-CODE < 0; IF A -911 OCCURRED, THE ROLLBACK HAS ALREADY OCCURRED; AND CURSORS HAVE BEEN CLOSED. SET THE INDICATOR SO THE CURSORS; WILL BE REOPENED AND PROCESSING CAN CONTINUE.; 110200     IF SWS-ABT-SQLCODE = -911; 110300       MOVE 'Y' TO WS-ERROR-ROLLBACK-INDIC; 110400       INITIALIZE WS-CSR-OPN-SW; 110500     END-IF; WHEN AN ABT CONDITION OCCURS (I.E. NEGATIVE; SWS-ABT-RETURN-CODE), THE ERROR IS LOGGED TO THE ABNORMAL; TERMINATION TABLE, EXCEPT DUPLICATE ERRORS.; 111100     MOVE 'Y' TO WS-RECORD-ABT; 111200     IF SWS-ABT-DUP-ERROR; ALWAYS REJECT DUPLICATE TRANSACTIONS. THEY CANNOT BE; FIXED.; 111700       MOVE 'R' TO TRNS-STATUS OF DCLDAILY-TRANSACTION; 111800             TRNS-STATUS OF DCLSUSPENSE-ERROR; WHEN AN ABT CONDITION OCCURS, THE ERROR IS LOGGED TO THE; ABNORMAL TERMINATION TABLE. THIS IS NOT NECESSARY FOR A; DUPLICATE ERROR.; 112400       MOVE 'N' TO WS-RECORD-ABT; 112500       MOVE 0 TO SWS-ABT-RETURN-CODE; 112600     ELSE; 112700       PERFORM 3310-ERR-HANDLING THRU; 112800           3310-ERR-HANDLING-EXIT; 112900     END-IF; 11; 113100     IF STW-HIGHEST-SEVERITY NOT = LOW-VALUES; 113200       PERFORM 3310-ERR-HANDLING THRU; 113300           3310-ERR-HANDLING-EXIT; 113400     END-IF; 113500   END-IF.; 113600; 113700   IF SWS-ABT-RETURN-CODE < 0; ONLY CREATE GENERIC SYSTEM ERROR MESSAGE IF A SYSTEM ERROR WAS; NOT PREVIOUSLY CREATED BY THE APPLICATION.; 114200     AND STW-HIGHEST-SEVERITY NOT = SYSTEM-ERROR; SEND MESSAGE - SYSTEM ERROR HAS OCCURED; 114600     MOVE 0102 TO STW-I-ERROR-CODE; 114700     MOVE ' ' TO STW-I-DATA-ELEMENT; 114800     MOVE 'S' TO STW-I-SEVERITY; PROVIDE UNIQUE KEY TO THE DAILY TRANSACTION RECORD; 115200     MOVE TRNS-TIME OF DCLDAILY-TRANSACTION; 115300       TO STW-I-FREE-TEXT; SAVE RETURN CODE BECAUSE CALLED PROGRAM WILL RESET; 115700     MOVE SWS-ABT-RETURN-CODE TO WS-ABT-RETURN-CODE-SAVE; 115800     PERFORM U-870-USER-ERROR; 115900     MOVE WS-ABT-RETURN-CODE-SAVE TO SWS-ABT-RETURN-CODE; 11; 116100; 116200   PERFORM 3350-UPDATE-DT-STATUS THRU; 116300       3350-UPDATE-DT-STATUS-EXIT; 116400; 116500   PERFORM 3330-INSERT-ERROR THRU; 116600       3330-INSERT-ERROR-EXIT.; 116700; 122100; 122200 3300-CALL-TRANSACTION-EXIT.; 122300   EXIT.; 122900 3310-ERR-HANDLING.; IF THE CURRENT RECORD HAS THE SAME SOURCE/MEDIUM, DO NOT; REREAD SOURCE_MEDIUM TABLE.; 123400   IF WS-PREV-TRNS-SOURCE = PLAN-CODE OF DCLDAILY-TRANSACTION; 123500     AND WS-PREV-MEDIUM = MEDIUM-TYPE OF DCLDAILY-TRANSACTION; 123600     MOVE WS-PREV-PROCESS-CODE TO PROCESS-CODE; 123700   ELSE; 123800     MOVE PLAN-CODE OF DCLDAILY-TRANSACTION; 123900       TO WS-PREV-TRNS-SOURCE; 12; 124100       TO WS-PREV-MEDIUM; 124200     MOVE SPACES TO PROCESS-CODE OF DCLSOURCE-MEDIUM; 124300     PERFORM 3315-READ-FSRCEMED; 124400     EVALUATE SQLCODE; 124500       WHEN ZERO-RETURN; 124600         CONTINUE; 124700       WHEN NOT-FOUND; 124800         PERFORM 3317-PROCESS-ALL-PLAN; 124900       WHEN OTHER; 12; 125100         PERFORM; 125200; 125300     END-EVALUATE; 125400   END-IF.; DEFAULT PROCESS-CODE TO SUSPEND IF AN ENTRY IS NOT FOUND; 125800   IF PROCESS-CODE OF DCLSOURCE-MEDIUM = SPACES; 125900     MOVE 'S' TO PROCESS-CODE OF DCLSOURCE-MEDIUM; THIS IS A SPECIAL OVERRIDE TO FORCE FEAI TRANSACTIONS TO; REJECT RATHER THAN SUSPEND FOR THIS ERROR CODE.; IF STW-MSG-CODE(1) = 1170; MOVE 'R' TO PROCESS-CODE OF DCLSOURCE-MEDIUM; END-IF; 12; 126100   MOVE PROCESS-CODE TO TRNS-STATUS OF DCLDAILY-TRANSACTION; 126200             TRNS-STATUS OF DCLSUSPENSE-ERROR; 126300             WS-PREV-PROCESS-CODE.; ; 126500 3310-ERR-HANDLING-EXIT.; 126600   EXIT.; THIS ROUTINE READS THE SOURCE_MEDIUM TABLE TO DETERMINE; HOW TRANSACTIONS WITH THE GIVEN SOURCE AND MEDIUM SHOULD BE; HANDLED.; 127200 3315-READ-FSRCEMED.; 127300   EXEC SQL; 127400     SELECT PROCESS_CODE; 127500      INTO :PROCESS-CODE; 127600     FROM SOURCE_MEDIUM; 127700     WHERE TRNS_SOURCE = :DCLDAILY-TRANSACTION.PLAN-CODE; 127800      AND MEDIUM   = :DCLDAILY-TRANSACTION.MEDIUM-TYPE; 127900   END-EXEC.; ; THIS ROUTINE DETERMINES WHETHER THE TRANSACTION'S SOURCE IS A; PLAN. IF IT IS, READ THE SOURCE_MEDIUM TABLE USING THE A; PLAN CODE THAT REPRESENTS ALL OF THE PLANS. SINCE TODAY,; ALL PLANS ARE HANDLED SIMILARLY, THIS AVOIDS MAINTAINING; SOURCE_MEDIUM ENTRIES FOR EACH SOURCE/MEDIUM COMBINATION.; ONLY 1 ENTRY PER MEDIUM IS REQUIRED TO HANDLE ALL OF THE; PLANS. IN THE FUTURE, SOME PLANS MAY BE HANDLED DIFFERENTLY.; 12; 129100   MOVE PLAN-CODE OF DCLDAILY-TRANSACTION; 129200     TO STW-OP-PLAN-CODE-NUM.; 129300   IF STW-PLAN; 129400     SET STW-ALL-PLAN TO TRUE; 129500     MOVE STW-OP-PLAN-CODE-NUM; 129600       TO PLAN-CODE OF DCLDAILY-TRANSACTION; 129700     PERFORM 3315-READ-FSRCEMED; 129800     EVALUATE SQLCODE; 129900       WHEN ZERO-RETURN; 1; 130100       WHEN OTHER; 130200         MOVE 33171 TO SWS-ABT-ACCESS-POINT; 130300         PERFORM; 130400; 130500     END-EVALUATE; 130600   END-IF.; ; INSERT SUSPENSE ERRORS; 131100 3330-INSERT-ERROR.; 131200   MOVE TRNS-TIME OF DCLDAILY-TRANSACTION; 131300     TO TRNS-TIME OF DCLSUSPENSE-ERROR.; 131400   EXEC SQL; 131500     INCLUDE FWEPBD01; 131600   END-EXEC.; 131700   EVALUATE SQLCODE; RESET FLAG SO IN CASE WHERE CALLED TRX HAD SYSTEM ERROR, BD; DOES NOT ROLLBACK THE DT UPDATE AND INSERT TO SUSPENSE_ERROR; WHEN CALLING ABT TO REPORT THE SYSTEM ERROR.; THE RESET IS DONE HERE BECAUSE THE INSERT TO SUSPENSE_ERROR IS; THE LAST DATABASE CHANGE OF THE SET. IF THE ORDER CHANGES,; THEN THIS RESET MUST GO WITH THE LAST UPDATE OF THE SERIES.; 132600     WHEN ZERO-RETURN; 132700       MOVE 'N' TO SWS-ABT-UPDATE-INDIC; IF THE RECORD ALREADY EXISTS IGNORE THE ERROR. LET THE BATCH; DRIVER CONTINUE PROCESSING. THIS SHOULD ONLY OCCUR IF SOMEONE; RESETS THE STATUS OF A DT RECORD FROM 'S' OR 'R' TO 'W' AND; DOESN'T REMOVE THE ASSOCIATE SUSPENSE_ERROR RECORD. ASSUMES; THAT UNIQUE INDEX EXISTS ON TRNS_TIME ONLY.; ; RESET UPDATE-INDIC THAT WAS SET BY THE UPDATE OF DT STATUS; SO THAT A ROLLBACK IS NOT ISSUED IN THE ABT ROUTINE. THE; ROLLBACK IS INAPPROPRIATE IN THIS CASE SINCE ALL DATABASE; UPDATES WOULD BE COMPLETE (DT AND SUSPENSE ERROR). INCOMPLETE; DATABASE UPDATES FROM THE CALLED TRX WOULD HAVE ALREADY BEEN; ROLLED BACK ABOVE. THE ROLLBACK CAUSES THE CURSOR TO CLOSE AND; THE NEXT FETCH OF DT TO RECEIVE A -501.; 134300     WHEN DUPLICATE-RECORD; 134400       MOVE 'N' TO SWS-ABT-UPDATE-INDIC; 134500; INITIALIZE CURSOR FIELD SO CURSORS WILL NOT BE CLOSED IN; 9999-RETURN. THE CURSORS ARE CLOSED WHEN A ROLLBACK OCCURS.; ; ; 135200     WHEN OTHER; 135300       INITIALIZE WS-CSR-OPN-SW; 135400       MOVE 'Y' TO WS-ERROR-ROLLBACK-INDIC; 135500       PERFORM 3340-ROLLBACK-CHANGES THRU; 135600           3340-ROLLBACK-CHANGES-EXIT; 135700       MOVE  33301     TO SWS-ABT-ACCESS-POINT; 135800       PERFORM; 135900; 13; ; 136200 3330-INSERT-ERROR-EXIT.; 136300   EXIT.; ROLLBACK ALL DATABASE CHANGES; 136700 3340-ROLLBACK-CHANGES.; 136800   EXEC CICS; 136900     SYNCPOINT ROLLBACK; 13; 137100; 137200 3340-ROLLBACK-CHANGES-EXIT.; 137300   EXIT.; 13; 138200                           EXEC SQL; 138300   UPDATE DAILY_TRANSACTION; 138400    SET TRNS_STATUS  = :DCLDAILY-TRANSACTION.TRNS-STATUS; 138500      ,LAST_PROC_DATE = :WS-BD-RUN-DATE; 138600   WHERE CONTRACT_ID  = :DCLDAILY-TRANSACTION.CONTRACT-ID; 138700    AND TRNS_TIME   = :DCLDAILY-TRANSACTION.TRNS-TIME; 138800                            END-EXEC.; 138900   EVALUATE SQLCODE; SET FLAG SO IF INSERT TO SUSPENSE_ERROR FAILS, WE DO NOT GET A; TRX WITH A 'S' OR 'R' STATUS AND NO SUSPENSE_ERROR.; 139400     WHEN ZERO-RETURN; 139500       MOVE 'N' TO SWS-ABT-UPDATE-INDIC; 139600     WHEN OTHER; 139700       MOVE 33501 TO SWS-ABT-ACCESS-POINT; 139800             PERFORM; 139900; 1; 140100   END-EVALUATE.; ; 140300 3350-UPDATE-DT-STATUS-EXIT.; 140400   EXIT.; ; 14; 145100   EXEC CICS; 145200     SYNCPOINT; 145300   END-EXEC.; 145400; 145500 3600-COMMIT-CHANGES-EXIT.; 145600   EXIT.; %%%K8 - 1209145 - R42018 - END, 

FAMRP0M1.CBL, PROGRAM:   FAMRP0M1; VSCOBII85.; AUTHOR.    GEOLLY GEORGE.; DATE-WRITTEN. JANUARY 2006.; DATE-COMPILED.; REMARKS.; -*-*-*; PROGRAM DESCRIPTION; -*-*-*; ; ; FUNCTION: EDITS MEDICARE RECORDS CREATED FROM ENROLLMENT; MEDICARE WEB PAGE AND CREATE FSMR DAILY TRANSACTION; ; PROCESSING STEPS:; ; ; RETURN CODES RETURNED BY FAMRP0M1; ---------------------------------------------------------------; VALUES | COMMENTS; ---------------------------------------------------------------; ; ---------------------------------------------------------------; ; PROCESSING NOTES:; ; CALLED PROGRAMS:; FXCEP0M0 - COMMON EDIT MODULES; FXDTP0M0 - INSERT DAILY TRANSACTIONS; FXUEP0M0 - MAINTAIN USER ERROR WORKING STORAGE TABLE; ; DATABASE TABLES AND VIEWS (ACCESS - CRUD):; FASGPYRL - ASGN_PAYROLL_OFC  : SELECT; FCNTRENR - CONTRACT_ENRL   : SELECT; FOTHPTYL - OTR_PRTY_LIABILITY : SELECT; ; COPY MEMBERS:; FWEDLKUE - USER ERROR WORKING STORAGE; FWEDLKDT - DAILY TRANSACTION WORKING STORAGE; FWEDTXET - COMMON EDIT WORKING STORAGE; FWEDLKSC - LINKAGE AREA FOR SELECT CONTRACT AND MEMBER; FWEDABT1 - ABNORMAL TERMINATION AREA; FWEDABT2 - ABNORMAL TERMINATION CONTROL FLAGS; ; -*-*-*; PROGRAM HISTORY; -*-*-*; ; DATE   PROGRAMMER; CMR/TT MM/DD/YY   NAME    CHANGE DESCRIPTION; ---------------------------------------------------------------; ; 407258 01/01/06  G. GEORGE   ORIGINAL; ; NNNNNN 01/11/06  SYED     MED "D" CHANGES WERE ADDED; MEDICARE TYPE "D", IS VALID; ; 59450 08/12/06  D. TURNER   CORRECTION TO MEDICARE UPDAT; PROCESSING, TO ALLOW FRSU TO; CORRECTLY REPROCESS A; SUSPENDED FSMR TRANSACTION.; ; SPECIFIC CHANGES:; PARA; ; 54953 08/12/06  J. HICKMAN  CHANGE PARAGRAPH 8600 TO; ALLOW MEDICARE ESRD TO BE; TERMINATED; ; PATCH - ADD QUERY OF OPL FOR; OLD EFF DATE, OLD TERM DATE,; OLD STATUS AND OLD REASON; ; 65654 01/02/07  D. TURNER   ADDED CERTAIN STW FIELDS; NEEDED FOR FRSU GREEN SCREEN; CONVERSION, TO ALLOW RECORDS; TO BE RE-PROCESSED FROM; SUSPENSE.; PARA.; ; ; 67871 02/14/07  V. MAGANTI  CHANGE PARAGRAPH 8615 TO; CHECK FOR MEDICARE D RECORD; ALONG WITH MEDICARE B FOR; ESRD EDIT 2570; ; 200677 07/17/10  RICHARD H.  R2, 2010 RELEASE CHANGE:; FDIR310             ADDED NOT-FOUND CONDITION TO; PARAGRAPH 8075-VALIDATE-APO; SO THAT A NOT FOUND SITUATIO; SHOULD NOT BE LEADED TO AN; ABEND BUT SHOULD CONTINUE AN; CREATE A FSMR TRANSACTION.; BECAUSE NOT-FOUND SITUATION; IS A GOOD CONDITION TO GO.; ; 2010SOW040 07/01/11 SRINI    RECOMPILE FOR HIPAA 5010.; ; SRTS456745 09/28/13 ANN     12BRD021 - CHANGE FUTURE DT; LOGIC FOR EFFECTIVE DATE; FROM 90 DAYS TO 1 YEAR.; ; TT#1052817 9/23/17 SRINI    RELEASE 3 2017 CHANGES.; CMS GAP ANALYSIS FIXES.; SRTS108136 4/15/19 MARTIN    RELEASE 3 2019 CHANGES.; ADD 0315 EDIT CONDITIONS; DO FIND ON R32019; 1331134  01/01/20 BOSCO     RELEASE 4 2019 CHANGES; TASK ID 48 PLAN CODE CHANGE; FROM 999 TO 992 FOR CMS; FOR BELOW OPL REASON CODE; S = SENIOR JUDGE; J = DEPENDENT OF SR JUDGE; R = REEMPLOYED ANNUITANT; I = DEPENDENT OF RE ANNUITAN; 1331134  01/01/20 BOSCO     RELEASE 4 2019 CHANGES; TASK ID 21.; 1331134  01/01/20 BOSCO     RELEASE 4 2019 CHANGES; TASK ID 61.; -*-*-*; E N V I R O N M E N T  D I V I S I O N; -*-*-*; ENVIRONMENT DIVISION., 

FAMRP0M2.CBL, PROGRAM:   FABAP0M2 - MEDICARE RETRIEVAL; PROGRAM HISTORY, 024500   INITIALIZE DCLCONTRACT-ENRL; 024600        DCLOTR-PRTY-LIABILITY; 024700        HOLD-STW-MEMBER-DOB; 024800        WS-NUM-MEDICARE-RECORDS.; ; 02; 025100   EXIT.; ; 025300; 025400; 025500   MOVE SIW-CONTRACT-ID-NUM OF LK-FAMR-REQUEST; 025600                 TO WS-CONTRACT-ID-NUM.; 025700   MOVE WS-CONTRACT-ID-NUM   TO CONTRACT-ID; 025800                 OF DCLCONTRACT-ENRL.; 025900   MOVE WS-CONTRACT-ID-NUM(7:1) TO WS-CONTRACT-PART-NUM.; 02; 026100                 OF DCLCONTRACT-ENRL.; 026200   MOVE WS-CONTRACT-PART-NUM  TO WS-CONTRACT-PART.; 026300   MOVE SIW-MEMBER-ID    OF LK-FAMR-REQUEST; 026400                 TO WS-MEMBER-ID-NUM.; 026500   MOVE WS-MEMBER-ID-NUM    TO WS-MEMBER-ID.; 026600   MOVE WS-MEMBER-ID-NUM(8:1)  TO WS-MEMBER-PART-NUM.; 026700   MOVE WS-MEMBER-PART-NUM   TO WS-MEMBER-PART.; 026800; 026900   MOVE SIW-MEMBER-DOB    OF LK-FAMR-REQUEST; 02; 027100; 027200   IF SIW-COVERAGE-LEVEL OF LK-FAMR-REQUEST = 'M'; 027300    AND WS-MEMBER-ID > 0; 027400    MOVE 0       TO CONTRACT-ID; 027500              OF DCLOTR-PRTY-LIABILITY; 027600    MOVE WS-MEMBER-ID  TO MEMBER-ID; 027700              OF DCLOTR-PRTY-LIABILITY; 027800    MOVE WS-MEMBER-PART TO PARTITION; 027900              OF DCLOTR-PRTY-LIABILITY; 02; 028100     MOVE 'Y'  TO WS-ERROR-FLAG; 028200     MOVE 31101 TO SAW-ACCESS-POINT; 028300          OF LK-FAMR-RESPONSE; 028400     PERFORM 9999-TERMINATION-RTN; 028500      THRU 9999-TERMINATION-RTN-EXIT; 028600   END-IF.; 028700; 028800   PERFORM 3100-GET-MR-ROSTER-DTLS; 028900    THRU 3100-GET-MR-ROSTER-DTLS-EXIT.; 02; 029100; 029200   EXIT.; ; 029400 3100-GET-MR-ROSTER-DTLS., 

FAMSP0M0.CBL, 008700   04 FAMSP0M1-MODULE       PIC X(08) VALUE 'FAMSP0M1'.INCLUDE UTILITY FUNCTIONS.                   0010, 

FAMSP0M1.CBL, 

FAPRP0M0.CBL, PROGRAM:   FAPRP0M0 - FEP ENROLLMENT PURGE RESTORE DRIVER.; CALLED PROGRAMS: FAPRP0M1 PURGE RESTORE STATUS CHECK MODULE; FAPRP0M2 ADD REQUEST MODULE; FAPRP0M3 DELETE REQUEST MODULE; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:   FA99XF01 SIW-STANDARD-INPUT-WORKAREA; FA99XF02 SOW-STANDARD-OUTPUT-WORKAREA; FA99XF03 SAW-STANDARD-ABEND-WORKAREA; FG0301  VSAM FILE; FWMM01  VSAM FILE, 

FAPRP0M1.CBL, 

FAPRP0M2.CBL, FUNCTION:; ---------; ; ADD PURGED CLAIMS RESTORE; ; CMR  DATE    REMARKS; TT87259 02/01/2008 MODIFIED; LEVEL INSTEAD OF LOW VALUES; ; TT253840 10/09/2010 DENIED PURGED CLM RESTORE; TT307979 04/09/2011 FIX DELETE FUNCTION IN CHECK STATUS ROSTER; TT304771 05/21/2011 FIX FOR PENDING REQUESTS THAT NEVER GET; PROCESSED - LOU TRIMARCO (FF99TC5); TT 283828 06/25/11 HIPAA 5010 PROJECT AND ICD10 PROJECT; TT 502005 01/01/16 RECOMPILED TO PICK UP THE NEW SUPERVISOR; FIELD ON THE ADJUD_CLAIM; DATA DIVISION.; ; WORKING-STORAGE SECTION.; ; 01 CICS-FIELDS.; 05 CICS-RESP          PIC S9(8) BINARY.; ; 05 FH02DTE1-MODULE       PIC X(08)  VALUE 'FH02DTE1'; 05 FH02DTE2-MODULE       PIC X(08)  VALUE 'FH02DTE2'; 01 WS-GENERIC-KEY.; 05 WS-CONTRACT-ID-FRST-TPR   PIC X(01).; 05 WS-CONTRACT-ID-LAST8-TPR   PIC X(08).; 05 WS-RECORD-PLAN-CODE-TPR   PIC X(03).; 05 WS-CLAIM-NUMBER-TPR     PIC X(14).; 05 WS-PATIENT-CODE-TPR     PIC X(01).; 05 WS-INCURRED-DATE-TPR     PIC X(10).; ; 01 MODULE-NAMES.; 05 FAPRP0M2-MODULE       PIC X(8)  VALUE 'FAPRP0M2'.; ; 01 MESSAGES-RETURNED.; 05 MSG-NOT-FOUND        PIC X(30) VALUE; 'RECORD NOT FOUND       '.; 05 MSG-DUP-REC         PIC X(30) VALUE; 'INSERTING DUPLICATE RECORD  '.; ; 01 RESULT-CODE           PIC X  VALUE SPACES.; ; 01 SUBSCRIPTS.; 05 K              PIC 99 VALUE 1.; 05 J              PIC 99 VALUE 1.; 05 L              PIC 99 VALUE ZERO.; ; 01 LENGTHS.; 05 KEY-LEN-FWMM01       PIC S9(8) BINARY VALUE 37.; 05 LENGTH-FWMM01-RECORD    PIC S9(4) VALUE +541.; 05 KEY-LEN-FG0301       PIC S9(8) BINARY VALUE 32.; 05 LENGTH-FG0301-RECORD    PIC S9(4) VALUE +60.; ; ; 01 FG03-DDN           PIC X(8)  VALUE 'FG0301 '.; 01 FG0301-KEY.; 05 FG0301-ID        PIC X(9).; 05 FG0301-PATIENT-CODE   PIC X.; 05 FG0301-BEGIN-DATE    PIC 9(5).; 05 FG0301-PLAN-CODE    PIC 999.; 05 FG0301-CLAIM-NUMBER   PIC X(14).; ; 01 OTHER-FIELDS.; 05 WS-RESP       COMP  PIC S9(08) VALUE +0.; 05 WS-FEP-DATE          PIC 9(5).; 05 WS-PROCESS-DATE.; 10 WS-PROCESS-MM        PIC X(02).; 10 WS-PROCESS-DD        PIC X(02).; 10 WS-PROCESS-CCYY       PIC X(04).; 05 HOLD-EIBDATE          PIC 9(7) VALUE 0.; 05 HOLD-EIBDATE-REDEF REDEFINES HOLD-EIBDATE.; 08 HOLD-EIBDATE-CC       PIC 99.; 08 HOLD-EIBDATE-YY       PIC 99.; 08 HOLD-EIBDATE-JUL      PIC 999.; ; %%% 10/09/2010 TT 253840 DENIED PURGED CLM RESTORE - BEGIN BLOCK; 01 WS-SWITCHES.; 04 WS-ADJUD-CLAIM-FOUND-SW     PIC X(01).; 88 ADJUD-CLAIM-FOUND           VALUE 'Y'.; %%% 10/09/2010 TT 253840 DENIED PURGED CLM RESTORE - END BLOCK; ; DATE CONVERSION FIELDS; EXEC SQL INCLUDE SQLCA   END-EXEC SUPPRESS.; EXEC SQL INCLUDE FWEDDTCV END-EXEC.; EXEC SQL INCLUDE FADJCLM  END-EXEC.; %%% 10/09/2010 TT 253840 DENIED PURGED CLM RESTORE - BEGIN BLOCK; EXEC SQL INCLUDE FCLMSFAC END-EXEC.; %%% 10/09/2010 TT 253840 DENIED PURGED CLM RESTORE - END BLOCK; ; ----------------------------------------------------------------; FY71P0ME DATA AREA ERROR LOG; ----------------------------------------------------------------; COPY FWG07792.; ; ABNORMAL TERMINATION FIELDS; 01 WS-ABEND-RESPONSE.; COPY FA99XF03.; ; 01 WS-CONV-DATE.; 05 WS-MDCY.; 10 WS-M-1         PIC XX.; 10 FILLER         PIC X VALUE '/'.; 10 WS-D-1         PIC XX.; 10 FILLER         PIC X VALUE '/'.; 10 WS-CC-YY-1.; 15 WS-CC-1       PIC XX.; 15 WS-YY-1       PIC XX.; 05 WS-CYMD.; 10 WS-CC-YY-2.; 15 WS-CC-2       PIC XX.; 15 WS-YY-2       PIC XX.; 10 FILLER         PIC X VALUE '-'.; 10 WS-M-2         PIC XX.; 10 FILLER         PIC X VALUE '-'.; 10 WS-D-2         PIC XX.; ; 01 FWMM-FCB.; 04 FWMM-DDN           PIC X(8)  VALUE 'FWMM01 '; 04 FWMM-DSN           PIC X(8)  VALUE 'FWMM01 '; 04 FWMM-STATUS         PIC X.; 88 FWMM-IS-NORMAL        VALUE 'A'.; 04 FWMM-OPT-1          PIC X   VALUE ' '.; 88 READ-FWMM-FOR-UPDATE     VALUE 'A'.; 88 READ-FWMM-ONLY        VALUE 'B'.; 04 FWMM-OPT-2          PIC X   VALUE ' '.; 88 RETURN-FWMM-ADDRESS     VALUE 'A'.; 04 FWMM-OPT-3          PIC X   VALUE ' '.; 04 FWMM-ADDRESS         PIC X(04) VALUE LOW-VALUE.; 04 FILLER            PIC X(16) VALUE ' '.; ; ------------------------------------------------------------; 01 FWMM-RECORD.; COPY FWMMWK01.; ; ; ******  FG0301 CLAIM PURGE -- WRITE; COPY FWG19012.; ; /; LINKAGE SECTION.; ; 01 FAPRP0M2-PARMS.; 05 FAPRP0M2-MESSAGE-AREA.; 10 FAPRP0M2-RESPONSE       PIC X.; 88 FAPRP0M2-ERROR       VALUE 'E'.; 88 FAPRP0M2-RESTORED     VALUE 'R'.; 88 FAPRP0M2-DUPLICATE     VALUE 'D'.; 88 FAPRP0M2-FAILED      VALUE 'N'.; 88 FAPRP0M2-SUCCESS      VALUE 'Y'.; 10 FAPRP0M2-MESSAGE        PIC X(30).; 05 FAPRP0M2-CODER-ID         PIC X(2).; 05 FAPRP0M2-REQ-PLAN-CODE       PIC X(3).; 05 FAPRP0M2-REQ-SUBMIT-DATE      PIC X(10).; 05 FAPRP0M2-CONTRACT-ID        PIC X(8).; %%% 10/09/2010 TT 253840 DENIED PURGED CLM RESTORE - BEGIN BLOCK; 05 FAPRP0M2-CLAIM-TYPE        PIC X.; %%% 10/09/2010 TT 253840 DENIED PURGED CLM RESTORE - END BLOCK; 05 FAPRP0M2-RECORD-PLAN-CD      PIC X(3).; 05 FAPRP0M2-BEGIN-DATE        PIC X(10).; 05 FAPRP0M2-OPTION-NUM        PIC X(2).; 05 FAPRP0M2-CLAIM-NUMBER       PIC X(14).; 05 FAPRP0M2-PATIENT-CODE       PIC X.; ; ; 01 LK-FAPR-RESPONSE-LEN          PIC 9(6).; ; 01 INPUT-OUTPUT-PARMS           PIC X(03; ; PROCEDURE DIVISION  USING FAPRP0M2-PARMS; LK-FAPR-RESPONSE-LEN; INPUT-OUTPUT-PARMS., 

FAPRP0M3.CBL, 05 FH02DTE1-MODULE       PIC X(08)  VALUE 'FH02DTE1'; 05 FH02DTE2-MODULE       PIC X(08)  VALUE 'FH02DTE2'

FAQSP0M0.CBL, PROGRAM:   FAQSP0M0; FUNCTION: VALIDATES THE CONTRACT ID / SSN / CSACSF NUMBER.; ; RECEIVE CONTRACT ID / SSN / CSF FROM CALLING PROGRAM; ; VERIFY THE CONTRACT ID / SSN / CSF IS VALID.; ; IF THE CONTRACT IS NOT VALID THEN RETURN TO THE; CALLING PROGRAM WITH ERROR RESPONSE.; ; IF THE CONTRACT IS VALID THEN RETRIEVE REQUESTED; MEMBER INFO FOR ALL MEMBERS ON THE SPECIFIED CONTRAC; . SELECTED DATA ELEMENTS ARE THEN PASSED BACK; TO THE CALLING PROGRAM. A TWO-BYTE MEMBER COUNT; FIELD, CONTAINING A COUNT OF MEMBERS RETURNED, WILL; PRECEED THE LIST. MAXIMUM NUMBER OF MEMBERS RETURNE; IS 26., 

FAWCP0M0.CBL, PROGRAM:   FAWCP0M0 - FEP ENROLLMENT WORKERS COMP DRIVER.; FUNCTION: THIS MODULE IS CALLED BY THE MAIN ENROLLMENT DRIVER; FAENP0M0 THEN ROUTES RETRIEVAL REQUESTS TO FAWCP0M2; AND ALL OTHER REQUESTS TO FAWCP0M1., 

FAWCP0M1.CBL, PROGRAM:  FAWCP0M1; CALLED PROGRAMS:; ; PROCESSING STEPS:; ; ERROR REPLY MESSAGES:; ; INVALID TRANSACTION CODE REQUESTED; NO MEMBERS ELIGIBLE ON A REQUESTED CONTRACT; MULTIPLE ELIGIBLE RECORDS FOUND ON A REQUESTED CONTRACT; NO MEMBERS FOUND ON A REQUESTED CONTRACT; NO CROSS PLAN CODE FOUND ON A REQUESTED PPO CONTRACT; ; DATABASE TABLES:; DCLGEN  - TABLE NAME (ACCESS); --------  --------------------------------------------; FOTHPTYL - OTHER PARTY LIABILITY (READ); FWRKSBNF - WORKER SUB NOFAULT (READ); FMBRELIG - MEMBER ELIGIBILTY (READ); FCARRIER - CARRIER (READ); FDLYTRNS - DAILY TRANSACTION (INSERT); ; COPY MEMBERS:; ------------; FWEDCNST - COMMON PROGRAM CONSTANTS; FWEDDTCV - WORKING STORAGE FOR CONVERTING A DB2 DATE TO; JULIAN DATE FORMAT; FWEDFXUE - WORKING STORAGE FOR ERROR ROUTINE; FE99XF01 - STANDARD WORK AREA; FSWCXF01 - WORKER/SUB/NOFAULT FORMAT FOR COMMON EDIT; FWEPDTCV - LOGIC TO CONVERT DB2 DATE TO JULIAN DATE FORMAT; SQLCA  - SQL COMMUNICATIONS AREA, HOUSEKEEPING FUNCTIONS, 

FBK0P0IV.CBL, ENROLLMENT PROCESSING.; ; FUNCTIONS :; CONTRACT ID VERIFICATION; POS VERIFICATION; ADDRESS RETRIEVAL; PATIENT ROSTER PROCESSING; PATIENT DATA PROCESSING; CONTRACT NAME & ADDRESS RETRIEVAL; HIPAA PRIVACY, === MAINLINE, === GET CONTRACT HOLDER, === RETRIEVE ADDRESS, === PATIENT ROSTER, === BUILD PATIENT ROSTER, === BUILD PATIENT DATA, === RETRIEVE MEMBER ID OF CONTRACT HOLDER, 00040                                  00004200; 00041 DATA DIVISION.                          00004300; 00042                                  00004400; 00043 WORKING-STORAGE SECTION.                     00004500; 000435 77 PAN-VALET PICTURE X(24) VALUE '001FBK0P0IV 10/08/03'.    00004600; 00044                                  00004700; 00045 01 DB2-RETURN-CODES.                      00004800; 00046   05 ZERO-RETURNED        PIC S9(09) USAGE COMP    00004900; 00047                         VALUE ZERO.   00005000; 00048   05 NOT-FOUND          PIC S9(09) USAGE COMP    00005100; 00049                         VALUE 100.    00005200; 00050                                  00005300; 00051 01 SUBSCRIPTS.                         00005400; 00052   05 I              PIC 9(02)  VALUE 1.     00005500; 00053                                  00005600; 00055   05 FXCTP0M0-MODULE       PIC X(08)  VALUE 'FXCTP0M0'.00005800; 00056   05 FXADP0M0-MODULE       PIC X(08)  VALUE 'FXADP0M0'.00005900; 00057   05 FXMMP0M0-MODULE       PIC X(08)  VALUE 'FXMMP0M0'.00006000; 00058   05 FX71VIII-MODULE       PIC X(08)  VALUE 'FX71VIII'.00006100; 00059   05 FX71P0M3-MODULE       PIC X(08)  VALUE 'FX71P0M3'.00006200; 00061 01 MESSAGES.                          00006400; 00062   05 REC-NOT-FOUND-MSG      PIC X(30)  VALUE      00006500; 00063     'RECORD NOT FOUND'.                    00006600; 00064   05 INVALID-PARM-MSG      PIC X(30)  VALUE      00006700; 00065     'INVALID PARM DATA'.                   00006800; 00066   05 NOT-VERIFIED-MSG      PIC X(30)  VALUE      00006900; 00067     'NOT VERIFIED'.                      00007000; 00068   05 AWAIT-VERIF-MSG       PIC X(30)  VALUE      00007100; 00069     'AWAIT VERIFICATION'.                   00007200; 00070   05 DB-ACCESS-FAIL-MSG     PIC X(30)  VALUE      00007300; 00071     'DB ACCESS FAILED -CALL SYSTEMS'.             00007400; 00072                                  00007500; 00073 01 DATES.                            00007600; 00074   05 WORK-DATE.                        00007700; 00075     10 WORK-DATE-CCYY     PIC X(04).          00007800; 00076     10             PIC X.            00007900; 00077     10 WORK-DATE-MM      PIC X(02).          00008000; 00078     10             PIC X.            00008100; 00079     10 WORK-DATE-DD      PIC X(02).          00008200; 00080                                  00008300; 00081   05 MMCCYY-DATE.                       00008400; 00082     10 MMCCYY-DATE-MM     PIC X(02).          00008500; 00083     10 MMCCYY-DATE-CCYY    PIC X(04).          00008600; 00084                                  00008700; 00085   05 MMDDCCYY-DATE.                      00008800; 00086     10 MMDDCCYY-DATE-MM    PIC X(02).          00008900; 00087     10 MMDDCCYY-DATE-DD    PIC X(02).          00009000; 00088     10 MMDDCCYY-DATE-CCYY   PIC X(04).          00009100; 00089                                  00009200; 00090 01 WORK-ZIP.                          00009300; 00091   10               PIC X(05).          00009400; 00092   10 ZIP-LAST-4         PIC X(04).          00009500; 00093     88 ZIP-LAST-4-ZEROES         VALUE '0000'.   00009600; 00094                                  00009700; 00095 01 WS-MEMBER-ID          PIC S9(9) USAGE COMP.    00009800; 00096                                  00009900; 00097 01 FX71P0M3-PARMS.                       00010000; 00098   05 FX71P0M3-MESSAGE-AREA.                  00010100; 00099     10 FX71P0M3-RESPONSE    PIC X.            00010200; 00100       88 FX71P0M3-ERROR         VALUE 'E'.; 00101       88 FX71P0M3-FAILED        VALUE 'N'.; 00102       88 FX71P0M3-SUCCESS        VALUE 'Y'.; 00103     10 FX71P0M3-MESSAGE    PIC X(30).; 00104   05 FX71P0M3-COUNTRY      PIC X(15).; 00105   05 FX71P0M3-COUNTRY-CODE    PIC X(03).; 00106 01 WK-COUNTRY.; 05 WK-COUNTRY-CODE-999     PIC 999.; 05 WK-COUNTRY-CODE-XXX; REDEFINES WK-COUNTRY-CODE-999 PIC XXX.; ; **  05 WK-COUNTRY-ALL.; **    10 WK-COUNTRY-CODE     PIC XXX.; **    10 FILLER         PIC X(12).; 00110; 00111 01 DATES.; 00112   05 HIPAA-DATE.; 00113     10 HIPAA-YYYY     PIC X(4).; 00114     10 HIPAA-MM      PIC X(2).; 00115     10 HIPAA-DD      PIC X(2).; 00116   05 CICS-MMDDCCYY.; 00117     10 CICS-MM       PIC X(02) VALUE SPACES.; 00118     10 CICS-DD       PIC X(02) VALUE SPACES.; 00119     10 CICS-CCYY      PIC X(04) VALUE SPACES.; 00120; 00121   05 PROCESS-DATE.; 00122     10 PROCESS-YYYY     PIC X(4).; 00123     10 FILLER        PIC X VALUE '-'.; 00124     10 PROCESS-MM      PIC X(2).; 00125     10 FILLER        PIC X VALUE '-'.; 00126     10 PROCESS-DD      PIC X(2).; 00127 01 CICS-FIELDS.; 00128   05 CICS-RBA       COMP  PIC S9(08) VALUE +0.; 00129   05 CICS-RBA1      COMP  PIC S9(08) VALUE +0.; 00130   05 CICS-RIDFLD     COMP  PIC S9(08) VALUE +0.; 00131   05 CICS-ABSTIME     COMP-3 PIC S9(15) VALUE +0.; 00132; ------------------------------------------------------------; FPRFP0M0 PARAMETER AREA; ------------------------------------------------------------; 00136   COPY FPR; 00137; ------------------------------------------------------------; CONTRACT WORK RECORD; ------------------------------------------------------------; 00141   COPY FWG07506.; 00142; ------------------------------------------------------------; DATE FORMATS; ------------------------------------------------------------; COPY FWG07515.; 00147; ------------------------------------------------------------; DB2 ABEND DATA; ------------------------------------------------------------; 00151   COPY FWG07516.; ------------------------------------------------------------; FX71P0ME DATA AREA ERROR LOG; ------------------------------------------------------------; 00155   COPY FWG07792.; 00156; 00157 01 ENROLLMENT-ELIGIBILITY.; 00158   COPY FWEDFXCO.; 00159   COPY FWEDABT1.; 00160; 00161 01 MEMBER-LIST-PARMS.; 00162   COPY FWEDFXML.; 00163   COPY FWEDABT1.; 00164; 00165 01 ADDRESS-PARMS.; 00166   COPY FWEDFXAL.; 00167   COPY FWEDABT1.; 00168; 00169 01 FX71VIII-PARMS.; 00170   05 FX71VIII-MESSAGE-AREA.; 00171     10 FX71VIII-RESPONSE     PIC X.; 00172       88 FX71VIII-ERROR          VALUE 'E'.; 00173       88 FX71VIII-FAILED         VALUE 'N'.; 00174       88 FX71VIII-SUCCESS         VALUE 'Y'.; 00175     10 FX71VIII-MESSAGE      PIC X(30).; 00176   05 FX71VIII-CONTRACT-ID      PIC 9(08).; 00177; 00178   EXEC SQL INCLUDE SQLCA END-EXEC.; 00179   EXEC SQL INCLUDE FMBRELIG END-EXEC.; 00180; 00181; 00182 LINKAGE SECTION.; 00183; ----------------------------------------------------------------; --- FBK0P0IV PARAMETERS; ----------------------------------------------------------------; 00187 01 FBK0P0IV-PARMS.; 00188   05 FBK0P0IV-FUNCTION      PIC X.; 00189     88 FBK0P0IV-VALIDATE-CONTRACT-ID VALUE '0'.; 00190     88 FBK0P0IV-GET-ADDRESS-REC   VALUE '2'.; 00191     88 FBK0P0IV-PATIENT-ROSTER    VALUE '3'.; 00192     88 FBK0P0IV-PATIENT-DATA     VALUE '4'.; 00193     88 FBK0P0IV-CNTRCT-NAME-ONLY   VALUE '5'.; 00194     88 FBK0P0IV-HIPAA-PRIVACY    VALUE '6'.; 00195   05 FBK0P0IV-CONTRACT-ID    PIC 9(08).; 00196   05 FBK0P0IV-PLAN-CODE     PIC 9(03).; 00197   05 FBK0P0IV-PATIENT-CODE    PIC X.; 00198; 00199   05 FBK0P0IV-MESSAGE-AREA.; 00200     10 FBK0P0IV-RESPONSE    PIC X.; 00201       88 FBK0P0IV-ERROR         VALUE 'E'.; 00202       88 FBK0P0IV-FAILED         VALUE 'N' '0'.; 00203       88 FBK0P0IV-SUCCESS        VALUE 'Y'.; 00204     10 FBK0P0IV-MESSAGE    PIC X(30).; 00205; OUTPUT PARMS; 00207   COPY FWG07B65.; 00208; 00209 PROCEDURE DIVISION   USING FBK0P0IV-PARMS; 00210                FWG07B65-PARMS.; 00211; 00215; 00216; 00217   SET FBK0P0IV-SUCCESS  TO TRUE.; 00218; 00219   MOVE ZEROES       TO I.; 00220; 00221   EVALUATE TRUE; 00222     WHEN FBK0P0IV-VALIDATE-CONTRACT-ID; 00223        PERFORM; 00224; 00225     WHEN FBK0P0IV-GET-ADDRESS-REC; 00226        PERFORM; 00227; 00228     WHEN FBK0P0IV-PATIENT-ROSTER; 00229        PERFORM; 00230; 00231     WHEN FBK0P0IV-PATIENT-DATA; 00232        PERFORM; 00233; 00234     WHEN FBK0P0IV-CNTRCT-NAME-ONLY; 00235        PERFORM; 00236; 00237     WHEN FBK0P0IV-HIPAA-PRIVACY; PERFORM; 00239        PERFORM; 00240; 00241   END-EVALUATE.; 00242; 00243; 00244   GOBACK.; 00245; ; R2-2007-TT71396 ADDED NUMERIC CHECK OF CONTRACT ID PRIOR TO CALL; OF FXCTP0M0.; ; 00249; 00250; 00251   INITIALIZE             ENROLLMENT-ELIGIBILITY.; 00252   MOVE FBK0P0IV-CONTRACT-ID     TO FXCO-I-CONTRACT-ID; 00253   MOVE 'V'              TO FXCO-I-FUNCTION-CODE; 00253   IF FXCO-I-CONTRACT-ID NOT NUMERIC; 00253     MOVE +10 TO SWS-ABT-RETURN-CODE OF ENROLLMENT-ELIGIBILIT; 00253   ELSE; 00254     PERFORM U100-LINK-FXCTP0M0      THRU U100-EXIT; 00255   END-IF; 00255; 00256   EVALUATE SWS-ABT-RETURN-CODE    OF ENROLLMENT-ELIGIBILIT; ; Q3-382960-SI-BEGIN FOLLOWING LINES ARE TO DELETED AND ONLY THE; RETURN CODE NEEDS TO BE CHECKED FOR VERIFICATION; ; DEL WHEN ZERO; DEL    IF FXCO-O-VERIF-IND      = ' '; DEL      MOVE 'N'         TO FBK0P0IV-RESPONSE; DEL      MOVE AWAIT-VERIF-MSG   TO FBK0P0IV-MESSAGE; DEL    END-IF; DEL    IF FXCO-O-VERIF-IND      = '1'; DEL      MOVE 'N'         TO FBK0P0IV-RESPONSE; DEL      MOVE NOT-VERIFIED-MSG  TO FBK0P0IV-MESSAGE; DEL    END-IF; DEL    IF FXCO-O-VERIF-IND      = '2'; DEL      PERFORM 1100-GET-MEMBER-ID     THRU 1100-EXI; DEL    END-IF; DEL; DEL; Q3-382960-SI-END; ; 00277   WHEN ZERO; 00278      PERFORM 1100-GET-MEMBER-ID     THRU 1100-EXIT; 00279   WHEN 10; 00280      MOVE 'N'           TO FBK0P0IV-RESPONSE; 00281      MOVE REC-NOT-FOUND-MSG    TO FBK0P0IV-MESSAGE; 00282   WHEN -5; 00283      MOVE 'N'           TO FBK0P0IV-RESPONSE; 00284      MOVE INVALID-PARM-MSG    TO FBK0P0IV-MESSAGE; 00285   WHEN OTHER; 00286      MOVE 'E'           TO FBK0P0IV-RESPONSE; 00287      MOVE DB-ACCESS-FAIL-MSG   TO FBK0P0IV-MESSAGE; 00288      INITIALIZE            FX71P0ME-PARMS; 00289      MOVE 'FBK00V'         TO FX71P0ME-PGM-PREFIX; 00290      MOVE '01'           TO FX71P0ME-MSG-NO; 00291      MOVE DB-ACCESS-FAIL-MSG    TO FX71P0ME-MESSAGE-TEXT; 00292      PERFORM U999-LOG-ERROR THRU U999-EXIT; 00293   END-EVALUATE.; 00294; 00295; 00296   EXIT.; 00297; 00298 1100-GET-MEMBER-ID.; 00299; 00300   MOVE FBK0P0IV-CONTRACT-ID     TO FXCO-I-CONTRACT-ID; 00301   MOVE 'C'              TO FXCO-I-FUNCTION-CODE; 00302   PERFORM U100-LINK-FXCTP0M0         THRU U100-EXIT; 00303; 00304   EVALUATE SWS-ABT-RETURN-CODE    OF ENROLLMENT-ELIGIBILIT; 00305   WHEN ZERO; ------------------------------------------------------------; -- GET CONTRACT HOLDER ADDRESS; ------------------------------------------------------------; 00309    MOVE FXCO-O-CT-HLDR-MBR-ID   TO WS-MEMBER-ID; 00310    PERFORM 1200-GET-CNT-HOLDER    THRU 1200-EXIT; 00311   WHEN 10; 00312      MOVE 'N'           TO FBK0P0IV-RESPONSE; 00313      MOVE REC-NOT-FOUND-MSG    TO FBK0P0IV-MESSAGE; 00314   WHEN -5; 00315      MOVE 'N'           TO FBK0P0IV-RESPONSE; 00316      MOVE INVALID-PARM-MSG    TO FBK0P0IV-MESSAGE; 00317   WHEN OTHER; 00318      MOVE 'E'           TO FBK0P0IV-RESPONSE; 00319      MOVE DB-ACCESS-FAIL-MSG   TO FBK0P0IV-MESSAGE; 00320      INITIALIZE            FX71P0ME-PARMS; 00321      MOVE 'FBK00V'         TO FX71P0ME-PGM-PREFIX; 00322      MOVE '02'           TO FX71P0ME-MSG-NO; 00323      MOVE DB-ACCESS-FAIL-MSG    TO FX71P0ME-MESSAGE-TEXT; 00324      PERFORM U999-LOG-ERROR THRU U999-EXIT; 00325   END-EVALUATE.; 00326; 00327 1100-EXIT.; 00328   EXIT.; 00329; 00333 1200-GET-CNT-HOLDER.; 00334; 00335   INITIALIZE             MEMBER-LIST-PARMS.; 00336   MOVE WS-MEMBER-ID         TO FXMM-I-MEMBER-ID; 00337   MOVE 'M'             TO FXMM-I-FUNCTION-CODE; 00338   PERFORM U200-LINK-FXMMP0M0         THRU U200-EXIT; 00339; 00340   EVALUATE SWS-ABT-RETURN-CODE OF MEMBER-LIST-PARMS; 00341   WHEN ZERO; 00342    MOVE 'Y'            TO FBK0P0IV-RESPONSE; 00343                      FWG07B65-CT-HLDR-RESP-V; 00344    MOVE FXMM-O-FIRST-NAME   (1) TO FWG07B65-CT-HLDR-NAME-1; 00345    MOVE FXMM-O-MIDDLE-INITIAL (1) TO FWG07B65-CT-HLDR-MIDINI; 00346    MOVE FXMM-O-LAST-NAME   (1) TO FWG07B65-CT-HLDR-NAME-2; 00347   WHEN 10; 00348    MOVE 'N'            TO FBK0P0IV-RESPONSE; 00349    MOVE REC-NOT-FOUND-MSG     TO FBK0P0IV-MESSAGE; 00350   WHEN OTHER; 00351    MOVE 'E'            TO FBK0P0IV-RESPONSE; 00352    MOVE DB-ACCESS-FAIL-MSG    TO FBK0P0IV-MESSAGE; 00353   END-EVALUATE.; 00354; 00355 1200-EXIT.; 00356   EXIT.; 00357; 00358 1500-GET-MEMBER-ID.; 00359; 00360   MOVE FBK0P0IV-CONTRACT-ID   TO CONTRACT-ID; 00361                   OF DCLMEMBER-ELIGIBILITY; 00362   MOVE FBK0P0IV-CONTRACT-ID(7:1) TO PARTITION; 00363                   OF DCLMEMBER-ELIGIBILITY; 00364   MOVE FBK0P0IV-PATIENT-CODE   TO PATIENT-CODE; 00365                   OF DCLMEMBER-ELIGIBILITY.; 00366; 00367   EXEC SQL; SELECT MEMBER_ID; INTO :WS-MEMBER-ID; FROM MEMBER_ELIGIBILITY; WHERE CONTRACT_ID = :DCLMEMBER-ELIGIBILITY.CONTRACT-ID; AND "PARTITION" =:DCLMEMBER-ELIGIBILITY.PARTITION; AND PATIENT_CODE = :DCLMEMBER-ELIGIBILITY.PATIENT-CODE; FETCH FIRST 1 ROW ONLY; 00379   END-EXEC.; 00380; 00381   EVALUATE SQLCODE; 00382    WHEN ZERO-RETURNED; 00383       CONTINUE; 00384    WHEN NOT-FOUND; 00385       MOVE REC-NOT-FOUND-MSG TO FBK0P0IV-MESSAGE; 00386    WHEN OTHER; 00387       SET  FBK0P0IV-ERROR   TO TRUE; 00388       MOVE DB-ACCESS-FAIL-MSG TO FBK0P0IV-MESSAGE; 00389       INITIALIZE         FX71P0ME-PARMS; 00390       MOVE 'FX710D'      TO FX71P0ME-PGM-PREFIX; 00391       MOVE '11'        TO FX71P0ME-MSG-NO; 00392       MOVE SQLCA        TO FX71P0ME-SQLCA; 00393       PERFORM U999-LOG-ERROR  THRU U999-EXIT; 00394   END-EVALUATE.; 00395; 00396 1500-EXIT.; 00397   EXIT.; 00398; 00402; 00403; ----------------------------------------------------------------; -- GET CONTRACT HOLDER NAME; ----------------------------------------------------------------; 00407   MOVE FBK0P0IV-CONTRACT-ID     TO FXCO-I-CONTRACT-ID; 00408   MOVE 'C'             TO FXCO-I-FUNCTION-CODE; 00409   PERFORM U100-LINK-FXCTP0M0         THRU U100-EXIT; 00410; 00411   EVALUATE SWS-ABT-RETURN-CODE   OF ENROLLMENT-ELIGIBILITY; 00412   WHEN ZERO; ------------------------------------------------------------; -- GET CONTRACT HOLDER ADDRESS; ------------------------------------------------------------; 00416    MOVE FXCO-O-CT-HLDR-LAST-NAME TO CWR-CT-HLDR-LAST-NAME; 00417    MOVE FXCO-O-CT-HLDR-MBR-ID   TO CWR-CT-HLDR-MBR-ID; 00418    MOVE FXCO-O-INACTIVE-DATE TO CWR-CT-HLDR-INACTIVE-DATE; 00419; 00420    PERFORM; 00421; 00422   WHEN 10; 00423    MOVE '0'          TO FBK0P0IV-RESPONSE; 00424    MOVE REC-NOT-FOUND-MSG   TO FBK0P0IV-MESSAGE; 00425   WHEN -5; 00426    MOVE '0'          TO FBK0P0IV-RESPONSE; 00427    MOVE INVALID-PARM-MSG   TO FBK0P0IV-MESSAGE; 00428   WHEN OTHER; 00429    MOVE 'E'          TO FBK0P0IV-RESPONSE; 00430    MOVE DB-ACCESS-FAIL-MSG  TO FBK0P0IV-MESSAGE; 00431    INITIALIZE           FX71P0ME-PARMS; 00432    MOVE 'FBK00V'        TO FX71P0ME-PGM-PREFIX; 00433    MOVE '03'          TO FX71P0ME-MSG-NO; 00434    MOVE DB-ACCESS-FAIL-MSG   TO FX71P0ME-MESSAGE-TEXT; 00435    PERFORM U999-LOG-ERROR THRU U999-EXIT; 00436   END-EVALUATE.; 00437; 00438; 00439   EXIT.; 00440; 00444; 00445; 00446   INITIALIZE             MEMBER-LIST-PARMS.; 00447   MOVE FBK0P0IV-CONTRACT-ID     TO FXMM-I-CONTRACT-ID; 00448   MOVE 'L'             TO FXMM-I-FUNCTION-CODE; 00449   PERFORM U200-LINK-FXMMP0M0         THRU U200-EXIT; 00450; 00451   EVALUATE SWS-ABT-RETURN-CODE   OF MEMBER-LIST-PARMS; 00452   WHEN ZERO; 00453    PERFORM 4100-BUILD-PATIENT-ROSTER     THRU 4100-EXIT; 00454         VARYING I FROM 1 BY 1; 00455          UNTIL FXMM-O-PATIENT-CODE (I) < 'A'; 00456           OR I > 26; 00457    SUBTRACT 1 FROM I; 00458    MOVE I          TO FWG07B65-NO-CT-PATIENT; 00459; 00460    MOVE FBK0P0IV-CONTRACT-ID TO FX71VIII-CONTRACT-ID; 00461    CALL FX71VIII-MODULE  USING DFHEIBLK; 00462                    DFHCOMMAREA; 00463                    FX71VIII-PARMS; 00464                    FWG07B65-PARMS; 00465; 00466   WHEN 10; 00467    MOVE '0'         TO FBK0P0IV-RESPONSE; 00468    MOVE REC-NOT-FOUND-MSG  TO FBK0P0IV-MESSAGE; 00469   WHEN OTHER; 00470    MOVE 'E'         TO FBK0P0IV-RESPONSE; 00471    MOVE DB-ACCESS-FAIL-MSG TO FBK0P0IV-MESSAGE; 00472    INITIALIZE           FX71P0ME-PARMS; 00473    MOVE 'FBK00V'        TO FX71P0ME-PGM-PREFIX; 00474    MOVE '04'          TO FX71P0ME-MSG-NO; 00475    MOVE DB-ACCESS-FAIL-MSG   TO FX71P0ME-MESSAGE-TEXT; 00476    PERFORM U999-LOG-ERROR THRU U999-EXIT; 00477   END-EVALUATE.; 00478; 00479; 00480   EXIT.; 00481; 00485 4100-BUILD-PATIENT-ROSTER.; 00486; 00487   MOVE FXMM-O-PATIENT-CODE (I) TO FWG07B65-PAT-CODE (I); 00488   MOVE FXMM-O-FIRST-NAME  (I) TO FWG07B65-PAT-FIRST-NAME(I); 00489   MOVE FXMM-O-LAST-NAME  (I) TO FWG07B65-PAT-LAST-NAME (I); 00490   MOVE FXMM-O-BIRTH-DATE  (I) TO WORK-DATE; 00491   MOVE WORK-DATE-MM      TO MMDDCCYY-DATE-MM; 00492   MOVE WORK-DATE-DD      TO MMDDCCYY-DATE-DD; 00493   MOVE WORK-DATE-CCYY     TO MMDDCCYY-DATE-CCYY; 00494   MOVE MMDDCCYY-DATE      TO FWG07B65-PAT-BIRTH-DATE(I); 00495; 00496   IF FXMM-O-SEX-RELATIONSHIP (I)   = 1 OR 3 OR 5 OR 7; 00497     MOVE 'M'         TO FWG07B65-PAT-GENDER (I); 00498   ELSE; 00499     MOVE 'F'         TO FWG07B65-PAT-GENDER (I); 00500   END-IF; 00501   MOVE SPACES         TO FWG07B65-PAT-STATUS (I).; 00502; 00503 4100-EXIT.; 00504   EXIT.; 00505; 00509; 00510; 00511   INITIALIZE             MEMBER-LIST-PARMS.; 00512   MOVE FBK0P0IV-CONTRACT-ID     TO FXMM-I-CONTRACT-ID; 00513   MOVE FBK0P0IV-PATIENT-CODE    TO FXMM-I-PATIENT-CODE; 00514   MOVE 'M'             TO FXMM-I-FUNCTION-CODE; 00515   PERFORM U200-LINK-FXMMP0M0         THRU U200-EXIT; 00516; 00517   EVALUATE SWS-ABT-RETURN-CODE   OF MEMBER-LIST-PARMS; 00518   WHEN ZERO; 00519    MOVE 'Y '            TO FWG07B65-NO-CT-PATIEN; 00520    PERFORM 5100-BUILD-PATIENT-DATA      THRU 5100-EXIT; 00521   WHEN 10; 00522    MOVE '00'            TO FWG07B65-NO-CT-PATIEN; 00523    MOVE REC-NOT-FOUND-MSG     TO FBK0P0IV-MESSAGE; 00524   WHEN OTHER; 00525    MOVE 'EE'            TO FWG07B65-NO-CT-PATIEN; 00526    MOVE DB-ACCESS-FAIL-MSG     TO FBK0P0IV-MESSAGE; 00527    INITIALIZE              FX71P0ME-PARMS; 00528    MOVE 'FBK00V'          TO FX71P0ME-PGM-PREFIX; 00529    MOVE '05'            TO FX71P0ME-MSG-NO; 00530    MOVE DB-ACCESS-FAIL-MSG     TO FX71P0ME-MESSAGE-TEXT; 00531    PERFORM U999-LOG-ERROR THRU U999-EXIT; 00532   END-EVALUATE; 00533    .; 00534; 00535   EXIT.; 00536; 00540 5100-BUILD-PATIENT-DATA.; 00541; 00542   MOVE FXMM-O-PATIENT-CODE (1) TO FWG07B65-PAT-CODE (1); 00543   MOVE FXMM-O-FIRST-NAME  (1) TO FWG07B65-PAT-FIRST-NAME(1); 00544   MOVE FXMM-O-LAST-NAME  (1) TO FWG07B65-PAT-LAST-NAME (1); 00545   MOVE FXMM-O-BIRTH-DATE  (1) TO WORK-DATE; 00546   MOVE WORK-DATE-MM      TO MMDDCCYY-DATE-MM; 00547   MOVE WORK-DATE-DD      TO MMDDCCYY-DATE-DD; 00548   MOVE WORK-DATE-CCYY     TO MMDDCCYY-DATE-CCYY; 00549   MOVE MMDDCCYY-DATE      TO FWG07B65-PAT-BIRTH-DATE(1); 00550; 00551   IF FXMM-O-SEX-RELATIONSHIP (1) = 1 OR 3 OR 5 OR 7; 00552     MOVE 'M'         TO FWG07B65-PAT-GENDER (1); 00553   ELSE; 00554     MOVE 'F'         TO FWG07B65-PAT-GENDER (1); 00555   END-IF; 00556   MOVE SPACES         TO FWG07B65-PAT-STATUS (1).; 00557; 00558 5100-EXIT.; 00559   EXIT.; 00560; 00564; 00565; 00566   PERFORM 6100-RETRIEVE-MEMBER-ID      THRU 6100-EXIT.; 00567   INITIALIZE             MEMBER-LIST-PARMS.; 00568   MOVE CWR-CT-HLDR-MBR-ID     TO FXMM-I-MEMBER-ID; 00569   MOVE 'M'             TO FXMM-I-FUNCTION-CODE; 00570   PERFORM U200-LINK-FXMMP0M0         THRU U200-EXIT; 00571; 00572   EVALUATE SWS-ABT-RETURN-CODE   OF MEMBER-LIST-PARMS; 00573   WHEN ZERO; 00574    MOVE 'Y'            TO FWG07B65-CT-HLDR-RESP-V; 00575    MOVE FXMM-O-FIRST-NAME   (1) TO FWG07B65-CT-HLDR-NAME-1; 00576    MOVE FXMM-O-MIDDLE-INITIAL (1) TO FWG07B65-CT-HLDR-MIDINI; 00577    MOVE FXMM-O-LAST-NAME   (1) TO FWG07B65-CT-HLDR-NAME-2; 00578   WHEN 10; 00579    MOVE 'N'          TO FWG07B65-CT-HLDR-RESP-V; 00580    MOVE REC-NOT-FOUND-MSG   TO FBK0P0IV-MESSAGE; 00581   WHEN OTHER; 00582    MOVE 'E'          TO FWG07B65-CT-HLDR-RESP-V; 00583    MOVE DB-ACCESS-FAIL-MSG   TO FBK0P0IV-MESSAGE; 00584    INITIALIZE           FX71P0ME-PARMS; 00585    MOVE 'FBK00V'        TO FX71P0ME-PGM-PREFIX; 00586    MOVE '06'          TO FX71P0ME-MSG-NO; 00587    MOVE DB-ACCESS-FAIL-MSG   TO FX71P0ME-MESSAGE-TEXT; 00588    PERFORM U999-LOG-ERROR THRU U999-EXIT; 00589   END-EVALUATE.; 00590; 00591; 00592   EXIT.; 00593; 00597 6100-RETRIEVE-MEMBER-ID.; 00598; 00599   MOVE FBK0P0IV-CONTRACT-ID    TO FXCO-I-CONTRACT-ID; 00600   MOVE 'C'             TO FXCO-I-FUNCTION-CODE; 00601   PERFORM U100-LINK-FXCTP0M0         THRU U100-EXIT; 00602; 00603   EVALUATE SWS-ABT-RETURN-CODE   OF ENROLLMENT-ELIGIBILITY; 00604   WHEN ZERO; 00605    MOVE FXCO-O-CT-HLDR-MBR-ID   TO CWR-CT-HLDR-MBR-ID; 00606   WHEN 10; 00607    MOVE '0'         TO FWG07B65-NO-CT-ADDRESS; 00608    MOVE REC-NOT-FOUND-MSG  TO FBK0P0IV-MESSAGE; 00609   WHEN -5; 00610    MOVE '0'         TO FWG07B65-NO-CT-ADDRESS; 00611    MOVE INVALID-PARM-MSG  TO FBK0P0IV-MESSAGE; 00612   WHEN OTHER; 00613    MOVE 'E'         TO FWG07B65-NO-CT-ADDRESS; 00614    MOVE DB-ACCESS-FAIL-MSG TO FBK0P0IV-MESSAGE; 00615    INITIALIZE          FX71P0ME-PARMS; 00616    MOVE 'FBK00V'       TO FX71P0ME-PGM-PREFIX; 00617    MOVE '07'         TO FX71P0ME-MSG-NO; 00618    MOVE DB-ACCESS-FAIL-MSG  TO FX71P0ME-MESSAGE-TEXT; 00619    PERFORM U999-LOG-ERROR THRU U999-EXIT; 00620   END-EVALUATE.; 00621; 00622 6100-EXIT.; 00623   EXIT.; 00624; 00625, === SET UP ADDRESS DATA, === LINK TO FXCTP0M0, 

FBK0P0M6.CBL, 

FBK0P0M8.CBL, 2; 2

FBK0P0M9.CBL, 00021   05 FBK0P0MB-MODULE      PIC X(08) VALUE 'FBK0P0MB'.  FBK0P0M9; 00022   05 FBK0P0MC-MODULE      PIC X(08) VALUE 'FBK0P0MC'.  FBK0P0M9; 00023   05 FBK0P0M8-MODULE      PIC X(08) VALUE 'FBK0P0M8'.  FBK0P0M9; 00024   05 FX71P0ML-MODULE      PIC X(08) VALUE 'FX71P0ML'.  FBK0P0M9

FBK0P0MA.CBL, 010300   05 FH02DTE1-MODULE         PIC X(8) VALUE 'FH02DTE1'.; 010400   05 FH02DTE2-MODULE         PIC X(8) VALUE 'FH02DTE2'.

FBK0P0MB.CBL, 000026   05 FX71P0MO-MODULE       PIC X(08) VALUE 'FX71P0MO'.00003600; 000027   05 FX71P0MP-MODULE       PIC X(08) VALUE 'FX71P0MP'.00003700; 000028   05 FX71P5MO-MODULE       PIC X(08) VALUE 'FX71P5MO'.00003800=== VALIDATE PASSED FUNCTION & PROCESS, 

FBK0P0MC.CBL, 002600   05 FX71P0MO-MODULE       PIC X(08) VALUE 'FX71P0MO'; 002700   05 FX71P5MO-MODULE       PIC X(08) VALUE 'FX71P5MO'

FBK0P0MD.CBL, FUNCTION:; ---------; ; VIEW NEWS DETAIL                        00; 00110023; THIS MODULE WILL RETURN ALL NEWS ITEMS IN ORDER OF LATEST TO  00120023; EARLIEST. THE NEWS VSAM FILE WILL BE READ THRU TO THE END,   00130023; THEN READ BACKWARDS TO THE BEGINNING TO GET THE NEWS IN THE  00140023; REVERSE DATE ORDER                       00150023; 00160023; CMR  DATE    REMARKS; 362991 OCT-02   NEW FEPDIRECT IMPLEMENTATION; 173897 JAN-10   R4 FR2401 VSAM TO DB2 CONVERSION; TT283828 06/25/11 HIPAA 5010 PROJECT - RECOMPILE; TT373326 04/14/12 2011SOW20 - EXPAND CHARGE LINE FROM 40 TO 999; 01/01/13 2012SOW36 - CONTAINER CHANGE FOR OTR RECORD; DATA DIVISION.                          00240023; WORKING-STORAGE SECTION.                     00250023; 00260023; 01 MESSAGES.                          00340023; 05 NEWS-LEN-MSG         PIC X(30) VALUE      00350023; 'NO MORE OUTPUT SPACE AVAILABLE'.            00360023; 05 UNHANDLED-MSG         PIC X(30) VALUE      00370023; 'UNHANDLED ERROR HAS OCCURRED '.            00380023; ** TT173897 - R4 VSAM TO DB2 BEGIN ADD; 05 MSG-COUNT-ERR         PIC X(30) VALUE      00370023; 'COUNT QUERY FAILED IN PROGRAM '.            00380023; 05 MSG-OPEN-ERR         PIC X(30) VALUE      00370023; 'OPEN FAILED ON NEWS TRANS CSR '.            00380023; 05 MSG-FETCH-ERR         PIC X(30) VALUE      00370023; 'FETCH FAILED ON NEWS TRANS CSR'.            00380023; 05 MSG-CLOSE-ERR         PIC X(30) VALUE      00370023; 'CLOSE FAILED ON NEWS TRANS CSR'.            00380023; 05 MSG-READ-ERR         PIC X(30) VALUE      00370023; 'READ FAILED ON NEWS TRANS TBL '.            00380023; 05 MSG-DATE-ERR         PIC X(30) VALUE      00370023; 'DATE ERROR ON DB2 SYSTEM   '.            00380023; ** TT173897 - R4 VSAM TO DB2 END  ADD; 00390023; 01 ALL-COUNTERS.                        00; 04 I               PIC 9(04) VALUE ZEROES.  00410023; 04 COUNT-TIMES          PIC 9(04) VALUE ZEROES.; 04 SUB-COUNT           PIC 9(04) VALUE ZEROES.; ** TT173897 - R4 VSAM TO DB2 BEGIN ADD; 04 WS-COUNT           PIC S9(09) COMP.; 04 WS-NULL-IND          PIC S9(04) COMP-5.; ** TT173897 - R4 VSAM TO DB2 END  ADD; 00420023; 01 SWITCHES.                          00430023; 04 NEWS-EOF-SW          PIC X   VALUE 'N'.   00440023; 88 NEWS-NOT-EOF             VALUE 'N'.   00450023; 88 NEWS-EOF               VALUE 'Y'.   00460023; 04 FIRST-PASS-SW         PIC X   VALUE 'N'.; ** TT173897 - R4 VSAM TO DB2 BEGIN ADD; 04 NEWS-TRANS-FWD-SWITCH     PIC X   VALUE ' '.    01145004; 88 NEWS-TRANS-FWD-OPENED        VALUE 'O'.    01146004; 88 NEWS-TRANS-FWD-CLOSED        VALUE 'C'.    01147004; 04 NEWS-TRANS-REV-SWITCH     PIC X   VALUE ' '.    01145004; 88 NEWS-TRANS-REV-OPENED        VALUE 'O'.    01146004; 88 NEWS-TRANS-REV-CLOSED        VALUE 'C'.    01147004; ** TT173897 - R4 VSAM TO DB2 END  ADD; 00; 01 WORK-FIELDS.                         00510023; 04 MESSAGE-AREA-MAX       PIC 9(08) VALUE ZEROES.  00520023; 04 NEWS-MAX           PIC 9(04) VALUE 24.    00; 04 NEWS-PTR           PIC 9(08) VALUE ZEROES.  00530023; 04 NEWS-ITEM-TOTAL        PIC 9(08) VALUE ZEROES.  00540023; 04 NEWS-ITEM-CNT         PIC 9(04) VALUE ZEROES.  00550023; 04 WORK-DATE.                        00560023; 06 WORK-YYYY         PIC 9(04) VALUE ZEROES.  00570023; 06              REDEFINES WORK-YYYY.   00580032; 10            PIC 9(02).         00590032; 10 LEAP-YEAR-CHECK    PIC 9(02).         00; 88 LEAP-YEAR                   00610023; VALUES 00, 04, 08, 12, 16, 20,        00620023; 24, 28, 32, 36, 40, 44,        00630023; 48, 52, 56, 60, 64, 68,        00640023; 72, 76, 80, 84, 88, 92,        00650023; 96.                  00660023; 06 WORK-MM          PIC 9(02) VALUE ZEROES.  00670023; 88 THIRTY-DAY-MONTH    VALUES 04, 06, 09, 11.   00680023; 88 FEBRUARY        VALUE 02.         00690023; 06 WORK-DD          PIC 9(02) VALUE ZEROES.  00; 04 DATE-6MOS-PRIOR        PIC X(08) VALUE SPACES.  00710023; 04 WS-NINES           PIC X(06) VALUE '999999'. 00720031; 04 PAGE-SET-X          PIC X(04).; 04 PAGE-SET-N REDEFINES PAGE-SET-X; PIC 9(04).; 04 REQ-RECS-X          PIC X(04).; 04 REQ-RECS-N REDEFINES REQ-RECS-X; PIC 9(04).; 04 WS-DIFFERENCE         PIC 9(04).; ** TT173897 - R4 VSAM TO DB2 BEGIN ADD; 04 WS-S-SQLCODE           PIC S9(09).; 88 SQL-SUCCESS         VALUE; 88 SQL-ROW-NOT-FOUND      VALUE +100.; 88 SQL-DUPLICATE        VALUE -803.; 88 SQL-MORE-THAN-ONE-ROW    VALUE -811.; 88 SQL-UNIT-OF-WORK-ROLLED-BACK VALUE -911.; 88 SQL-DEADLOCK         VALUE -913.; 04 WS-CURRENT-DATE        PIC X(10).; 04 WS-CURRENT-TIME        PIC X(08).; 04 WS-TIME-STAMP         PIC X(26).; 04 WS-TS-6MOS-PRIOR       PIC X(26).; 04 WS-DEFAULT-TIME        PIC X(08) VALUE '24:00:00'.; 04 WORK-TIME.; 08 WORK-TIME-HH       PIC X(02).; 08 WORK-TIME-MM       PIC X(02).; 08 WORK-TIME-SS       PIC X(02).; 04 WORK-TS.; 08 WS-DATE.; 12 WS-YEAR        PIC X(04).; 12 FILLER        PIC X VALUE '-'.; 12 WS-MONTH       PIC X(02).; 12 FILLER        PIC X VALUE '-'.; 12 WS-DAY        PIC X(02).; 08 FILLER          PIC X VALUE '-'.; 08 WS-TIME.; 12 WS-HH         PIC X(02).; 12 FILLER        PIC X VALUE ':'.; 12 WS-MM         PIC X(02).; 12 FILLER        PIC X VALUE ':'.; 12 WS-SS         PIC X(02).; 12 WS-SS-NUM REDEFINES WS-SS.; 14 WS-SS-NUMERIC   PIC 9(02).; 08 WS-TIME-MILLI       PIC X(07) VALUE '; ** TT173897 - R4 VSAM TO DB2 END  ADD; 00750024; 01 NEWS-ITEM.                          00760023; 04 NEWS-PREFIX.                       00770023; 08 NEWS-LENGTH        PIC 9(04) VALUE ZEROES.  00780023; 08 NEWS-DATE         PIC X(08) VALUE SPACES.  00790023; 08 NEWS-TIME         PIC X(06) VALUE SPACES.  00; 04 NEWS-TEXT           PIC X(1185) VALUE SPACES. 00810023; 00820023; 00850023; FX71P0ME DATA AREA ERROR LOG                 00860023; 00870023; COPY FWG07792.                        00880023; 00890023; ** TT173897 - R4 VSAM TO DB2 BEGIN ADD; EXEC SQL  INCLUDE SQLCA   END-EXEC.; EXEC SQL  INCLUDE FNEWSTRN END-EXEC.; ; EXEC SQL; DECLARE NEWS_TRANS_FWD CURSOR FOR; SELECT FEP_NEWS_TRANS_TS,; FEP_NEWS_MSG_TXT; FROM FEP_NEWS_TRANS; WHERE FEP_NEWS_TRANS_TS > :WS-TS-6MOS-PRIOR; AND FEP_NEWS_TRANS_TS <= :WS-TIME-STAMP; ORDER BY FEP_NEWS_TRANS_TS DESC; END-EXEC.; ; EXEC SQL; DECLARE NEWS_TRANS_REV CURSOR FOR; SELECT FEP_NEWS_TRANS_TS; FROM FEP_NEWS_TRANS; WHERE FEP_NEWS_TRANS_TS >= :WS-TIME-STAMP; ORDER BY FEP_NEWS_TRANS_TS ASC; END-EXEC.; ** TT173897 - R4 VSAM TO DB2 END  ADD; ; LINKAGE SECTION.                         00; 00910023; -----------------------------------------------------------------00920023; --- FBK0P0MD PARAMETERS                     00930023; -----------------------------------------------------------------00940023; 01 FBK0P0MD-PARMS.                       00950023; 05 FBK0P0MD-NEWS-ITEMS-LENGTH   PIC S9(08) COMP.     00960023; 05 FBK0P0MD-VIEWNEWS-REQ-RECS   PIC X(04).; 05 FBK0P0MD-VIEWNEWS-PAGE-SET   PIC X(04).; 05 FBK0P0MD-VIEWNEWS-DATE     PIC X(08).; 05 FBK0P0MD-VIEWNEWS-TIME     PIC X(06).; 05 FBK0P0MD-NEWS-ITEMS-AREA.                00970023; 10 FBK0P0MD-RESPONSE     PIC X.          00980023; 88 FBK0P0MD-ERROR       VALUE 'E'.      00990023; 88 FBK0P0MD-FAILED       VALUE 'N'.      0; 88 FBK0P0MD-SUCCESS      VALUE 'Y'.      01010023; 10 FBK0P0MD-TOTAL-RECS    PIC 9(04).; 10 FBK0P0MD-NEWS-COUNT    PIC 9(04).        01020023; 05 FBK0P0MD-NEWS-ITEMS-AREA2.                00970023; 10 FBK0P0MD-NEXT-DATE     PIC X(08).; 10 FBK0P0MD-NEXT-TIME     PIC X(06).; 10 FBK0P0MD-PREV-DATE     PIC X(08).; 10 FBK0P0MD-PREV-TIME     PIC X(06).; 10 FBK0P0MD-LATEST-TIME    PIC X(06).; 01 COMMON-OUT-PARMS          PIC X(03; 01040023; PROCEDURE DIVISION          USING FBK0P0MD-PARMS    01050032; COMMON-OUT-PARMS.   01060032; 01070023, 

FBK0PCM0.CBL, COMPUTE WS-OTR-TOTL-LENGTH =; + WS-OTR-LEN28  (FUNCTION 8 + OPTION 20); + (LENGTH OF OTR-FIXED-CLAIM-PORTION); + (LENGTH OF OTR-CHARGE-LINE; + (LENGTH OF OTR-ADDITIONAL-FIELDS); + (LENGTH OF OTR-ADR-PARM-FIELDS); END-COMPUTE, 

FBK1P0M2.CBL, FUNCTION: PROCESS NEWCLAIM, 006400   05 FBK0P0IV-MODULE       PIC X(08)  VALUE 'FBK0P0IV'.; 006700   05 FX71PIII-MODULE       PIC X(08)  VALUE 'FX71PIII'.; 006800   05 FX71P0IV-MODULE       PIC X(08)  VALUE 'FX71P0IV'.

FBK1P0M4.CBL, FUNCTION: PROCESS VIEW CLAIM, 000630   05 FBK0P0M6-MODULE     PIC X(08)  VALUE 'FBK0P0M6'.; 000650   05 FBK9P0M0-MODULE     PIC X(08)  VALUE 'FBK9P0M0'.; 000730   05 FX71P0MD-MODULE     PIC X(08)  VALUE 'FX71P0MD'.; 000740   05 FX71P0MF-MODULE     PIC X(08)  VALUE 'FX71P0MF'.; 000760   05 FX71P5MA-MODULE     PIC X(08)  VALUE 'FX71P5MA'.; 000770   05 FX71P5MD-MODULE     PIC X(08)  VALUE 'FX71P5MD'.; 000780   05 FX71P5M1-MODULE     PIC X(08)  VALUE 'FX71P5M1'.; 000800   05 FX71P5M9-MODULE     PIC X(08)  VALUE 'FX71P5M9'.=== THE INPUT CHARGELINE OTR CONSISTS OF 4 PARTS :; ===    1. STANDARD 28 BYTES FOR FUNCTION/OPTION; ===    2. FIXED CLAIM AREA; ===    3. 1 TO 999 CHARGE LINES; ===    4. ADDITIONAL FIXED AREA; === ADD EACH PORTION TO THE MESSAGE AREA, ONLY ADDING; === THE NUMBER OF CHARGES THAT EXIST FOR THE CLAIM., 

FBK1P0M6.CBL, FUNCTION: PROCESS CLAIM HISTORY, @  05 FBK0P0M2-MODULE     PIC X(08)  VALUE 'FBK0P0M2'.; @  05 FBK0P1M2-MODULE     PIC X(08)  VALUE 'FBK0P1M2'.; 007800   05 FBK0P0MA-MODULE     PIC X(08)  VALUE 'FBK0P0MA'.; @  05 FK85P0M0-MODULE     PIC X(08)  VALUE 'FK85P0M0'.; @  05 FX71PIII-MODULE     PIC X(08)  VALUE 'FX71PIII'.; @  05 FX71P0IV-MODULE     PIC X(08)  VALUE 'FX71P0IV'.; @  05 FX71P0M1-MODULE     PIC X(08)  VALUE 'FX71P0M1'.; 008300   05 FX71P0M6-MODULE     PIC X(08)  VALUE 'FX71P0M6'.; @  05 FX71P0M9-MODULE     PIC X(08)  VALUE 'FX71P0M9'.; @  05 FX71P0MA-MODULE     PIC X(08)  VALUE 'FX71P0MA'.; @  05 FX71P0MG-MODULE     PIC X(08)  VALUE 'FX71P0MG'.; @  05 FX71P0MS-MODULE     PIC X(08)  VALUE 'FX71P0MS'.; @  05 FX71P0MU-MODULE     PIC X(08)  VALUE 'FX71P0MU'.; @  05 FX71P5MU-MODULE     PIC X(08)  VALUE 'FX71P5MU'.; @  05 FX71P5M2-MODULE     PIC X(08)  VALUE 'FX71P5M2'.; 009100   05 FBK0P0IV-MODULE     PIC X(08)  VALUE 'FBK0P0IV'.

FBK1P0M7.CBL, FUNCTION: PROCESS MENTAL HEALTH TRMNT, 004400   05 FBK5P5M1-MODULE     PIC X(08)  VALUE 'FBK5P5M1'.  004; 004500   05 FBK5P5M2-MODULE     PIC X(08)  VALUE 'FBK5P5M2'.  004; 004600   05 FBK5P5M3-MODULE     PIC X(08)  VALUE 'FBK5P5M3'.  004; 004700   05 FBK5P5M4-MODULE     PIC X(08)  VALUE 'FBK5P5M4'.  004; 004800   05 FBK5P5M5-MODULE     PIC X(08)  VALUE 'FBK5P5M5'.  004

FBK1P0MA.CBL, FUNCTION: PROCESS RESTART PURGE DELETE, 003700   05 FX71P5M3-MODULE     PIC X(08)  VALUE 'FX71P5M3'.

FBK1P0MB.CBL, FUNCTION: PROCESS REFUND PROCESS, CMR  DATE    REMARKS; 362991 NOV-02   NEW FEPDIRECT IMPLEMENTATION; 369169 DEC-02   YEAR END CHANGES BY VIJAY MAGANTI; RECOMPILE DUE TO CHANGES IN COPYBOOK FWG07B01; 370189 JAN-03   RECATALOG FOR YEAR END CHANGES; 354750 JUL-03   HIPAA RECOMPILE; 371743 APR-04   INCORPORATE REAL TIME MODIFICATIONS.; 407939 JAN-07   UB04/DENTAL PROJECT AND YEAR END 2006 CHANGES; 69725 AUG-07   RECOMPILE DUE TO CHANGES IN COPYBOOK FWG07B01; TT283828 06/25/11 HIPAA 5010 PROJECT - RECOMPILE; TT373326 04/14/12 2011SOW20 - EXPAND CHARGE LINE FROM 40 TO 999; 01/01/13 2012SOW36 - CONTAINER CHANGE FOR OTR RECORD; 582897 07/13/13 EM-FIX ABENDS DUE TO NO ADDRESSABILITY TO ARE; 001903; 00; 002100 WORKING-STORAGE SECTION.; 002200 77 PAN-VALET PICTURE X(24) VALUE '001FBK1P0MB 05/19/04'.; 002300; 002400 01 SUBSCRIPTS.; 002500   05 SUB           PIC 9(02)  VALUE ZEROES.; 2012SOW36 - EXPAND CHARGE LINE FROM 40 TO 999; 05 FRM-SUB      COMP PIC 9(06)  VALUE 1.; 05 MSG-SUB      COMP PIC 9(06)  VALUE ZERO.; 002800   05 FRM-SUB      COMP PIC 9(07)  VALUE 1.; 002901   05 MSG-SUB      COMP PIC 9(07)  VALUE ZERO.; 002902   05 J            PIC 9(03).; 002903; 00; 003100   05 ADD-LEN      COMP PIC S9(07) VALUE +0.; 05 WS-NUMBER-OF-CHARGES  PIC 9(03)  VALUE ZEROES.; 003300; 003500   05 FBK7P5M1-MODULE     PIC X(08)  VALUE 'FBK7P5M1'.; 003600   05 FBK7P5M2-MODULE     PIC X(08)  VALUE 'FBK7P5M2'.; 003700   05 FBK7P5M3-MODULE     PIC X(08)  VALUE 'FBK7P5M3'.; 003800   05 FBK7P5M4-MODULE     PIC X(08)  VALUE 'FBK7P5M4'.; -------------------------------------------------; REFUND WORK AREA; -------------------------------------------------; 004300   COPY FWG07B73.; 004400; %%%20120714 BEGIN ADD FWG07792; -----------------------------------------------------------; FX71P0ME DATA AREA ERROR LOG; -----------------------------------------------------------; 004440; 004450   COPY FWG07792.; %%%20120714 END ADD FWG07792; 004460; 004500 01 ADD-MSG.; 004700   05 ADD-MSG-CHAR        PIC X OCCURS 3; COPY FWG07B02.; 004900; ----------------------------------------------------------------; --- FBK7P5M1 PARAMETERS; ----------------------------------------------------------------; 005300 01 FBK7P5M1-PARMS.; 005400   05 FBK7P5M1-MESSAGE-AREA.; 005500     10 FBK7P5M1-RESPONSE     PIC X.; 005600       88 FBK7P5M1-ERROR          VALUE 'E'.; 005700       88 FBK7P5M1-FAILED          VALUE 'N'.; 005800       88 FBK7P5M1-SUCCESS         VALUE 'Y'.; 005900     10 FBK7P5M1-MESSAGE      PIC X(30).; 00; 006100   05 FBK7P5M1-FINAL-COUNT      PIC 9(06).; 006200; ----------------------------------------------------------------; --- FBK7P5M2 PARAMETERS; ----------------------------------------------------------------; 006700 01 FBK7P5M2-PARMS.; 006800   05 FBK7P5M2-MESSAGE-AREA.; 006900     10 FBK7P5M2-RESPONSE       PIC X.; 00; 007100       88 FBK7P5M2-FAILED           VALUE 'N'.; 007200       88 FBK7P5M2-SUCCESS           VALUE 'Y'.; 007300     10 FBK7P5M2-MESSAGE        PIC X(30).; 007400     10 FBK7P5M2-REFUND-ID-TBL     OCCURS 25 TIMES.; 007500       15 FBK7P5M2-REFUND-ID     PIC X(09).; 007600; ----------------------------------------------------------------; --- FBK7P5M3 PARAMETERS; ----------------------------------------------------------------; 00; 008100   05 FBK7P5M3-MESSAGE-AREA.; 008200     10 FBK7P5M3-RESPONSE     PIC X.; 008300       88 FBK7P5M3-ERROR          VALUE 'E'.; 008400       88 FBK7P5M3-FAILED          VALUE 'N'.; 008500       88 FBK7P5M3-SUCCESS         VALUE 'Y'.; 008600     10 FBK7P5M3-MESSAGE      PIC X(30).; 008700   05 FBK7P5M3-CONTRACT-ID      PIC 9(08).; 008800   05 FBK7P5M3-FINAL-COUNT      PIC 9(06).; 008900; ----------------------------------------------------------------; --- FBK7P5M4 PARAMETERS; ----------------------------------------------------------------; 009400 01 FBK7P5M4-PARMS.; 009500   05 FBK7P5M4-MESSAGE-AREA.; 009600     10 FBK7P5M4-RESPONSE     PIC X.; 009700       88 FBK7P5M4-ERROR          VALUE 'E'.; 009800       88 FBK7P5M4-FAILED          VALUE 'N'.; 009900       88 FBK7P5M4-SUCCESS         VALUE 'Y'.; 0; 010100   05 FBK7P5M4-FINAL-COUNT      PIC 9(06).; 010110; 2012SOW36 - CLE BEGIN;; YE2006 UB04 EXPEND OTR FROM 3; *>>USE OF FWG07B07 NOT EFFICIENT IN THIS CASE DUE TO 999-SIZE; *>>  REVERT SIZE/LENGTH TO PRE-UB04 CHANGE = 32K; COPY FWG07B07.; 010300 01 COMMON-OUT-PARMS          PIC X(3; 010500; 011320 01 WS-CONTAINER-FIELDS.; 011330   05 WS-LOW-VALUE    PIC X   VALUE LOW-VALUES.; 011340   05 WS-COMMAND-RESP   PIC S9(8) COMP.; 011350   05 WS-COMMAND-RESP2  PIC S9(8) COMP.; 011360   05 CURR-PGM-PREFIX   PIC X(06) VALUE 'FBK10B'.; 011370   05 WS-CHANNEL-NAME   PIC X(16) VALUE 'FBK1P0MB-CHANNEL'.; 011380   05 WS-CONTNER-NAME   PIC X(16) VALUE 'FBK1P0MB-OUT-OTR'.; 011390   05 WS-RET-RESPONSE   PIC X   VALUE SPACE.; 011391   05 IN-PARM-MAX     PIC 9(5)  VALUE 3; 011391   05 FKMQMESG-CONT-BADPARM PIC X(50) VALUE; 011391   'ERROR : WRONG PARAMETER SWITCH PASSED'.; 011392; 011393   COPY FKMQCC01.; 011395; *2012SOW36 - CLE END;; 011397; 011398/; COPY FWG07C01.; 011400; ---------------------------------------------------------; ---  OUTPUT MESSAGE; ---------------------------------------------------------; *>>USE OF FWG07B03 NOT EFFICIENT IN THIS CASE DUE TO 999-SIZE; COPY FWG07B03.; 012303 01 OUT-PARMS.; 012304   05 OUT-RESPONSE        PIC X.; 012305   05 OUT-MESSAGE.; 012306     10 OUT-MESSAGE-CHAR    PIC X OCCURS 31999 TIMES.; 012308; 012309/; 012310 LINKAGE SECTION.; 012311 01 PARM-RC           PIC 9(02).; 2012SOW36 - EXPAND CHARGE LINE FROM 40 TO 999; 01 PARM-LEN           PIC 9(06).; 012314 01 PARM-LEN           PIC 9(07).; 012315 01 PARM-REFUND-ID-TBL.; SRT582897 EM-FIX ABENDS DUE TO NO ADDRESSABILITY TO AREA; 05 PARM-REFUND-ID      PIC X(09) OCCURS 100 TIMES.; 012316   05 PARM-REFUND-ID      PIC X(09) OCCURS 201 TIMES.; 012317 01 PARM-CLAIM-TYPE-IND     PIC X.; 012318 01 PARM-REAL-TIME-IND      PIC X.; ; *>> BELOW SW NEEDED IN PARM LIST BUT THIS TRX WILL NEVER; *>> RECEIVE LONG OTR MESSAGE, SO LS-OTR-CONT-SW = N; 01 LS-OTR-CONT-SW         PIC X.; ; 012320 01 IN-PARMS            PIC X(2153).; 012321 01 IN-REFUND            REDEFINES IN-PARMS.; 012322   05 IN-FUNCTION         PIC X(08).; 012323   05 IN-OPTIONS.; 012324     10 IN-OPTION        PIC X OCCURS 20 TIMES.; 012325   05 IN-REFUND-CONTRACT-ID    PIC X(08).; 012326   05 IN-REFUND-PATIENT-CT    PIC X(03).; *>> MAY NEED TO EXPAND LATER AS PGM IS USING 15; 05 FILLER           PIC X(2114).; 012327   05 IN-REFUND-ROSTER  OCCURS 15 TIMES.; 012333     10 IN-REF-PATIENT-CD    PIC X.; 012333     10 IN-REF-FIRST-NAME    PIC X(35).; 012333     10 IN-REF-LAST-NAME    PIC X(60).; 012333     10 IN-REF-BIRTH-DATE    PIC X(08).; 012333     10 IN-REF-GENDER      PIC X.; 012333     10 IN-REF-PLAN-CODE    PIC X(03).; 012333     10 IN-REF-CLAIM-NUMBER   PIC X(14).; 012333     10 IN-REF-SVC-BEGIN-DT   PIC X(08).; 012333     10 IN-REF-CREATE-DT    PIC X(08).; 012333     10             PIC X(10).; 012333     10 IN-REF-AMOUNT-APPLIED  PIC X(10).; 012333     10 IN-REF-STATUS-CD    PIC X(03).; 012333     10 IN-REF-KEYER-ID     PIC X(08).; 012333     10 IN-REF-REFUND-ID    PIC 9(09).; 012333     10 IN-REF-EDITRSN-CD    PIC X(03).; 012333     10 IN-REF-CLM-ENTRY-CD   PIC X.; 012328; 012329 01 IN-DELETE-REFUND        REDEFINES IN-PARMS.; 012330   05               PIC X(28).; 012331   05 IN-DELETE-NO-OF-REFUNDS   PIC 9(3).; 012332   05 IN-DELETE-REFUND-DETAILS  OCCURS 200 TIMES.; 012333     10 IN-DELETE-REFUND-ID   PIC 9(09).; *>> BELOW IN-CONTAINER-PARM IS NEEDED IN PARM LIST; COPY FKMQCC02.; ; 012349   COPY FKMQCC03.; ; *>> BELOW OUT-CONTAINER DATA IS NEEDED IN LINKAGE BUT; *>>  IMPLIED ONLY IN THE PROCEDURE DIVISION AS THE; *>>  OUT-CONTAINER-PARM IS REFERENCING THIS DATA; 012352 01 LS-OUT-OTR-CONTAINER.; 012353   05 LS-OUT-OTR-CONTAINER-X  PIC X; 012354   OCCURS 0 TO 3; 012355   DEPENDING ON OUT-OTR-CONTNER-LEN.; 012356; 012600/; *>> THIS TRX WILL RECEIVE A SHORT OTR MESSAGE AND RETURN; *>>  BACK A SHORT OTR MESSAGE ALSO TO THE MAIN DRIVER.; 012700 PROCEDURE DIVISION USING PARM-RC; 012800             PARM-LEN; 012900             PARM-REFUND-ID-TBL; 01; 013100             PARM-REAL-TIME-IND; 013200             LS-OTR-CONT-SW; *            LS-OTR-SHORT-MSG; 013200             IN-PARMS; 013220             IN-OTR-CONTAINER-PARMS; 013220             OUT-OTR-CONTAINER-PARMS.; *            LS-OUT-OTR-CONTAINER.; %%%20120714 END REPLACE IN-PARMS W/ LS-SHORT-OTR-MSG &; OUT-OTR-CONTAINER-PARMS; 013300; 013400   PERFORM; 013500   PERFORM A300-REFUND-PROCESS; 013600   GO TO 9999-GOBACK; 013700   .; 013800; 013900/; 01; 014100; 014200   MOVE SPACES        TO OUT-PARMS PARM-REFUND-ID-TBL; 014300   MOVE 'S'         TO OUT-RESPONSE; 014400   MOVE 1          TO PARM-LEN; 014500   MOVE ZEROES        TO MSG-SUB SUB; 014600   .; %%%20120714 BEGIN INITIALIZE FWG07B73-PARMS, OUT-PARMS; MOVE SPACES        TO FWG07B73-PARMS; OUT-PARMS.; %%%20120714 END INITIALIZE FWG07B73-PARMS, OUT-PARMS; ; IF LS-OTR-CONT-SW = 'Y'; 014300    MOVE 'E'         TO OUT-RESPONSE; 014400    MOVE 1          TO PARM-LEN; 018500    PERFORM U970-ADD-MESSAGE; 032190    MOVE   CURR-PGM-PREFIX    TO FX71P0ME-PGM-PREFIX; 032200    MOVE   '00'          TO FX71P0ME-MSG-NO; 032300    MOVE   FKMQMESG-CONT-BADPARM TO FX71P0ME-MESSAGE-TEXT; 032400    PERFORM U999-LOG-ERROR    THRU U999-EXIT; 013600    GO TO 9999-GOBACK; END-IF.; ; 014800/; 014900 A300-REFUND-PROCESS.; 01; 015100   PERFORM VARYING SUB  FROM 1 BY 1  UNTIL SUB > 20; 015200    EVALUATE IN-OPTION (SUB); 015300     WHEN '0' PERFORM U370-GET-REFUND-ROSTER; 015400     WHEN '1' PERFORM U380-INSERT-REFUND; 015500     WHEN '2' PERFORM U390-VIEW-REFUND-ROSTER; 015600     WHEN '3' PERFORM U400-DELETE-REFUND-PROC; 015700     WHEN OTHER GO TO 9999-GOBACK; 015800    END-EVALUATE; 015900   END-PERFORM; 01; 016100; 016200/; 016300 U370-GET-REFUND-ROSTER.; 016400; 016500   INITIALIZE FBK7P5M1-PARMS.; 016600   MOVE IN-REFUND-CONTRACT-ID    TO FBK7P5M1-CONTRACT-ID.; 016700; 016800   CALL FBK7P5M1-MODULE       USING DFHEIBLK; 016900                       DFHCOMMAREA; 01; 017100                       COMMON-OUT-PARMS.; 017200; 017300   EVALUATE TRUE; 017400     WHEN FBK7P5M1-ERROR; 017500        MOVE 01            TO PARM-RC; 017600        MOVE 'E'            TO OUT-RESPONSE; 017700        MOVE LENGTH OF; 017800           FBK7P5M1-MESSAGE-AREA   TO PARM-LEN; 017900        MOVE FBK7P5M1-MESSAGE-AREA   TO OUT-PARMS; 018500        PERFORM U970-ADD-MESSAGE; 018501        GO TO 9999-GOBACK; 018502     WHEN FBK7P5M1-FAILED; 018503        MOVE LENGTH OF; 018504           FBK7P5M1-MESSAGE-AREA   TO ADD-LEN; 018505        MOVE FBK7P5M1-MESSAGE-AREA   TO ADD-MSG; 018506        PERFORM U970-ADD-MESSAGE; 018600     WHEN FBK7P5M1-SUCCESS; 018700        MOVE 1             TO ADD-LEN; 018800        MOVE 'Y'            TO ADD-MSG; 018900        PERFORM U970-ADD-MESSAGE; 01; 019100        MOVE COMMON-OUT-PARMS     TO ADD-MSG; 019200        PERFORM U970-ADD-MESSAGE; 019300   END-EVALUATE; 019400   .; 019500; 019600/; 019700 U380-INSERT-REFUND.; 019800; 016500   INITIALIZE FBK7P5M2-PARMS.; 019900   CALL FBK7P5M2-MODULE         USING DFHEIBLK; 0; 020100                          FBK7P5M2-PARMS; 020200                          FWG07B73-PARMS; 020300                          IN-REFUND.; 020400; 020500   EVALUATE TRUE; 020600     WHEN FBK7P5M2-ERROR; 020700        MOVE 01            TO PARM-RC; 020800        MOVE 'E'            TO OUT-RESPONSE; 020900        MOVE LENGTH OF; 02; 021100        MOVE FBK7P5M2-MESSAGE-AREA   TO OUT-PARMS; 021700        PERFORM U970-ADD-MESSAGE; 021701        GO TO 9999-GOBACK; 021702     WHEN FBK7P5M2-FAILED; 021703        MOVE LENGTH OF; 021704           FBK7P5M2-MESSAGE-AREA   TO ADD-LEN; 021705        MOVE FBK7P5M2-MESSAGE-AREA   TO ADD-MSG; 021706        PERFORM U970-ADD-MESSAGE; 021800     WHEN FBK7P5M2-SUCCESS; 021900        PERFORM U385-FORMAT-REAL-TIME-PARMS; 02; 022100   .; 022200; 022300 U385-FORMAT-REAL-TIME-PARMS.; 022400; 022500   MOVE 'Y' TO ADD-MSG MOVE 1 TO ADD-LEN; 022600; 022700   PERFORM U970-ADD-MESSAGE; 022800; 022900   PERFORM VARYING J FROM 1 BY 1; 02; 023100      MOVE FBK7P5M2-REFUND-ID (J) TO PARM-REFUND-ID (J); 023200   END-PERFORM; 023300; 023400   MOVE 'T' TO PARM-CLAIM-TYPE-IND; 023500   MOVE 'R' TO PARM-REAL-TIME-IND.; 023600; 023700/; 023800 U390-VIEW-REFUND-ROSTER.; 023900; 02; 024100   MOVE IN-REFUND-CONTRACT-ID    TO FBK7P5M3-CONTRACT-ID.; 024200; 024300   CALL FBK7P5M3-MODULE      USING DFHEIBLK; 024400                       DFHCOMMAREA; 024500                       FBK7P5M3-PARMS; 024600                       COMMON-OUT-PARMS.; 024700; 024800   EVALUATE TRUE; 024900     WHEN FBK7P5M3-ERROR; 02; 025100        MOVE 'E'            TO OUT-RESPONSE; 025200        MOVE LENGTH OF; 025300           FBK7P5M3-MESSAGE-AREA   TO PARM-LEN; 025400        MOVE FBK7P5M3-MESSAGE-AREA   TO OUT-PARMS; 02; 026001        GO TO 9999-GOBACK; 026002     WHEN FBK7P5M3-FAILED; 026003        MOVE LENGTH OF; 026004           FBK7P5M3-MESSAGE-AREA   TO ADD-LEN; 026005        MOVE FBK7P5M3-MESSAGE-AREA   TO ADD-MSG; 026006        PERFORM U970-ADD-MESSAGE; 026100     WHEN FBK7P5M3-SUCCESS; 026200        MOVE 1             TO ADD-LEN; 026300        MOVE 'Y'            TO ADD-MSG; 026400        PERFORM U970-ADD-MESSAGE; 026500        MOVE FBK7P5M3-FINAL-COUNT   TO ADD-LEN; 026600        MOVE COMMON-OUT-PARMS     TO ADD-MSG; 026700        PERFORM U970-ADD-MESSAGE; 026800   END-EVALUATE; 026900   .; 02; 027100/; 027200 U400-DELETE-REFUND-PROC.; 027300; 027400   INITIALIZE FBK7P5M4-PARMS.; 027500   MOVE 3              TO ADD-LEN.; 027600   MOVE IN-DELETE-NO-OF-REFUNDS   TO ADD-MSG.; 027700   PERFORM U970-ADD-MESSAGE; 027800; 027900   CALL FBK7P5M4-MODULE      USING DFHEIBLK; 02; 028100                      IN-DELETE-REFUND; 028200                      FBK7P5M4-PARMS; 028300                      COMMON-OUT-PARMS.; 028400; 028500   EVALUATE TRUE; 028600     WHEN FBK7P5M4-ERROR; 028700        MOVE 01           TO PARM-RC; 028800        MOVE 'E'          TO OUT-RESPONSE; 028900        MOVE LENGTH OF; 02; 029100        MOVE FBK7P5M4-MESSAGE-AREA TO OUT-PARMS; 029600        PERFORM U970-ADD-MESSAGE; 029601        GO TO 9999-GOBACK; 029602     WHEN FBK7P5M4-FAILED; 029603        MOVE FBK7P5M4-FINAL-COUNT  TO ADD-LEN; 029604        MOVE COMMON-OUT-PARMS    TO ADD-MSG; 029605        PERFORM U970-ADD-MESSAGE; 029700     WHEN FBK7P5M4-SUCCESS; 029800        MOVE FBK7P5M4-FINAL-COUNT  TO ADD-LEN; 029900        MOVE COMMON-OUT-PARMS    TO ADD-MSG; 0; 030100   END-EVALUATE; 030200   .; 030300; 030400/; 030500 U970-ADD-MESSAGE., 

FBK1P0MC.CBL, FUNCTION: PROCESS VIEWNEWS, 

FBK1P0MD.CBL, FUNCTION: PROCESS NEWSCHEK, 

FBK1P0ME.CBL, FUNCTION: PROCESS MAC 5 SCHEDULE, CMR  DATE    REMARKS; 22628 OCT-04   NEW FEPDIRECT INTERFACE; 407939 JAN-07   UB04/DENTAL PROJECT AND YEAR END 2006 CHANGES; 69725 AUG-07   RECOMPILE DUE TO CHANGES IN COPYBOOK FWG07B01; TT283828 06/25/11 HIPAA 5010 PROJECT - RECOMPILE; TT373326 04/14/12 2011SOW20 - EXPAND CHARGE LINE FROM 40 TO 999; 01/01/13 2012SOW36 - CONTAINER CHANGE FOR OTR RECORD; 001400; 001500 DATA DIVISION.; 001600 WORKING-STORAGE SECTION.; 001700; 001800 01 WORKERS.; 002300   05 WS-RESP      COMP PIC S9(08) VALUE +0.; 002400   05 CICS-RIDFLD       PIC S9(9) BINARY.; 002500   05 RECORD-FOUND-IND    PIC X(01).; 002600     88 NO-RECORD-FOUND   VALUE 'N'.; 002700     88 RECORD-FOUND    VALUE 'Y'.; ; ---------------------------------------------------------; ---  OUTPUT MESSAGE; ---------------------------------------------------------; 006400 01 OUT-PARMS.; 006500   05 OUT-RESPONSE      PIC X.; 05 WS-VIEW-MAC5-TABLE.; 00; 003300     10 WS-VIEW-MAC5    PIC X(71); OCCURS 400 TIMES.; 007200 COPY FMA; 007300; 011320 01 WS-CONTAINER-FIELDS.; 011330   05 WS-LOW-VALUE    PIC X   VALUE LOW-VALUES.; 011340   05 WS-COMMAND-RESP   PIC S9(8) COMP.; 011350   05 WS-COMMAND-RESP2  PIC S9(8) COMP.; 05 CURR-PGM-PREFIX   PIC X(06) VALUE 'FBK10E'.; 011370   05 WS-CHANNEL-NAME   PIC X(16) VALUE 'FBK1P0ME-CHANNEL'.; 011380   05 WS-CONTNER-NAME   PIC X(16) VALUE 'FBK1P0ME-OUT-OTR'.; 011390   05 WS-RET-RESPONSE   PIC X   VALUE SPACE.; 011391   05 IN-PARMS-MAX    PIC 9(5)  VALUE 3; 011391   05 FKMQMESG-CONT-BADPARM PIC X(50) VALUE; 011391   'ERROR : WRONG PARAMETER SWITCH PASSED'.; 011392; 011393   COPY FKMQCC01.; 011395   COPY FWG07792.; ; 007500 LINKAGE SECTION.; 007600 01 PARM-RC             PIC 9(02).; 007700 01 PARM-LEN            PIC 9(07).; 007700 01 LS-SHORT-OTR-MSG        PIC X(2153).; 01 IN-MAC5SCHD REDEFINES LS-SHORT-OTR-MSG.; 05 IN-FUNCTION         PIC X(8).; ** K E Y S; 05 IN-MAC5SCHD-IND       PIC X(01).; 05 IN-MAC5SCHD-PLAN-CD     PIC X(03).; ** FOR UPDATE FIELDS; 05 IN-MAC5SCHD-PROC-CD     PIC X(07).; 05 IN-MAC5SCHD-YEAR      PIC X(04).; 05 IN-MAC5SCHD-VERSION     PIC 9(01).; 05 IN-MAC5SCHD-AMT       PIC 9(07)V99.; 05 IN-MAC5SCHD-USER-ID     PIC X(08).; 05 IN-MAC5SCHD-CREATE-DT    PIC X(08).; 05 IN-MAC5SCHD-COMMENTS    PIC X(30).; 05 FILLER           PIC X(2074).; COPY FWG07B01.; ; 01 OUT-OTR-CONTAINER-PARMS.; 04 OUT-OTR-CHANNEL-NAME  PIC X(16).; 04 OUT-OTR-CONTNER-NAME  PIC X(16).; 04 OUT-OTR-CONTNER-LEN  PIC S9(09) COMP VALUE 0.; 04 OUT-OTR-CONTNER-PTR  USAGE IS POINTER.; 04 OUT-OTR-CONTNER-ADDR  REDEFINES; OUT-OTR-CONTNER-PTR  PIC 9(08) COMP.; ; 01 LS-OUT-OTR-CONTAINER.; 05 LS-OUT-OTR-CONTAINER-X PIC X; OCCURS 0 TO 2; DEPENDING ON OUT-OTR-CONTNER-LEN; 007800; 008200/; 008300 PROCEDURE DIVISION USING PARM-RC; 008400             PARM-LEN; 008500             LS-SHORT-OTR-MSG; OUT-OTR-CONTAINER-PARMS.; 008600; 008700   PERFORM; ; 008800   PERFORM; ; 008900   GO TO 9999-GOBACK; 00; 009100; 009200/; 009300; 009400; 009500   MOVE SPACES        TO OUT-PARMS; 009600   MOVE 'S'         TO OUT-RESPONSE; 009700   MOVE 1          TO PARM-LEN; MOVE 0          TO WS-VIEW-TOT-ITEMS; 0; 010200/; 010300; 010400; 010500   EVALUATE IN-MAC5SCHD-IND; 010600     WHEN '1'; 010700        PERFORM; 010900     WHEN '2'; 01; 011100     WHEN OTHER; 011200        MOVE 31           TO PARM-LEN; 011300        MOVE 'EERROR IN PARMS  '  TO OUT-PARMS; 011400        GO TO 9999-GOBACK; 011500   END-EVALUATE; 011600   .; ; EXIT.; 011800/; 011900; 01; 012100   SET RECORD-FOUND TO TRUE; 012200   MOVE 5           TO MAC-SCHEDULE-IND-DMAC; 012300   MOVE IN-MAC5SCHD-PLAN-CD  TO PLAN-CODE-DMAC; 012400   MOVE '; 012500   MOVE; 012600   MOVE 0           TO MAC-SCHEDULE-VERSION-DMAC; 012800; 012900   EXEC CICS STARTBR DATASET  ('FMA; 01; 013300         KEYLENGTH (LENGTH OF MAC-SCHEDULE-KEY-DMAC); 013400         RESP   (WS-RESP); 013500         GTEQ; 013600   END-EXEC; 013700; 013800   EVALUATE WS-RESP; 013900     WHEN DFHRESP (NORMAL); 01; 014100     WHEN DFHRESP (NOTFND); 014200        MOVE 31           TO PARM-LEN; 014300        MOVE 'ENO MAC5 FOUND   '  TO OUT-PARMS; 014400        GO TO 9999-GOBACK; 014500     WHEN DFHRESP (NOTOPEN); 014600        MOVE 31           TO PARM-LEN; 014700        MOVE 'EFILE NOT OPEN   '  TO OUT-PARMS; 014800        GO TO 9999-GOBACK; 014900     WHEN DFHRESP (NOTAUTH); 01; 015100        MOVE 'ENOT AUTH TO READ '  TO OUT-PARMS; 015200        GO TO 9999-GOBACK; 015300     WHEN DFHRESP (INVREQ); 015400        MOVE 31           TO PARM-LEN; 015500        MOVE 'EINV REQUEST -BKEND'  TO OUT-PARMS; 015600        GO TO 9999-GOBACK; 015700     WHEN OTHER; 015800        MOVE 31           TO PARM-LEN; 015900        MOVE 'ESTARTBR ERROR   '  TO OUT-PARMS; 01; 016100   END-EVALUATE; 016200; 016300   IF MAC-SCHEDULE-IND-DMAC NOT = 5; 016400   OR PLAN-CODE-DMAC NOT = IN-MAC5SCHD-PLAN-CD; 016500    MOVE 70           TO PARM-LEN; 016600    MOVE 'ENO MAC5 FOUND   '  TO OUT-PARMS(1:30); 016700    MOVE DENTAL-MAC-RECORD    TO OUT-PARMS(31:40); 016800    GO TO 9999-GOBACK; 016900   END-IF; 01; 017100   PERFORM 3200-VIEW-MAC5-SCHED; 017200    UNTIL NO-RECORD-FOUND; .; ; EXIT.; 017300/; 017100 3200-VIEW-MAC5-SCHED.; 017800   IF MAC-SCHEDULE-IND-DMAC = 5; 017900   AND PLAN-CODE-DMAC = IN-MAC5SCHD-PLAN-CD; 022700     ADD 1         TO WS-VIEW-TOT-ITEMS; 022800     MOVE DENTAL-MAC-RECORD TO WS-VIEW-MAC5(WS-VIEW-TOT-ITEMS; ; 018100     PERFORM 3100-READNEXT-FMA; ; 018200     IF WS-RESP = DFHRESP (ENDFILE); 018300      SET NO-RECORD-FOUND TO TRUE; 018800      COMPUTE PARM-LEN = LENGTH OF WS-VIEW-TOT-ITEMS; 018800               + (WS-VIEW-TOT-ITEMS; LENGTH OF DENTAL-MAC-RECORD); + PARM-LEN; END-COMPUTE; 01; 019100   ELSE; 019200     SET NO-RECORD-FOUND TO TRUE; 018800     COMPUTE PARM-LEN = LENGTH OF WS-VIEW-TOT-ITEMS; 018800             + (WS-VIEW-TOT-ITEMS; LENGTH OF DENTAL-MAC-RECORD); + PARM-LEN; END-COMPUTE; 019900   END-IF; 0; 3200-EXIT.; EXIT.; 020200/; 020300 3100-READNEXT-FMA; 020400; 020500   EXEC CICS READNEXT; 020600         DATASET ('FMA; 020700         INTO  (DENTAL-MAC-RECORD); 020800         RIDFLD (MAC-SCHEDULE-KEY-DMAC); 020900         RESP  (WS-RESP); 02; 021100; 021200   EVALUATE WS-RESP; 021300     WHEN DFHRESP (NORMAL); 021400     WHEN DFHRESP (ENDFILE); 021500        CONTINUE; 021600     WHEN OTHER; 021700        MOVE 31           TO PARM-LEN; 021800        MOVE 'EREADNEXT ERROR  ' TO OUT-PARMS (1:20); 021900        MOVE WS-RESP        TO OUT-PARMS (21:9); 02; 022100   END-EVALUATE; 022200   .; 020300 3100-EXIT.; 02; 023100/; 023200; 023300; 023400   MOVE 5           TO MAC-SCHEDULE-IND-DMAC; 023500   MOVE IN-MAC5SCHD-PLAN-CD  TO PLAN-CODE-DMAC; 023600   MOVE IN-MAC5SCHD-PROC-CD  TO PROCEDURE-CODE-DMAC; 023700   MOVE IN-MAC5SCHD-YEAR   TO SERVICE-YEAR-DMAC; 023800   MOVE IN-MAC5SCHD-VERSION  TO MAC-SCHEDULE-VERSION-DMAC; 023900   MOVE IN-MAC5SCHD-AMT    TO DENTAL-ALLOWED-CHARGE-DMAC; 02; 024100   MOVE IN-MAC5SCHD-CREATE-DT TO CREATED-DATE-DMAC; 024200   MOVE IN-MAC5SCHD-COMMENTS TO COMMENT-DMAC; 024300; 024400   EXEC CICS WRITE DATASET ('FMA; 024500           FROM  (DENTAL-MAC-RECORD); 024600           RIDFLD (MAC-SCHEDULE-KEY-DMAC); 024900           LENGTH (LENGTH OF DENTAL-MAC-RECORD); 02; 025100   END-EXEC; 025200; 025300   IF WS-RESP = DFHRESP (NORMAL); 025400    MOVE 31           TO PARM-LEN; 025500    MOVE 'SSUCCESFUL WRITE  '  TO OUT-PARMS; 025600   ELSE; 025700    MOVE 31           TO PARM-LEN; 025800    MOVE 'EWRITE FAILED   '  TO OUT-PARMS; 025900    GO TO 9999-GOBACK; 02; 026100   .; ; EXIT.; 026300/; 032418 9999-GOBACK.; 032105   MOVE PARM-LEN     TO OUT-OTR-CONTNER-LEN.; 032106; 032107   PERFORM 9100-SETUP-OUT-OTR-CONTAINER; 032108    THRU 9100-EXIT.; 032109; 032110   IF FKMQMESG-RET-SUCCESS; 032120    SET ADDRESS OF LS-OUT-OTR-CONTAINER; 032130          TO OUT-OTR-CONTNER-PTR; 032140    MOVE SPACES; 032150     TO LS-OUT-OTR-CONTAINER(1:PARM-LEN); 032160    MOVE OUT-PARMS      (1:PARM-LEN); 032170     TO LS-OUT-OTR-CONTAINER(1:PARM-LEN); 032180   ELSE; 032190    MOVE   CURR-PGM-PREFIX     TO FX71P0ME-PGM-PREFIX; 032200    MOVE   FKMQMESG-ERR-NULL    TO FX71P0ME-MSG-NO; 032300    MOVE   FKMQMESG-CONT-NOREPLY  TO FX71P0ME-MESSAGE-TEXT; 032400    PERFORM U999-LOG-ERROR    THRU U999-EXIT; 032401   END-IF.; 032402; 032500   GOBACK; 032600   .; 032403 9999-EXIT.; 032404   EXIT.; ; 032405   COPY FKMQCC98., 

FBK5P5M1.CBL, TREATMENT PROCESSING FOR RETRIEVING PATIENT ROSTER; ; FUNCTIONS :; PATIENT ROSTER PROCESSING; PATIENT DATA PROCESSING, === VALIDATES RETURN CODE FROM CALL, 

FBK5P5M2.CBL, HKFBK5P5; FUNCTION:                           HKFBK5P5; ---------                           HKFBK5P5; HKFBK5P5; READ MENTAL HEALTH FILE AND LOAD USER TABLE    HKFBK5P5; WITH MENTAL HEALTH RECORDS.            HKFBK5P5; HKFBK5P5; CMR  DATE    REMARKS                    HKFBK5P5; 362991 NOV-02   NEW FEPDIRECT IMPLEMENTATION         HKFBK5P5; 369169 DEC-02   YEAR END CHANGES BY VIJAY MAGANTI IN PARA  HKFBK5P5; ; MENTAL HEALTH FILE(; 370189 JAN-03   RECATALOG FOR YEAR END CHANGES        HKFBK5P5; 354750 JUL-03   HIPAA CHANGES                 HKFBK5P5; 69725 AUG-07   ADD A FLAG TO THE OTR THAT INDICATES IF AN  HKFBK5P5; MHSA TREATMENT PLAN HAS A MAX OF 10 NOTES.  HKFBK5P5; TT283828 06/25/11 HIPAA 5010 PROJECT - RECOMPILE; TT373326 04/14/12 2011SOW20 - EXPAND CHARGE LINE FROM 40 TO 999; 01/01/13 2012SOW36 - CONTAINER CHANGE FOR OTR RECORD; 00026 DATA DIVISION.                          HKFBK5P5, 

FBK5P5M3.CBL, 69725 AUG-07 R2 ADD MHSA TREATMENT NOTES. THE UPDATE FUNCTIONFBK5P5M3; ADDS A NEW NOTE TO MHSA_TREATMNT_NOTE AS THE FBK5P5M3; NOTES ARE JOURNALED, NOT UPDATED IN PLACE.  FBK5P5M3; A MAXIMUM OF TEN NOTES PER PLAN CAN BE ADDED. FBK5P5M3; TT283828 06/25/11 HIPAA 5010 PROJECT - EXPAND NAME FIELDS; TT373326 04/14/12 2011SOW20 - EXPAND CHARGE LINE FROM 40 TO 999; 01/01/13 2012SOW36 - CONTAINER CHANGE FOR OTR RECORD, 

FBK5P5M4.CBL, HKFBK5P5; FUNCTION:                           HKFBK5P5; ---------                           HKFBK5P5; HKFBK5P5; ADD MENTAL HEALTH TREATMENT RECORD TO MHSA_TREATMNT_PLAN TABLE HKFBK5P5; HKFBK5P5; HKFBK5P5; CMR  DATE    REMARKS                    HKFBK5P5; 362991 NOV-02   NEW FEPDIRECT IMPLEMENTATION         HKFBK5P5; 369169 DEC-02   YEAR END CHANGES BY VIJAY MAGANTI IN PARA  HKFBK5P5; ; MENTAL HEALTH FILE(; 370189 JAN-03   RECATALOG FOR YEAR END CHANGES        HKFBK5P5; 354750 JUL-03   HIPAA CHANGES                 HKFBK5P5; 371743 JUL-03   INCORPORATE REAL TIME MODIFICATIONS.     HKFBK5P5; 42369 JUL-05   DUPEDIT 00E53 ISSUED IN ERROR         HKFBK5P5; 51073 EMER FIX  USER UNABLE TO ENTER RECORD          HKFBK5P5; 69725 AUG-07 R2 ADD MHSA TREATMENT NOTES. ADD A NEW MHSA   HKFBK5P5; TREATMENT NOTE TO MHSA_TREATMNT_NOTE.     HKFBK5P5; TT283828 06/25/11 HIPAA 5010 PROJECT - EXPAND NAME FIELDS; TT373326 04/14/12 2011SOW20 - EXPAND CHARGE LINE FROM 40 TO 999; 01/01/13 2012SOW36 - CONTAINER CHANGE FOR OTR RECORD; 00032 DATA DIVISION.                          HKFBK5P5; 00033                                  HKFBK5P5; 00034 WORKING-STORAGE SECTION.                     HKFBK5P5; 000345 77 PAN-VALET PICTURE X(24) VALUE '068HKFBK5P5M410/14/05'.    HKFBK5P5; 00035 77 PAN-VALET PICTURE X(24) VALUE '001FBK5P5M4 05/19/04'.    HKFBK5P5; 00036                                  HKFBK5P5; 00037 01 CICS-FIELDS.                         HKFBK5P5; 00038   05 CICS-RESP          PIC S9(8) BINARY.      HKFBK5P5; 00039                                  HKFBK5P5; 00040 01 MHLTH-KC            PIC XX VALUE 'KC'.     HKFBK5P5; 00041                                  HKFBK5P5; 00042 01 WS-TIMESTAMP          PIC X(26).          HKFBK5P5; 00043                                  HKFBK5P5; 00047                                  HKFBK5P5; 00048 01 WS-GENERIC-KEY.                       HKFBK5P5; 00049   05 WS-CONTRACT-ID-FRST-TPR   PIC X(01).          HKFBK5P5; 00050   05 WS-CONTRACT-ID-LAST8-TPR   PIC X(08).          HKFBK5P5; 00051   05 WS-MEMBER-NUMBER-TPR     PIC 9(09).          HKFBK5P5; 00052   05 WS-PLAN-CODE-TPR       PIC 9(03).          HKFBK5P5; 00053   05 WS-PERF-PROV-ID-TPR     PIC X(13).          HKFBK5P5; 00054   05 WS-APPROVAL-TYPE-TPR     PIC X(01).          HKFBK5P5; 00055                                  HKFBK5P5; 00056 01 MODULE-NAMES.                        HKFBK5P5; 00057   05 FXMMP0M0-MODULE       PIC X(8)  VALUE 'FXMMP0M0'. HKFBK5P5; 00058                                  HKFBK5P5; 00059 01 MESSAGES-RETURNED.                      HKFBK5P5; 00060   05 MSG-NOT-FOUND        PIC X(30) VALUE       HKFBK5P5; 00061     'RECORD NOT FOUND       '.            HKFBK5P5; 00062   05 MSG-DUP-REC         PIC X(30) VALUE       HKFBK5P5; 00063     'INSERTING DUPLICATE RECORD  '.            HKFBK5P5; 00064   05 MSG-INS-REC         PIC X(30) VALUE       HKFBK5P5; 00065     'ERROR INSERTING TREATMENT REC '.            HKFBK5P5; 00064   05 MSG-OPEN-CURSOR       PIC X(30) VALUE       HKFBK5P5; 00065     'ERROR ON OPEN CURSOR     '.            HKFBK5P5; 00064   05 MSG-CLOSE-CURSOR       PIC X(30) VALUE      HKFBK5P5; 00065     'ERROR ON CLOSE CURSOR     '.            HKFBK5P5; -%%%-R2-RQ-69725-BEGIN                      HKFBK5P5; 00064   05 MSG-INS-TREATMENT-NOTE    PIC X(30) VALUE      HKFBK5P5; 00065     'ERROR INSERTING TREATMENT NOTE'.            HKFBK5P5; -%%%-R2-RQ-69725-END                       HKFBK5P5; ; * TT67616 RELEASE 1 2007; ; 05 MSG-PLAN-CD-BLANK.                    HKFBK5P5; 10 FILLER        PIC X(12) VALUE 'PLANCD BLANK'.HKFBK5P5; 10 FILLER        PIC X(08) VALUE ' MBRID: '.  HKFBK5P5; 10 MSG-MEMBER-ID    PIC X(09) VALUE SPACES.    HKFBK5P5; 10 FILLER        PIC X(09) VALUE ' OPERID: '.  HKFBK5P5; 10 MSG-OPERID      PIC X(09) VALUE SPACES.    HKFBK5P5; 00066                                  HKFBK5P5; 00067 01 RESULT-CODE           PIC X  VALUE SPACES.    HKFBK5P5; 00068                                  HKFBK5P5; 00069 01 SUBSCRIPTS.                         HKFBK5P5; 00070   05 J              PIC 99 VALUE 1.      HKFBK5P5; 00071   05 L              PIC 99 VALUE ZERO.     HKFBK5P5; 00072                                  HKFBK5P5; -%%%-R2-RQ-69725-BEGIN                      HKFBK5P5; 00069 01 HOSTVAR             PIC S9(9) COMP-3.      HKFBK5P5; -%%%-R2-RQ-69725-END                       HKFBK5P5; 00072                                  HKFBK5P5; 00073 01 FWG0005T-WORKING-VARIABLES.                 HKFBK5P5; 00074   05 FWG0005T-RBA          COMP PIC S9(08) VALUE +0. HKFBK5P5; 00075                                  HKFBK5P5; 00076 01 LENGTHS.                           HKFBK5P5; 00077   05 KEY-LEN           PIC S9(8) BINARY VALUE 55.  HKFBK5P5; 00078   05 REC-LEN           PIC S9(8) BINARY VALUE 304. HKFBK5P5; 00079   05 FKMH-GENERIC-KEY      PIC S9(8) BINARY VALUE 35.  HKFBK5P5; 00080                                  HKFBK5P5; 00080 01 WS-NULL-FIELDS.                       HKFBK5P5; 00080   05 NULL-IDENTITY-VAL-LOCAL   PIC S9(04) BINARY.      HKFBK5P5; 00080                                  HKFBK5P5; 00081 01 OTHER-FIELDS.                        HKFBK5P5; 00082   05 WS-COUNT          PIC 9(04) VALUE ZEROES.   HKFBK5P5; 00083   05 FIRST-TIME-SW        PIC X(01) VALUE 'Y'.    HKFBK5P5; 00083   05 FIRST-TIME-THRU-SW     PIC X(01) VALUE 'Y'.    HKFBK5P5; 00083   05 WS-END-OF-DATABASE     PIC X(01) VALUE 'Y'.    HKFBK5P5; 00084   05 WS-STOP-SW         PIC X(01) VALUE 'N'.    HKFBK5P5; 00085   05 WS-MEMBER-ID        PIC 9(09).          HKFBK5P5; 00086   05 WS-RESP       COMP  PIC S9(08) VALUE +0.     HKFBK5P5; 00087   05 WS-PARTITION        PIC X(01).          HKFBK5P5; 00088   05 SEGNAME-F00050       PIC X(08).          HKFBK5P5; 00089   05 F00050-LENGTH        PIC 9(04) VALUE 304 COMP.  HKFBK5P5; 00090   05 OVERLAP-DUP-FOUND-SW    PIC X(01) VALUE 'N'.     HKFBK5P5; 00091   05 WS-STBR-NTFND-SW      PIC X(01) VALUE 'N'.     HKFBK5P5; 00184   05 WS-TREAT-PLAN-ID      PIC 9(09).          HKFBK5P5; 00184   05 WS-TREATMENT-ID REDEFINES                HKFBK5P5; 00184     WS-TREAT-PLAN-ID      PIC X(09).          HKFBK5P5; ; * TT 67616 - RELEASE 1 2007; ; 05 WS-OPERID-PLAN-CODE.                   HKFBK5P5; 10 WS-OPERID-PLAN     PIC X(03).          HKFBK5P5; 10 FILLER          PIC X(05).          HKFBK5P5; HKFBK5P5; 00093 01 WS-CONV-DATE.                        HKFBK5P5; 00094   05 WS-ABSTIME      COMP-3 PIC S9(15).         HKFBK5P5; 00095   05 WS-MDCY.                         HKFBK5P5; 00096     10 WS-M-1          PIC XX.           HKFBK5P5; 00097     10 FILLER          PIC X.            HKFBK5P5; 00098     10 WS-D-1          PIC XX.           HKFBK5P5; 00099     10 FILLER          PIC X.            HKFBK5P5; 00100     10 WS-CY-1         PIC XXXX.          HKFBK5P5; 00101   05 WS-CYMD.                         HKFBK5P5; 00102     10 WS-CY-2         PIC XXXX.          HKFBK5P5; 00103     10 FILLER          PIC X VALUE '-'.       HKFBK5P5; 00104     10 WS-M-2          PIC XX.           HKFBK5P5; 00105     10 FILLER          PIC X VALUE '-'.       HKFBK5P5; 00106     10 WS-D-2          PIC XX.           HKFBK5P5; 00107   05 WS-CYMD-BEGIN-DATE.                   HKFBK5P5; 00108     10 WS-CY-BEGIN-DATE     PIC XXXX.          HKFBK5P5; 00109     10 FILLER          PIC X VALUE '-'.       HKFBK5P5; 00110     10 WS-M-BEGIN-DATE     PIC XX.           HKFBK5P5; 00111     10 FILLER          PIC X VALUE '-'.       HKFBK5P5; 00112     10 WS-D-BEGIN-DATE     PIC XX.           HKFBK5P5; 00113   05 WS-CYMD-END-DATE.                    HKFBK5P5; 00114     10 WS-CY-END-DATE      PIC XXXX.          HKFBK5P5; 00115     10 FILLER          PIC X VALUE '-'.       HKFBK5P5; 00116     10 WS-M-END-DATE      PIC XX.           HKFBK5P5; 00117     10 FILLER          PIC X VALUE '-'.       HKFBK5P5; 00118     10 WS-D-END-DATE      PIC XX.           HKFBK5P5; 00119   05 WS-MMDDCCYY.                       HKFBK5P5; 00120     10 WS-MM          PIC X(02) VALUE SPACES.   HKFBK5P5; 00121     10 WS-DD          PIC X(02) VALUE SPACES.   HKFBK5P5; 00122     10 WS-CCYY         PIC X(04) VALUE SPACES.   HKFBK5P5; 00123   05 WS-CLM-PROCESS-DT.                    HKFBK5P5; 00124     10 WS-CLM-PROCESS-DT-CCYY  PIC X(04) VALUE SPACES.   HKFBK5P5; 00125     10             PIC X   VALUE '-'.    HKFBK5P5; 00126     10 WS-CLM-PROCESS-DT-MM   PIC X(02) VALUE SPACES.   HKFBK5P5; 00127     10             PIC X   VALUE '-'.    HKFBK5P5; 00128     10 WS-CLM-PROCESS-DT-DD   PIC X(02) VALUE SPACES.   HKFBK5P5; 00129   05 WS-BEGIN-DATE        PIC X(10).          HKFBK5P5; 00130   05 WS-END-DATE         PIC X(10).          HKFBK5P5; 00131                                  HKFBK5P5; -----------------------------------------------------------   HKFBK5P5; FX71P0ME DATA AREA ERROR LOG                 HKFBK5P5; -----------------------------------------------------------   HKFBK5P5; 00135   COPY FWG07792.                        HKFBK5P5; 00136                                  HKFBK5P5; 00137                                  HKFBK5P5; *  DB2 FORMATS                         HKFBK5P5; 00141                                  HKFBK5P5; 00142   EXEC SQL INCLUDE SQLCA   END-EXEC.           HKFBK5P5; 00143   EXEC SQL INCLUDE FKTRNCNT END-EXEC.           HKFBK5P5; 00144   EXEC SQL INCLUDE FMHSTRPL END-EXEC.           HKFBK5P5; -%%%-R2-RQ-69725-BEGIN                      HKFBK5P5; 00144   EXEC SQL INCLUDE FMHSTRNT END-EXEC.           HKFBK5P5; -%%%-R2-RQ-69725-END                       HKFBK5P5; 00145                                  HKFBK5P5; *  DB2 DECLARATION GENERATION                  HKFBK5P5; 00149                                  HKFBK5P5; 00150   EXEC SQL                           HKFBK5P5; DECLARE TREATPLN CURSOR FOR                 HKFB; SELECT MHSA_TREAT_PLAN_ID,                 HKFB; MEMBER_ID,                     HKFB; PLAN_CD,                      HKFB; PERF_PROV_PLAN_ID,                 HKFB; PROVIDER_NM,                    HKFB; APPROVAL_BEGIN_DT,                 HKFB; APPROVAL_TYPE_CD,                  HKFB; APPROVAL_END_DT,                  HKFB; CREATION_TS,                    HKFB; OPERATOR_ID,                    HKFB; APPROVE_VISITS_CNT,                 HKFB; USED_VISITS_CNT,                  HKFB; LAST_UPDATE_TS                   HKFB; FROM MHSA_TREATMNT_PLAN                  HKFB; -%%%-R2-RQ-69725-BEGIN                      HKFBK5P5; *     WHERE MEMBER_ID =                     HKFB; *        :MEMBER-ID                      HKFB; *      AND PERF_PROV_PLAN_ID =; *        :PERF-PROV-PLAN-ID; *      AND APPROVAL_TYPE_CD =; *        :APPROVAL-TYPE-CD; WHERE MEMBER_ID =                     HKFB; :DCLMHSA-TREATMNT-PLAN.MEMBER-ID           HKFB; AND PERF_PROV_PLAN_ID =; :DCLMHSA-TREATMNT-PLAN.PERF-PROV-PLAN-ID; AND APPROVAL_TYPE_CD =; :DCLMHSA-TREATMNT-PLAN.APPROVAL-TYPE-CD; -%%%-R2-RQ-69725-END                       HKFBK5P5; 00171    END-EXEC.                          HKFBK5P5; 00172                                  HKFBK5P5; 00173 LINKAGE SECTION.                         HKFBK5P5; 00174                                  HKFBK5P5; 00175 01 FBK5P5M4-PARMS.                       HKFBK5P5; 00176   05 FBK5P5M4-MESSAGE-AREA.                  HKFBK5P5; 00177     10 FBK5P5M4-RESPONSE       PIC X.        HKFBK5P5; 00178       88 FBK5P5M4-ERROR          VALUE 'E'.   HKFBK5P5; 00179       88 FBK5P5M4-FAILED          VALUE 'N'.   HKFBK5P5; 00180       88 FBK5P5M4-SUCCESS         VALUE 'Y'.   HKFBK5P5; 00181     10 FBK5P5M4-MESSAGE        PIC X(30).      HKFBK5P5; 00182   05 FBK5P5M4-PATIENT-CODE       PIC X(01).      HKFBK5P5; 00183   05 FBK5P5M4-PLAN-CODE         PIC X(03).      HKFBK5P5; 00184   05 FBK5P5M4-CONTRACT-ID        PIC X(08).      HKFBK5P5; 00185   05 FBK5P5M4-CLM-ENTRY-IND       PIC X.        HKFBK5P5; 00186   05 FBK5P5M4-PERF-PROV-ID       PIC X(13).      HKFBK5P5; 00187   05 FBK5P5M4-APPROVED-VISITS      PIC X(03).      HKFBK5P5; 00188   05 FBK5P5M4-VISITS-USED        PIC X(03).      HKFBK5P5; 00189   05 FBK5P5M4-DATE-LAST-UPDATED     PIC X(10).      HKFBK5P5; 00190   05 FBK5P5M4-OPERID          PIC X(08).      HKFBK5P5; HIPAA 5010 - EXPAND NAME FIELDS; 05 FBK5P5M4-PROV-NAME         PIC X(35).      HKFBK5P5; 00191   05 FBK5P5M4-PROV-NAME         PIC X(60).      HKFBK5P5; 00192   05 FBK5P5M4-APPRD-TYPE        PIC X(1).       HKFBK5P5; 00193   05 FBK5P5M4-BEGIN-DATE        PIC X(10).      HKFBK5P5; 00194   05 FBK5P5M4-END-DATE         PIC X(10).      HKFBK5P5; 00183   05 FBK5P5M4-MEMBER-ID         PIC X(09).      HKFBK5P5; -%%%-R2-RQ-69725-BEGIN                      HKFBK5P5; 00183   05 FBK5P5M4-NOTE-TEXT         PIC X(80).      HKFBK5P5; -%%%-R2-RQ-69725-END                       HKFBK5P5; 00195                                  HKFBK5P5; MHSA-PARMS.                           HKFBK5P5; 00197   COPY FWG07B70.                        HKFBK5P5; 00198                                  HKFBK5P5; 00199                                  HKFBK5P5; 00200 PROCEDURE DIVISION  USING FBK5P5M4-PARMS            HKFBK5P5; 00201               FWG07B70-PARMS.           HKFBK5P5; 00202                                  HKFBK5P5, 

FBK5P5M5.CBL, FBK5P5M5; FUNCTION:                           FBK5P5M5; ---------                           FBK5P5M5; FBK5P5M5; DELETE TREATMENT PLAN FROM MHSA_TREATMNT_PLAN   FBK5P5M5; FBK5P5M5; PROJECT  DATE    REMARKS                  FBK5P5M5; 69725   AUG-07 RECOMPILE DUE TO CHANGES IN COPYBOOK FWG07B70; TT283828 06/25/11 HIPAA 5010 PROJECT - RECOMPILE; TT373326 04/14/12 2011SOW20 - EXPAND CHARGE LINE FROM 40 TO 999; 01/01/13 2012SOW36 - CONTAINER CHANGE FOR OTR RECORD; 00028 DATA DIVISION.                          FBK5P5M5; 00029 WORKING-STORAGE SECTION.                     FBK5P5M5; 000295 77 PAN-VALET PICTURE X(24) VALUE '001FBK5P5M5 10/15/05'.    FBK5P5M5; 00030                                  FBK5P5M5; 00031 01 CICS-FIELDS.                         FBK5P5M5; 00032   05 CICS-RESP          PIC S9(8) BINARY.      FBK5P5M5; 00033                                  FBK5P5M5; 00034 01 MODULE-NAMES.                        FBK5P5M5; 00035   05 FX70P2M2-MODULE       PIC X(8)  VALUE 'FX70P2M2'. FBK5P5M5; 00036   05 FX70P2M3-MODULE       PIC X(8)  VALUE 'FX70P2M3'. FBK5P5M5; 00037   05 FXMMP0M0-MODULE       PIC X(8)  VALUE 'FXMMP0M0'. FBK5P5M5; 00038                                  FBK5P5M5; 00039 01 MHLTH-KC            PIC XX   VALUE 'KC'.    FBK5P5M5; 00040                                  FBK5P5M5; 00041 01 MESSAGES-RETURNED.                      FBK5P5M5; 00042   05 MSG-NOT-FOUND        PIC X(30) VALUE       FBK5P5M5; 00043     'RECORD NOT FOUND       '.            FBK5P5M5; 00044   05 MSG-NO-PERF-PROV      PIC X(30) VALUE       FBK5P5M5; 00045     'PERF PROVIDER ID NOT FOUND '.              FBK5P5M5; 00046                                  FBK5P5M5; 00047 01 RESULT-CODE           PIC X   VALUE SPACES.   FBK5P5M5; 00048                                  FBK5P5M5; 00049 01 SUBSCRIPTS.                         FBK5P5M5; 00050   05 J              PIC 99   VALUE 1.     FBK5P5M5; 00051   05 L              PIC 99   VALUE ZERO.   FBK5P5M5; 00052   05 M              PIC 999  VALUE ZERO.   FBK5P5M5; 00053                                  FBK5P5M5; 00058 01 WS-OTHER-FIELDS.                       FBK5P5M5; 00059   05 WS-MEMBER-ID        PIC 9(09) VALUE ZEROS.   FBK5P5M5; 05 WS-PLAN-CODE        PIC 9(03) VALUE ZEROS.; 00060                                  FBK5P5M5; 00061   05 WS-TREATMENT-RECORD-UPDATED PIC X(01).          FBK5P5M5; 00062     88 WS-RECORD-DELETED         VALUE 'Y'.    FBK5P5M5; 00063     88 WS-RECORD-NOT-DELETED       VALUE 'N'.    FBK5P5M5; 00064                                  FBK5P5M5; 01 WS-TIMESTAMP          PIC X(26).; 00073                                  FBK5P5M5; ---------------------------------------------------------------- FBK5P5M5; FX71P0ME DATA AREA ERROR LOG                 FBK5P5M5; ---------------------------------------------------------------- FBK5P5M5; 00077   COPY FWG07792.                        FBK5P5M5; 00078                                  FBK5P5M5; 00098                                  FBK5P5M5; 00099 01 DATES.                            FBK5P5M5; 00100   05 WS-ABSTIME      COMP-3 PIC S9(15).         FBK5P5M5; 00101   05 WORK-DATE.                        FBK5P5M5; 00102     10 WORK-DATE-CCYY     PIC X(04).          FBK5P5M5; 00103     10             PIC X VALUE '-'.       FBK5P5M5; 00104     10 WORK-DATE-MM      PIC X(02).          FBK5P5M5; 00105     10             PIC X VALUE '-'.       FBK5P5M5; 00106     10 WORK-DATE-DD      PIC X(02).          FBK5P5M5; 00107   05 MMDDCCYY-DATE.                      FBK5P5M5; 00108     10 MMDDCCYY-DATE-MM    PIC X(02).          FBK5P5M5; 00109     10             PIC X.            FBK5P5M5; 00110     10 MMDDCCYY-DATE-DD    PIC X(02).          FBK5P5M5; 00111     10             PIC X.            FBK5P5M5; 00112     10 MMDDCCYY-DATE-CCYY   PIC X(04).          FBK5P5M5; 00113   05 WS-MMDDCCYY.                       FBK5P5M5; 00114     10 WS-MM          PIC X(02) VALUE SPACES.   FBK5P5M5; 00115     10 WS-DD          PIC X(02) VALUE SPACES.   FBK5P5M5; 00116     10 WS-CCYY         PIC X(04) VALUE SPACES.   FBK5P5M5; 00117   05 WS-CLM-PROCESS-DT.                    FBK5P5M5; 00118     10 WS-CLM-PROCESS-DT-CCYY  PIC X(04) VALUE SPACES.   FBK5P5M5; 00119     10             PIC X   VALUE '-'.    FBK5P5M5; 00120     10 WS-CLM-PROCESS-DT-MM   PIC X(02) VALUE SPACES.   FBK5P5M5; 00121     10             PIC X   VALUE '-'.    FBK5P5M5; 00122     10 WS-CLM-PROCESS-DT-DD   PIC X(02) VALUE SPACES.   FBK5P5M5; 00123                                  FBK5P5M5; *  DB2 DECLARATION GENERATION                  FBK5P5M5; 00127                                  FBK5P5M5; 00128   EXEC SQL INCLUDE SQLCA   END-EXEC.           FBK5P5M5; 00129   EXEC SQL INCLUDE FKTRNCNT END-EXEC.           FBK5P5M5; 00129   EXEC SQL INCLUDE FMHSTRPL END-EXEC.           FBK5P5M5; 00130                                  FBK5P5M5; 00131 LINKAGE SECTION.                         FBK5P5M5; 00132                                  FBK5P5M5; 01 FBK5P5M5-PARMS.; 05 FBK5P5M5-MESSAGE-AREA.; 10 FBK5P5M5-RESPONSE       PIC X.; 88 FBK5P5M5-ERROR          VALUE 'E'.; 88 FBK5P5M5-FAILED          VALUE 'N'.; 88 FBK5P5M5-RECORD-DELETED      VALUE 'Y'.; 10 FBK5P5M5-MESSAGE        PIC X(30).; 05 FBK5P5M5-PATIENT-CODE       PIC X(01).; 05 FBK5P5M5-PLAN-CODE         PIC X(03).; 05 FBK5P5M5-CONTRACT-ID        PIC X(08).; 05 FBK5P5M5-CLM-ENTRY-IND       PIC X.; 05 FBK5P5M5-MEMBER-ID         PIC X(09).; 05 FBK5P5M5-NUMBER-OF-RECORDS     PIC 9(03).; 05 FBK5P5M5-TREATMNT-TABLE.; 10 FBK5P5M5-TREATMNT-ELEM  OCCURS 100 TIMES.; 20 FBK5P5M5-FILLER       PIC X(96).; 20 FBK5P5M5-TREATMENT-ID    PIC X(09).; ; 00156                                  FBK5P5M5; MHSA-PARMS.                           FBK5P5M5; 00158   COPY FWG07B70.                        FBK5P5M5; 00159                                  FBK5P5M5; 00160 PROCEDURE DIVISION  USING FBK5P5M5-PARMS            FBK5P5M5; 00161               FWG07B70-PARMS.           FBK5P5M5; 00162                                  FBK5P5M5, 

FBK7P5M1.CBL, FBK7P5M1; PATIENT ROSTER FOR RETRIEVING REFUND INFORMATION    FBK7P5M1; FBK7P5M1; FUNCTIONS :                          FBK7P5M1; PATIENT REFUND ROSTER PROCESSING         FBK7P5M1; FBK7P5M1, 

FBK7P5M2.CBL, FUNCTION:; ---------; INSERT REFUND ACTIVITY TABLE.; ; ----------------------------------------------------------------; ; CMR  DATE    REMARKS; 362991 OCT-02   NEW FEPDIRECT IMPLEMENTATION; 354750 JUL-03   HIPAA CHANGES; 374247  NOV-03  CHANGED FOR COPYBOOK CHANGES TO FWG07B73; BY VIJAY MAGANTI; 407249  JAN-06  EXPEND LENGTH OF WS-MAX-REFUND-ID FIELD; 407939  JAN-07  UB04 PROJECT AND YEAR-END 2006 CHANGES; TT283828 06/25/11 HIPAA 5010 PROJECT - EXPAND NAME FIELDS; TT373326 04/14/12 2011SOW20 - EXPAND CHARGE LINE FROM 40 TO 999; 01/01/13 2012SOW36 - CONTAINER CHANGE FOR OTR RECORD; 002200/; 002600 DATA DIVISION.; 002700; 002800 WORKING-STORAGE SECTION.; 00; 003100 01 DB2-RETURN-CODES.; 003200   05 ZERO-RETURNED    COMP-4 PIC S9(09) VALUE ZEROES.; 003300; 003400 01 SUBSCRIPTS.; 003500   05 I              PIC 9(03) VALUE ZEROES.; 003600   05 K              PIC 9(03) VALUE ZEROES.; 003700; 003800 01 WS-OTHER-FIELDS.; 003900   05 WS-ABSTIME        PIC S9(15) COMP-3.; 00; 004100     10 WS-MM         PIC X(02) VALUE SPACES.; 004200     10 WS-DD         PIC X(02) VALUE SPACES.; 004300     10 WS-CCYY        PIC X(04) VALUE SPACES.; 004400   05 WS-CLM-PROCESS-DT.; 004500     10 WS-CLM-PROCESS-DT-CCYY  PIC X(04) VALUE SPACES.; 004600     10             PIC X   VALUE '-'.; 004700     10 WS-CLM-PROCESS-DT-MM   PIC X(02) VALUE SPACES.; 004800     10             PIC X   VALUE '-'.; 004900     10 WS-CLM-PROCESS-DT-DD   PIC X(02) VALUE SPACES.; 00; 005100; 005200 01 WS-MAX-REFUND-ID       PIC S9(8) COMP.; 005300 01 TO-COUNT           PIC 9(05) VALUE ZEROES.; 005400 01 FROM-COUNT          PIC 9(05) VALUE ZEROES.; 005410 01 WS-ORIG-KEYER-ID       PIC X(08).; 005500; --/ DB2 FORMATS; 005700   EXEC SQL INCLUDE SQLCA   END-EXEC.; 005800   EXEC SQL INCLUDE FRFNDACT END-EXEC.; 005900   EXEC SQL INCLUDE FKTRNCNT END-EXEC.; 00; ----------------------------------------------------------------; FX71P0ME DATA AREA ERROR LOG; ----------------------------------------------------------------; 006400   COPY FWG07792.; 006500; 006600 LINKAGE SECTION.; 006700; 006800 01 FBK7P5M2-PARMS.; 006900   05 FBK7P5M2-MESSAGE-AREA.; 00; 007100       88 FBK7P5M2-ERROR    VALUE 'E'.; 007200       88 FBK7P5M2-FAILED    VALUE 'N'.; 007300       88 FBK7P5M2-SUCCESS   VALUE 'Y'.; 007400     10 FBK7P5M2-MESSAGE     PIC X(30).; 007500     10 FBK7P5M2-REFUND-ID-TBL  OCCURS 25 TIMES.; 007600       15 FBK7P5M2-REFUND-ID  PIC X(09).; 007700; -------------------------------------------------; REFUND WORK AREA; -------------------------------------------------; 008100  COPY FWG07B73.; 008200; *%%-407939-YE2006-BEGIN-%%; *MATCH RECORD LENGTH WITH THE FWG07B01 OTR FORMA; 008200 01 IN-REFUND.; 008200   05                PIC X(28).; 008200   05 IN-REFUND-CONTRACT-ID     PIC X(08).; 008200   05 IN-REFUND-NO-OF-RECORDS    PIC X(03).; HIPAA 5010 - EXPAND MQ MESSAGE LENGTH; 2012SOW36 - CLE MATCH NEW OTR LENGTH INPUT;; - MUST MATCH LENGTH OF REFUND-RECORD GROUP FIELD; - IN COPYBOOK FWG07B73; 05 IN-REFUND-OTR         PIC X(34961).; 05 IN-REFUND-OTR         PIC X(39961).; 008200   05 IN-REFUND-OTR         PIC X(2730).; 008200; *%%-407939-YE2006-END-%%; 008700; 008800/; 008900; 00; 009100               FWG07B73-PARMS; 009200               IN-REFUND.; 009300, 

FBK7P5M3.CBL, FBK7P5M3; PATIENT ROSTER FOR VIEWING REFUND INFORMATION      FBK7P5M3; FBK7P5M3; FUNCTIONS :                          FBK7P5M3; PATIENT REFUND ROSTER PROCESSING         FBK7P5M3; FBK7P5M3, 

FBK7P5M4.CBL, 

FBK8P0M0.CBL, PROGRAM:   FBK8P0M0; CALLED PROGRAMS: FXCMPCM0 (CONTRACT ID VALIDATION); FXMMPCM0 (RETRIEVE MEMBER INFORMATION); FBK8P0M1 (INSERT HARDCOPY REQUEST); ; DATABASE TABLES: NONE; ; COPY MEMBERS:   FWG07B02 - IN-OTR MESSAGE AREA; FWG07792 - FY71P0ME DATA AREA ERROR LOG; FWG07B08 - HARDCOPY REQUEST DATA; FWG07B03 - OUTPUT PARM MESSAGE AREA; FWG07B01 - INPUT OTR FOR BUSINESS DRIVERS; FWG07793 - ERROR LOG CALL TO FX71P0ME, 

FBK8P0M1.CBL, PROGRAM:   FBK8P0M1; CALLED PROGRAMS: FX71P0ME - ERROR LOG; ; DATABASE TABLES: HARDCOPY_REQUEST; ; COPY MEMBERS:   FWG07792 - FY71P0ME DATA AREA ERROR LOG; FA99XF03 - ABNORMAL TERMINATION FIELDS; FWG07793 - ERROR LOG CALL TO FX71P0ME, 

FBK9P0M0.CBL, 

FCDRIVER.CBL, 

FK30PXM4.CBL, 

FK30PXM5.CBL, 

FK30PXM6.CBL, 

FK80P7M1.CBL, FUNCTION: EXTRACT DATA TO FCR AND SUPPORTING HISTORY FROM; TRANSACTION TABLES., 

FK80P7M2.CBL, FUNCTION: CREATE TWR FROM REFUND TRANSACTION TABLE, 

FK80P7M3.CBL, FUNCTION: CREATE CONTROL SHEET FOR REAL TIME CLAIMS SUBMITTED; THRU FEPDIRECT, 

FK80P7M4.CBL, FUNCTION: UPDATE STATUS TO 'NTP' FOR CLAIMS FAILING TO CREATE FK80P7M4; FCR'S OR TWR'S FOR REAL TIME             FK80P7M4, 

FK80P7M5.CBL, FUNCTION: DELETE ROWS FEPDIR_TRANS_AUDIT TABLE, 

FK80P7M6.CBL, FUNCTION: DELETE ROWS FROM KEYER_TRANS_COUNT TABLE WHERE DATA FK80P7M6; IS MORE THAN 2 YEARS FROM THE CURRENT DATE      FK80P7M6, 

FK80P7M7.CBL, FUNCTION: UPDATE STATUS OF A CLAIM FROM NTP TO INP & PROCESS; TO CAE, 

FK80PCM0.CBL, FUNCTION: FK80 controller program; ; CMR  DATE    INIT  REMARKS, 

FK89P0M0.CBL, FUNCTION: ACKNOWLEDGEMENT MODULE FOR FEPDIRECT CLAIMS ENTERED; REAL TIME., 

FK89PCM0.CBL, FUNCTION: MQ DRIVER FOR ACKNOWLEDGEMENT MODULE FOR CLAIMS; GETTING PROCESSED REAL TIME, 

FK96P0M0.CBL, FUNCTION: TO RECEIVE PLAN PRICING REQUEST RESPONSE FROM MQ AND; UPDATE THE TRANSACTION DATABASE ACCORDINGLY, 

FK96P1M0.CBL, FUNCTION: TO CONSOLIDATE THE UPDATE OF PRICING RESPONSE TO; THE TRANSACTION DATABASE, 

FK97P0M0.CBL, 

FK97PCM0.CBL, 

FK97PXM0.CBL, === PROCESS THE FUNCTION LOGIC; === 1) RECEIVE THE MAP; === 2) PROCESS SCREEN DATA, 

FK99P0M0.CBL, FUNCTION:; -------------------------------------------------------------; FK99P0M0 IS RESPONSIBLE FOR REFRESHING THE DATABASE WITH; UPDATED UNCOORDINATED MEDICARE DATA. THIS PROGRAM IS RUN; QUARTERLY AND IS TRIGGERED BY THE SUCCESSFUL COMPLETION OF; STATS JOB FF75R01.; ------------------------------------------------------------; INPUT FILE (FK9901IN); ---------------------; THIS FILE IS GENERATED BY THE STATS AREA AFTER THE FILE DATA; HAS BEEN AUDITED. EACH RECORD IS UNIQUE BY PLAN CODE,; CONTRACT ID, ORIGINAL CLAIM ID & PATIENT CODE.; ------------------------------------------------------------; OUTPUT FILE (FK9902OT); ----------------------; CONTAINS THE FILE KEYS OF THE ROWS THAT HAVE BEEN INSERTED; INTO THE DATABASE (UNCORD_MDCR_CLAIM).; ------------------------------------------------------------; OUTPUT FILE (FK9903OT); ----------------------; CONTAINS THE FILE KEYS OF THE ROWS THAT HAVE BEEN DELETED; FROM THE DATABASE (UNCORD_MDCR_CLAIM).; ------------------------------------------------------------; OUTPUT FILE (FK9904OT); ----------------------; CONTAINS THE FILE KEYS OF THE ROWS THAT HAVE BEEN RETAINED; ON THE DATABASE (UNCORD_MDCR_CLAIM) FOR THIS RUN.; ------------------------------------------------------------; OUTPUT FILE (SYSOUT); --------------------; DURING FINAL PROCESSING, A DISPLAY OF THE PROGRAM PROCESSING; COUNTS IS WRITTEN TO SYSOUT.; ------------------------------------------------------------; DB2 TABLES; ----------; JOB_PGM_RESTART; UNCORD_MDCR_CLAIM; UNCRD_MDCR_PROC_TS, 

FK99P0M1.CBL, FUNCTION:; -------------------------------------------------------------; INPUT FILE (FK9901IN); ---------------------; THE INPUT FILE TO THE UNCOORDINATED MEDICARE FILE WILL BE; THE LAST SORTED INPUT FILE TO THE QUARTERLY REFRESH.; ------------------------------------------------------------; OUTPUT FILE (FK9902OT); ----------------------; CONTAINS THE FILE KEYS AND A BEFORE AND AFTER IMAGE OF THE; MEDICARE PROCESS DATE FOR THOSE ROWS THAT HAVE BEEN UPDATED; ON UNCORD_MDCR_CLAIM.; ------------------------------------------------------------; DB2 TABLES; ----------; JOB_PGM_RESTART; UNCORD_MDCR_CLAIM, 

FS01P1M0.CBL, 

FS01PCM0.CBL, 00372365 07/DD/2003 APV   NEW FEPDIRECT IMPLEMENTATION; ; TT68712  01/02/2006 EMB   CHANGE MESSAGE TO INDICATE; CORRECT BATCH SYSTEM; TT78610  01/02/2008 MAC   ADD BATCH TRACKING FUNCTIONALITY; ; 99999999 MM/DD/CCYY XYZ   ...; TT283828  06/25/2011     HIPAA 5010 PROJECT - RECOMPILE; TT373326 01/01/13 2011SOW20 - EXPAND CHARGE LINES FROM 40 TO 999; TT667969 07/12/14 2014SOW030 MAR PROJECT - RECOMPILE; 685200 01/01/15 2014SOW025 PROVIDER DATA ENHANCEMENT PROJECT; ADDED PERFORMING PROVIDER ADDRESS DATA TO OTR, 

FS10P0M0.CBL, PROGRAM:   FS10P0M0 - MEDICARE FEE SCHEDULE BUSINESS DRIVER; CALLED PROGRAMS: FS10P1M0; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:; FS01CC01 - MQ MESSAGE LAYOUT, 372365 JULY 2003 N ALLURI NEW FEPDIRECT IMPLEMENTATION; 407393 JAN-2007 UB04/DENTAL PROJECT AND YEAR END 2006 CHARGE; 69725  AUG-2007 INCREASE MESSAGE LENGTH ON CALL TO FS10P3M0; TO 6; 87017  AUG-2007 CHANGE THE EVALUATE OF THE FUNCTION VALUE; RETURNED FROM THE EXECUTION OF SUBMODULES; USED TO DETERMINE THE WORKING STORAGE AREA T; PASS TO FS01. MHSA USES WS01-REQUEST-MESSAGE;00004200; ALL OTHER MODULES USE FS01-REQUEST-MESSAGE; DUE TO DIFFERENT MESSAGE LENGTHS.; 78610  JAN-2008 ADD BATCH TRACKING FUNCTIONALITY  IO; TT283828 06/25/11 HIPAA 5010 PROJECT - RECOMPILE; TT373326 07/14/12 2011SOW20 - EXPAND CHARGE LINE FROM 40 TO 999; 01/01/13 2012SOW36 - CONTAINER CHANGE FOR OTR RECORD, 

FS10P1M0.CBL, FUNCTION: MEDICARE FEE SCHEDULE, 003300   05 FTF9P0M1-MODULE     PIC X(08)  VALUE 'FTF9P0M1'.; 003400   05 FTF9P0M2-MODULE     PIC X(08)  VALUE 'FTF9P0M2'.; 003500   05 FTF9P0M3-MODULE     PIC X(08)  VALUE 'FTF9P0M3'.

FS10P2M0.CBL, PROGRAM:   FS10P2M0 - (A) TRAN=0 REFUND BASE RECORD ROSTER; 

FS10P3M0.CBL, FUNCTION: MHSA TREATMENT PLANS                 FS10P3M0, 00146                                  FS10P3M0; 00147 LINKAGE SECTION.                         FS10P3M0; 00148                                  FS10P3M0; 00149 01 PARM-LEN            PIC 9(07).          FS10P3M0; 00148                                  FS10P3M0; 00150 01 PARM-INPUT.                         FS10P3M0; 00151   05 MHSA-FUNCTION        PIC X(08).          FS10P3M0; 00152   05 MHSA-OPTIONS.                      FS10P3M0; 00153     10 MHSA-IN-OPTION     PIC X OCCURS 20 TIMES.    FS10P3M0; -%%%-R2-RQ-69725-BEGIN                      FS10P3M0; *  05 FILLER           PIC X(31972).        FS10P3M0; 00154   05 FILLER           PIC X(64972).        FS10P3M0; -%%%-R2-RQ-69725-END                       FS10P3M0; 00158                                  FS10P3M0; 00155 01 MHSA-FUNCTION-OPTION-0-1 REDEFINES PARM-INPUT.        FS10P3M0; 00156   05 FILLER           PIC X(28).          FS10P3M0; -%%%-R2-RQ-69725-BEGIN                      FS10P3M0; *  05 FILLER           PIC X(31972).        FS10P3M0; 00154   05 FILLER           PIC X(64972).        FS10P3M0; -%%%-R2-RQ-69725-END                       FS10P3M0; 00158                                  FS10P3M0; 00159 01 MHSA-FUNCTION-OPTION-1 REDEFINES PARM-INPUT.         FS10P3M0; 00160   05 FILLER           PIC X(28).          FS10P3M0; 00161   05 MHSA-CONTRACT-ID-1     PIC 9(08).          FS10P3M0; 00162   05 MHSA-NEXT-PAGE-KEY     PIC X(55).          FS10P3M0; 00163   05 MHSA-NO-OF-PATIENTS-1    PIC 9(04).          FS10P3M0; 00164   05 MHSA-PATIENT-TABLE-1 OCCURS 26 TIMES.          FS10P3M0; 00165     10 MHSA-PATIENT-CD-1    PIC X(01).          FS10P3M0; 00166     10 MHSA-MEMBER-ID-1    PIC X(09).          FS10P3M0; -%%%-R2-RQ-69725-BEGIN                      FS10P3M0; *  05               PIC X(31645).        FS10P3M0; 00167   05 FILLER           PIC X(64645).        FS10P3M0; -%%%-R2-RQ-69725-END                       FS10P3M0; 00168                                  FS10P3M0; 00169 /                                 FS10P3M0, 00146                                  FS10P3M0; 00170 PROCEDURE DIVISION USING PARM-LEN                FS10P3M0; 00171              PARM-INPUT.               FS10P3M0; 00172                                  FS10P3M0; 00173   PERFORM; 00172     THRU; 00172                                  FS10P3M0; 00174   PERFORM; 00172     THRU; 00177                                  FS10P3M0; 00175   GO TO; 00177                                  FS10P3M0; 00178 /                                 FS10P3M0; 00179; 00180                                  FS10P3M0; 00181   MOVE SPACES       TO OUT-PARMS.            FS10P3M0; 00182                                  FS10P3M0; 00183   MOVE 'S'         TO OUT-RESPONSE.          FS10P3M0; 00182                                  FS10P3M0; 00184   MOVE 31         TO PARM-LEN.            FS10P3M0; 00182                                  FS10P3M0; 00185   MOVE ZERO        TO SUB               FS10P3M0; 00186                 FRM-SUB             FS10P3M0; 00187                 MSG-SUB             FS10P3M0; 00188                 FS10P3M0-1-ROSTER-SIZE.     FS10P3M0; 00191                                  FS10P3M0; 00242; 00243   EXIT.                            FS10P3M0; 00192                                  FS10P3M0; 00193 /                                 FS10P3M0; 00194; 00195                                  FS10P3M0; 00196   PERFORM VARYING SUB  FROM 1 BY 1 UNTIL SUB > 20   FS10P3M0; -%%%-R2-RQ-69725-BEGIN                      FS10P3M0; 00195      OR MHSA-IN-OPTION (SUB) = SPACES            FS10P3M0; -%%%-R2-RQ-69725-END                       FS10P3M0; 00197     EVALUATE MHSA-IN-OPTION (SUB)              FS10P3M0; 00198      WHEN '0' PERFORM 2100-GET-MHSA-IND  THRU 2100-EXIT  FS10P3M0; 00199      WHEN '1' PERFORM 2200-GET-MHSA-ROSTER THRU 2200-EXIT  FS10P3M0; 00201     END-EVALUATE                       FS10P3M0; 00202   END-PERFORM.                         FS10P3M0; 00204                                  FS10P3M0; 00242; 00243   EXIT.                            FS10P3M0; 00192                                  FS10P3M0; 00205 /                                 FS10P3M0; 00206 2100-GET-MHSA-IND.                        FS10P3M0; 00204                                  FS10P3M0; 00208   MOVE  MHSA-FUNCTION-OPTION-0-1(29:8)            FS10P3M0; 00209    TO  MHSA-CONTRACT-ID-0-0                 FS10P3M0; 00210   MOVE  MHSA-FUNCTION-OPTION-0-1(37:4)            FS10P3M0; 00211    TO  MHSA-NO-OF-PATIENTS-0-0               FS10P3M0; 10)    FS10P3M0; 00213   MOVE  MHSA-FUNCTION-OPTION-0-1(41:WS-POINTER1)       FS10P3M0; 00214    TO  MHSA-PATIENT-TABLE-0-0                FS10P3M0; 00215   COMPUTE WS-POINTER2 = 41 + WS-POINTER1           FS10P3M0; 00216   MOVE  MHSA-FUNCTION-OPTION-0-1(WS-POINTER2:8)       FS10P3M0; 00217    TO  MHSA-CONTRACT-ID-0-1                 FS10P3M0; 00218   COMPUTE WS-POINTER3 = 8 + WS-POINTER2            FS10P3M0; 00219   MOVE  MHSA-FUNCTION-OPTION-0-1(WS-POINTER3:55)       FS10P3M0; 00220    TO  MHSA-NEXT-PAGE-KEY-0-1                FS10P3M0; 00221   COMPUTE WS-POINTER4 = 55 + WS-POINTER3           FS10P3M0; 00222   MOVE  MHSA-FUNCTION-OPTION-0-1(WS-POINTER4:4)       FS10P3M0; 00223    TO  MHSA-NO-OF-PATIENTS-0-1               FS10P3M0; 00224   COMPUTE WS-POINTER5 = 4 + WS-POINTER4            FS10P3M0; 10)    FS10P3M0; 00226   MOVE  MHSA-FUNCTION-OPTION-0-1(WS-POINTER5:WS-POINTER6)  FS10P3M0; 00227    TO  MHSA-PATIENT-TABLE-0-1                FS10P3M0; 00228                                  FS10P3M0; 00229   MOVE MHSA-CONTRACT-ID-0-0  TO WS-CONTRACT-ID        FS10P3M0; 00230   MOVE WS-CONTRACT-ID(7:1)   TO WS-PARTITION         FS10P3M0; 00231   MOVE MHSA-NO-OF-PATIENTS-0-0 TO FS10P3M0-0-PAT-SIZE     FS10P3M0; 00237                                  FS10P3M0; 00206   PERFORM 2110-FETCH-MHSA-IND                 FS10P3M0; 00237     THRU 2110-FETCH-MHSA-IND-EXIT               FS10P3M0; 00237      VARYING MHSA-SUB FROM 1 BY 1; 00237        UNTIL MHSA-SUB > MHSA-NO-OF-PATIENTS-0-0.; 00237                                  FS10P3M0; 00238   MOVE LENGTH OF FS10P3M0-0-MESSAGE-AREA TO ADD-LEN      FS10P3M0; 00239   MOVE      FS10P3M0-0-MESSAGE-AREA TO ADD-MSG      FS10P3M0; 00240   PERFORM     U970-ADD-MESSAGE               FS10P3M0; 00241    .                             FS10P3M0; 00242 2100-EXIT.                            FS10P3M0; 00243   EXIT.                            FS10P3M0; 00244                                  FS10P3M0, 

FS10P4M0.CBL, PROGRAM:   FS10P4M0; CALLED PROGRAMS: NONE; ; ERROR MESSAGES: NONE; ; DATABASE TABLES: CLAIM_BATCH_TRACK; ; COPY MEMBERS:  NONE, 

FS20P0M0.CBL, PROGRAM:   FS20P0M0 - CONTRACT/MEMBER ROSTER SELECTION DRIVER; CALLED PROGRAMS: FS20P1M0; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:; FM01CC01 - MQ MESSAGE LAYOUT, 

FS20P1M0.CBL, PROGRAM:   FS20P1M0 - CONTRACT/MEMBER ROSTER SELECTION; CALLED PROGRAMS: -- NONE --; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS):; FADDRESS - ADDRESS        (READ); FASGPYRL - ASGN_PAYROLL_OFC   (READ); FCNTRXRF - CONTRACT_CROSS_REF  (READ); FCONTRCT - CONTRACT       (READ); FMBRELIG - MEMBER_ELIGIBILITY  (READ); FMEMBER - MEMBER        (READ); ; COPY MEMBERS:; FS20CC01 - INPUT/OTR REQUIREMENTS - CONT; FS20CC02 - INPUT/OTR REQUIREMENTS - SSN; FS20CC03 - INPUT/OTR REQUIREMENTS - CSACSF; FS20CC04 - INPUT/OTR REQUIREMENTS - ALPHA; FS20CC05 - OUTPUT/OTR REQUIREMENTS.; FWG07999 - ERROR LOG PARAMETERS., 

FS30P0M0.CBL, PROGRAM:   FS30P0M0 - ELIGIBILITY DRIVER.; CALLED PROGRAMS: FS31P0M0; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:; FM01CC01 - MQ MESSAGE LAYOUT, 

FS31P0M0.CBL, 

FS31P0M1.CBL, 

FS40P0M0.CBL, PROGRAM:   FS40P0M0 - ELIGIBILITY DETAILS DRIVER; CALLED PROGRAMS: FS41P0M0; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:; FM01CC01 - MQ MESSAGE LAYOUT, 

FS41P0M0.CBL, FUNCTION: ELIGIBILITY DETAILS                 FS41P0M0, 

FS50P0M0.CBL, PROGRAM:   FS50P0M0 - SPECIAL INFORMATION SELECTION DRIVER; CALLED PROGRAMS: FS50P1M0; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:; FM01CC01 - MQ MESSAGE LAYOUT, 

FS50P1M0.CBL, PROGRAM:   FS50P1M0 - SPECIAL INFORMATION RETRIEVAL; CALLED PROGRAMS: -- NONE --; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS):; FMBRELIG - MEMBER_ELIGIBILITY  (READ); FMEMBER - MEMBER        (READ); ; COPY MEMBERS:; FS50CC01 - INPUT/OTR REQUIREMENTS; FS50CC02 - TEMPORARY LIST; FS50CC03 - OUTPUT/OTR REQUIREMENTS.; FWG07999 - ERROR LOG PARAMETERS., 

FS60P0M0.CBL, PROGRAM:   FS60P0M0 - OPL DETAILS DRIVER; CALLED PROGRAMS: FS60P1M0; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:; FM01CC01 - MQ MESSAGE LAYOUT, 

FS60P1M0.CBL, PROGRAM:   FS60P1M0 - OPL DETAILS RETRIEVAL; CALLED PROGRAMS: -- NONE --; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS):; FMEMBER - MEMBER        (READ); ; COPY MEMBERS:; FS60CC01 - INPUT/OTR REQUIREMENTS; FS60CC02 - OUTPUT/OTR REQUIREMENTS.; FWG07999 - ERROR LOG PARAMETERS., 

FS70P0M0.CBL, 

FS70P0M1.CBL, 

FS70P0M2.CBL, 

FS70P0M3.CBL, 

FS80P0M0.CBL, PROGRAM:   FS80P0M0 - CLAIMS ROSTER BUSINESS DRIVER; CALLED PROGRAMS: FS10P1M0; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:; FS01CC01 - MQ MESSAGE LAYOUT, 

FS80P1M0.CBL, FUNCTION: CLAIMS ROSTER                    FS80P1M0, 00024   05 FS80P1M4-MODULE     PIC X(08)  VALUE 'FS80P1M4'.  FS80P1M0; 00024   05 FS80P1M5-MODULE     PIC X(08)  VALUE 'FS80P1M5'.  FS80P1M0; 00025   05 FS80P1M6-MODULE     PIC X(08)  VALUE 'FS80P1M6'.  FS80P1M0; 00026   05 FS80P1M7-MODULE     PIC X(08)  VALUE 'FS80P1M7'.  FS80P1M0; 00027   05 FS80P1M8-MODULE     PIC X(08)  VALUE 'FS80P1M8'.  FS80P1M0; 00028   05 FS80P1M9-MODULE     PIC X(08)  VALUE 'FS80P1M9'.  FS80P1M0

FS80P1M4.CBL, 003600   05 FS80P2M0-MODULE     PIC X(8) VALUE 'FS80P2M0'.; 003700   05 FH02DTE1-MODULE     PIC X(8) VALUE 'FH02DTE1'.; 003800   05 FH02DTE2-MODULE     PIC X(8) VALUE 'FH02DTE2'.

FS80P1M5.CBL, 003400   05 FS80P2M0-MODULE     PIC X(8) VALUE 'FS80P2M0'.; 003500   05 FH02DTE1-MODULE     PIC X(8) VALUE 'FH02DTE1'.; 003600   05 FH02DTE2-MODULE     PIC X(8) VALUE 'FH02DTE2'.

FS80P1M6.CBL, 

FS80P1M7.CBL, 

FS80P1M8.CBL, 

FS80P1M9.CBL, 

FS80P2M0.CBL, REMARKS.; For FUNCTIONS (Claims = 'L','Z','Y','O','P','Q','S','T','N',; 'F','A'); INPUT PASSED TO FS80P2M0:; ; Updated output passed back to Application:; ; ; HISTORY:, 090300; 090400 0130-CHECK-FOR-FUNCTION.; 090500; 090600   IF ROSTER-FUNCTIONS; 090700    CONTINUE; 090800   ELSE; 090900    INITIALIZE      FX71P0ME-PARMS; 09; 091100    MOVE MSG-01   TO FS80301-ERROR-MESSAGE; 091200    PERFORM; 091300   END-IF.; 091400/; ; 091600; 091700; ; 091900   IF TOTAL-CHRG-WAS-ENTERED; 09; 092100      GO TO; 092200   END-IF.; ; 092400   IF YES-DATE-RANGE; 092500     PERFORM 1200-OPEN-ALL-CURSOR2; 092600     PERFORM 1210-FETCH-ALL-CURSOR2; 092700      VARYING FS80401-NDX FROM 1 BY 1; 092800      UNTIL NOT SQL-SUCCESS; 092900       OR FS80401-NDX > WS-A-ROSTER-MAX; 09; 093100   ELSE; 093200     PERFORM 1100-OPEN-ALL-CURSOR1; 093300     PERFORM 1110-FETCH-ALL-CURSOR1; 093400      VARYING FS80401-NDX FROM 1 BY 1; 093500      UNTIL NOT SQL-SUCCESS; 093600       OR FS80401-NDX > WS-A-ROSTER-MAX; 093700     PERFORM 1120-CLOSE-ALL-CURSOR1; 093800   END-IF; 093900   .; 09; 094100   EXIT.; 094200/; ; 094400 1100-OPEN-ALL-CURSOR1.; ; ** OPEN CURSOR FOR ALL CLAIMS1; ; 094800   EXEC SQL; 094900     OPEN OPENALL_C1; 09; ; 095200   MOVE SQLCODE TO WS-S-SQLCODE.; 095300; 095400   EVALUATE TRUE; 095500; 095600    WHEN SQL-SUCCESS; 095700       CONTINUE; 095800    WHEN OTHER; 095900       INITIALIZE      FX71P0ME-PARMS; 09; 096100       MOVE MSG-02   TO FS80301-ERROR-MESSAGE; 096200       PERFORM; 096300   END-EVALUATE.; 096400/; ; 096600 1110-FETCH-ALL-CURSOR1.; 096700; ; ** FETCH CURSOR FOR ALL CLAIMS1; ; 097100     EXEC SQL; 097200      FETCH OPENALL_C1; 097300       INTO; 097400         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,; 097500         :TRAN-ADJUD-END-TS,; 097600         :CONTRACT-ID ,; 097700         :PATIENT-CD ,; 097800         :REPORTING-PLAN-CD,; 097900         :ORIG-CLM-ID ,; 09; 098100         :FIRST-SVC-BEGN-DT; 098200         :FIRST-SVC-BEGN-DT-NULL,; 098300         :LAST-SVC-END-DT; 098400         :LAST-SVC-END-DT-NULL ,; 098500         :CLM-PROCESS-DT; 098600         :CLM-PROCESS-DT-NULL ,; 098700         :FEP-PAID-DT; 098800         :FEP-PAID-DT-NULL,; *2007R2-TT69724; *        :TOT-CHG-AMT; *        :TOT-CHG-AMT-NULL ,; 099200         :TOTAL-ALL-CHG-AMT; 099300         :TOTAL-ALL-CHG-AMT-NULL ,; 099400         :TOTAL-PAID-AMT; 099500         :TOTAL-PAID-AMT-NULL ,; 099600         :CLM-DISPOSITION-CD ,; 099700         :CLM-PAYEE-CD ,; 099800         :CLM-CHG-CNT; 099900         :CLM-CHG-CNT-NULL ,; ; 100100         :MEDICARE-IND ,                 00; 100200         :COB-SPECULATVE-IND ,              00100100; 100300         :MDCR-SPECULTVE-IND,               00100200; 100400         :ANN-DED-APPLY-AMT,               00100300; 100500         :REG-CAT-ACCUM-IND,               00100400; 100600         :EOB-PRINT-IND                  00100500; 100700     END-EXEC                         00100600; 00100700; 100900   MOVE SQLCODE TO WS-S-SQLCODE.                00100800; 10; 101100   EVALUATE TRUE                        0010; 101200                                 00101100; 101300    WHEN SQL-SUCCESS                     00101200; 101400       PERFORM; 101500    WHEN SQL-ROW-NOT-FOUND                  00101400; 101600       PERFORM; 101700    WHEN OTHER                        00101600; 101800       INITIALIZE      FX71P0ME-PARMS         00101700; 101900       MOVE '03'    TO FX71P0ME-MSG-NO         00101800; 10; 102100       PERFORM; 102200                                 00102100; 102300   END-EVALUATE.                        00102200; 102400/                                 00102300; 00102400; 102600 1120-CLOSE-ALL-CURSOR1.                     00102500; 102700                                 00102600; 00102700; ** CLOSE CURSOR FOR ALL CLAIMS1                 00102800; 00102900; 103100   EXEC SQL                           0010; 103200     CLOSE OPENALL_C1                    00103100; 103300   END-EXEC                           00103200; 00103300; 103500   MOVE SQLCODE TO WS-S-SQLCODE.                00103400; 103600                                 00103500; 103700   EVALUATE TRUE                        00103600; 103800                                 00103700; 103900    WHEN SQL-SUCCESS                     00103800; 10; 104100    WHEN OTHER                        0010; 104200       INITIALIZE      FX71P0ME-PARMS         00104100; 104300       MOVE '04'    TO FX71P0ME-MSG-NO         00104200; 104400       MOVE MSG-04   TO FS80301-ERROR-MESSAGE      00104300; 104500       PERFORM; 104600                                 00104500; 104700   END-EVALUATE.                        00104600; 104800/                                 00104700; 00104800; 10; 105100                                 0010; 00105100; ** OPEN CURSOR FOR ALL CLAIMS2                 00105200; 00105300; 105500   EXEC SQL                           00105400; 105600     OPEN OPENALL_C2                     00105500; 105700   END-EXEC                           00105600; 00105700; 105900   MOVE SQLCODE TO WS-S-SQLCODE.                00105800; 10; 106100   EVALUATE TRUE                        0010; 106200                                 00106100; 106300    WHEN SQL-SUCCESS                     00106200; 106400       CONTINUE                       00106300; 106500    WHEN OTHER                        00106400; 106600       INITIALIZE      FX71P0ME-PARMS         00106500; 106700       MOVE '05'    TO FX71P0ME-MSG-NO         00106600; 106800       MOVE MSG-05   TO FS80301-ERROR-MESSAGE      00106700; 106900       PERFORM; 10; 107100   END-EVALUATE.                        0010; 107200/                                 00107100; 00107200; 107400 1210-FETCH-ALL-CURSOR2.                     00107300; 107500                                 00107400; 00107500; ** FETCH CURSOR FOR ALL CLAIMS2                 00107600; 00107700; 107900     EXEC SQL                         00107800; 10; 108100       INTO                        0010; 108200         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        00108100; 108300         :TRAN-ADJUD-END-TS,               00108200; 108400         :CONTRACT-ID ,                  00108300; 108500         :PATIENT-CD ,                  00108400; 108600         :REPORTING-PLAN-CD,               00108500; 108700         :ORIG-CLM-ID ,                  00108600; 108800         :CLM-FORM-CD ,                  00108700; 108900         :FIRST-SVC-BEGN-DT                00108800; 10; 109100         :LAST-SVC-END-DT                 0010; 109200         :LAST-SVC-END-DT-NULL ,             00109100; 109300         :CLM-PROCESS-DT                 00109200; 109400         :CLM-PROCESS-DT-NULL,              00109300; 109500         :FEP-PAID-DT                   00109400; 109600         :FEP-PAID-DT-NULL,                00109500; *2007R2-TT69724; *        :TOT-CHG-AMT                   00109700; *        :TOT-CHG-AMT-NULL ,               00109800; 1; 110100         :TOTAL-ALL-CHG-AMT-NULL ,            001; 110200         :TOTAL-PAID-AMT                 00110100; 110300         :TOTAL-PAID-AMT-NULL ,              00110200; 110400         :CLM-DISPOSITION-CD ,              00110300; 110500         :CLM-PAYEE-CD ,                 00110400; 110600         :CLM-CHG-CNT                   00110500; 110700         :CLM-CHG-CNT-NULL ,               00110600; 110800         :COB-IND ,                    00110700; 110900         :MEDICARE-IND ,                 00110800; 11; 111100         :MDCR-SPECULTVE-IND ,              0011; 111200         :ANN-DED-APPLY-AMT,               00111100; 111300         :REG-CAT-ACCUM-IND,               00111200; 111400         :EOB-PRINT-IND                  00111300; 111500     END-EXEC                         00111400; 00111500; 111700   MOVE SQLCODE TO WS-S-SQLCODE.                00111600; 111800                                 00111700; 111900   EVALUATE TRUE                        00111800; 11; 112100    WHEN SQL-SUCCESS                     0011; 112200       PERFORM; 112300    WHEN SQL-ROW-NOT-FOUND                  00112200; 112400       MOVE 09   TO FS80301-RESULT-CODE         00112300; 112500       MOVE SQLCODE TO FS80301-SQL-CODE           00112400; 112600       PERFORM; 112700    WHEN OTHER                        00112600; 112800       INITIALIZE      FX71P0ME-PARMS         00112700; 112900       MOVE '06'    TO FX71P0ME-MSG-NO         00112800; 11; 113100       PERFORM; 113200                                 00113100; 113300   END-EVALUATE.                        00113200; 113400/                                 00113300; 00113400; 113600 1220-CLOSE-ALL-CURSOR2.                     00113500; 113700                                 00113600; 00113700; ** CLOSE CURSOR FOR ALL CLAIMS2                 00113800; 00113900; 114100   EXEC SQL                           0011; 114200     CLOSE OPENALL_C2                    00114100; 114300   END-EXEC                           00114200; 00114300; 114500   MOVE SQLCODE TO WS-S-SQLCODE.                00114400; 114600                                 00114500; 114700   EVALUATE TRUE                        00114600; 114800                                 00114700; 114900    WHEN SQL-SUCCESS                     00114800; 11; 115100    WHEN OTHER                        0011; 115200       INITIALIZE      FX71P0ME-PARMS         00115100; 115300       MOVE '07'    TO FX71P0ME-MSG-NO         00115200; 115400       MOVE MSG-07   TO FS80301-ERROR-MESSAGE      00115300; 115500       PERFORM; 115600                                 00115500; 115700   END-EVALUATE.                        00115600; 115800                                 00115700; 115900/                                 00115800; *2007R2-TT69724; 0011; 116200 1300-PROCESS-ALL-CLMX.                      00116100; 00116200; 116400   IF YES-DATE-RANGE                      00116300; 116500     PERFORM 1500-OPEN-ALL-CURSOR2X              00116400; 116600     PERFORM 1500-FETCH-ALL-CURSOR2X             00116500; 116700      VARYING FS80401-NDX FROM 1 BY 1            00116600; 116800      UNTIL NOT SQL-SUCCESS                 00116700; 116900       OR FS80401-NDX > WS-A-ROSTER-MAX          00116800; 11; 117100   ELSE                            0011; 117200     PERFORM 1400-OPEN-ALL-CURSOR1X              00117100; 117300     PERFORM 1400-FETCH-ALL-CURSOR1X             00117200; 117400      VARYING FS80401-NDX FROM 1 BY 1            00117300; 117500      UNTIL NOT SQL-SUCCESS                 00117400; 117600       OR FS80401-NDX > WS-A-ROSTER-MAX          00117500; 117700     PERFORM 1400-CLOSE-ALL-CURSOR1X             00117600; 117800   END-IF                           00117700; 117900   .                              00117800; 11; 118100   EXIT.                            0011; 00118100; 118300 1400-OPEN-ALL-CURSOR1X.                     00118200; 00118300; 118500   EXEC SQL                           00118400; 118600     OPEN OPENALL_C1X                    00118500; 118700   END-EXEC                           00118600; 00118700; 118900   MOVE SQLCODE TO WS-S-SQLCODE.                00118800; 11; 119100   EVALUATE TRUE                        0011; 119200    WHEN SQL-SUCCESS                     00119100; 119300       CONTINUE                       00119200; 119400    WHEN OTHER                        00119300; 119500       INITIALIZE      FX71P0ME-PARMS         00119400; 119600       MOVE '32'    TO FX71P0ME-MSG-NO         00119500; 119700       MOVE MSG-32   TO FS80301-ERROR-MESSAGE      00119600; 119800       PERFORM; 119900   END-EVALUATE.                        00119800; 1; 001; 120200 1400-FETCH-ALL-CURSOR1X.                     00120100; 00120200; 120400   EXEC SQL                          00120300; 120500     FETCH OPENALL_C1X                    00120400; 120600     INTO                          00120500; 120700         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        00120600; 120800         :TRAN-ADJUD-END-TS,               00120700; 120900         :CONTRACT-ID ,                  00120800; 12; 121100         :REPORTING-PLAN-CD,               0012; 121200         :ORIG-CLM-ID ,                  00121100; 121300         :CLM-FORM-CD ,                  00121200; 121400         :FIRST-SVC-BEGN-DT                00121300; 121500         :FIRST-SVC-BEGN-DT-NULL,             00121400; 121600         :LAST-SVC-END-DT                 00121500; 121700         :LAST-SVC-END-DT-NULL ,             00121600; 121800         :CLM-PROCESS-DT                 00121700; 121900         :CLM-PROCESS-DT-NULL ,              00121800; 12; 122100         :FEP-PAID-DT-NULL,                0012; 122200         :TOTAL-ALL-CHG-AMT                00122100; 122300         :TOTAL-ALL-CHG-AMT-NULL ,            00122200; 122400         :TOTAL-PAID-AMT                 00122300; 122500         :TOTAL-PAID-AMT-NULL ,              00122400; 122600         :CLM-DISPOSITION-CD ,              00122500; 122700         :CLM-PAYEE-CD ,                 00122600; 122800         :CLM-CHG-CNT                   00122700; 122900         :CLM-CHG-CNT-NULL ,               00122800; 12; 123100         :MEDICARE-IND ,                 0012; 123200         :COB-SPECULATVE-IND ,              00123100; 123300         :MDCR-SPECULTVE-IND,               00123200; 123400         :ANN-DED-APPLY-AMT,               00123300; 123500         :REG-CAT-ACCUM-IND,               00123400; 123600         :EOB-PRINT-IND                  00123500; 123700   END-EXEC.                          00123600; 00123700; 123900   MOVE SQLCODE TO WS-S-SQLCODE.                00123800; 12; 124100   EVALUATE TRUE                        0012; 124200    WHEN SQL-SUCCESS                     00124100; 124300       PERFORM; 124400    WHEN SQL-ROW-NOT-FOUND                  00124300; 124500       PERFORM; 124600    WHEN OTHER                        00124500; 124700       INITIALIZE      FX71P0ME-PARMS         00124600; 124800       MOVE '33'    TO FX71P0ME-MSG-NO         00124700; 124900       MOVE MSG-33   TO FS80301-ERROR-MESSAGE      00124800; 12; 125100   END-EVALUATE.                        0012; 125200                                 00125100; 00125200; 125400 1400-CLOSE-ALL-CURSOR1X.                     00125300; 00125400; 125600   EXEC SQL                           00125500; 125700     CLOSE OPENALL_C1X                    00125600; 125800   END-EXEC                           00125700; 00125800; 12; 126100                                 0012; 126200   EVALUATE TRUE                        00126100; 126300    WHEN SQL-SUCCESS                     00126200; 126400       CONTINUE                       00126300; 126500    WHEN OTHER                        00126400; 126600       INITIALIZE      FX71P0ME-PARMS         00126500; 126700       MOVE '34'    TO FX71P0ME-MSG-NO         00126600; 126800       MOVE MSG-34   TO FS80301-ERROR-MESSAGE      00126700; 126900       PERFORM; 12; 127100/                                 0012; 00127100; 127300 1500-OPEN-ALL-CURSOR2X.                     00127200; 00127300; 127500   EXEC SQL                           00127400; 127600     OPEN OPENALL_C2                     00127500; 127700   END-EXEC                           00127600; 00127700; 127900   MOVE SQLCODE TO WS-S-SQLCODE.                00127800; 12; 128100   EVALUATE TRUE                        0012; 128200    WHEN SQL-SUCCESS                     00128100; 128300       CONTINUE                       00128200; 128400    WHEN OTHER                        00128300; 128500       INITIALIZE      FX71P0ME-PARMS         00128400; 128600       MOVE '35'    TO FX71P0ME-MSG-NO         00128500; 128700       MOVE MSG-35   TO FS80301-ERROR-MESSAGE      00128600; 128800       PERFORM; 128900   END-EVALUATE.                        00128800; 12; 0012; 129200 1500-FETCH-ALL-CURSOR2X.                     00129100; 00129200; 129400     EXEC SQL                         00129300; 129500      FETCH OPENALL_C2X                  00129400; 129600       INTO                        00129500; 129700         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        00129600; 129800         :TRAN-ADJUD-END-TS,               00129700; 129900         :CONTRACT-ID ,                  00129800; 1; 130100         :REPORTING-PLAN-CD,               001; 130200         :ORIG-CLM-ID ,                  00130100; 130300         :CLM-FORM-CD ,                  00130200; 130400         :FIRST-SVC-BEGN-DT                00130300; 130500         :FIRST-SVC-BEGN-DT-NULL ,            00130400; 130600         :LAST-SVC-END-DT                 00130500; 130700         :LAST-SVC-END-DT-NULL ,             00130600; 130800         :CLM-PROCESS-DT                 00130700; 130900         :CLM-PROCESS-DT-NULL,              00130800; 13; 131100         :FEP-PAID-DT-NULL,                0013; 131200         :TOTAL-ALL-CHG-AMT                00131100; 131300         :TOTAL-ALL-CHG-AMT-NULL ,            00131200; 131400         :TOTAL-PAID-AMT                 00131300; 131500         :TOTAL-PAID-AMT-NULL ,              00131400; 131600         :CLM-DISPOSITION-CD ,              00131500; 131700         :CLM-PAYEE-CD ,                 00131600; 131800         :CLM-CHG-CNT                   00131700; 131900         :CLM-CHG-CNT-NULL ,               00131800; 13; 132100         :MEDICARE-IND ,                 0013; 132200         :COB-SPECULATVE-IND ,              00132100; 132300         :MDCR-SPECULTVE-IND ,              00132200; 132400         :ANN-DED-APPLY-AMT,               00132300; 132500         :REG-CAT-ACCUM-IND,               00132400; 132600         :EOB-PRINT-IND                  00132500; 132700     END-EXEC                         00132600; 00132700; 132900   MOVE SQLCODE TO WS-S-SQLCODE.                00132800; 13; 133100   EVALUATE TRUE                        0013; 133200    WHEN SQL-SUCCESS                     00133100; 133300       PERFORM; 133400    WHEN SQL-ROW-NOT-FOUND                  00133300; 133500       PERFORM; 133600    WHEN OTHER                        00133500; 133700       INITIALIZE      FX71P0ME-PARMS         00133600; 133800       MOVE '36'    TO FX71P0ME-MSG-NO         00133700; 133900       MOVE MSG-36   TO FS80301-ERROR-MESSAGE      00133800; 13; 134100   END-EVALUATE.                        0013; 134200                                 00134100; 00134200; 134400 1500-CLOSE-ALL-CURSOR2X.                     00134300; 00134400; 134600   EXEC SQL                           00134500; 134700     CLOSE OPENALL_C2X                    00134600; 134800   END-EXEC                           00134700; 00134800; 13; 135100                                 0013; 135200   EVALUATE TRUE                        00135100; 135300    WHEN SQL-SUCCESS                     00135200; 135400       CONTINUE                       00135300; 135500    WHEN OTHER                        00135400; 135600       INITIALIZE      FX71P0ME-PARMS         00135500; 135700       MOVE '37'    TO FX71P0ME-MSG-NO         00135600; 135800       MOVE MSG-37   TO FS80301-ERROR-MESSAGE      00135700; 135900       PERFORM; 13; 136100                                 0013; 136200/                                 00136100; 136300; *2007R2-TT69724; 00136400; 136600   IF TOTAL-CHRG-WAS-ENTERED                  00136500; 136700     PERFORM 2300-PROCESS-NONDRUG-CLMX THRU 2300-EXIT    00136600; 136800      GO TO; 136900   END-IF.                           00136800; 00136900; 137100   IF YES-DATE-RANGE                      0013; 137200    PERFORM 2200-OPEN-NON-DRUG-CURSOR2            00137100; 137300    PERFORM 2200-FETCH-NON-DRUG-CURSOR2            00137200; 137400     VARYING FS80401-NDX FROM 1 BY 1             00137300; 137500     UNTIL NOT SQL-SUCCESS                  00137400; 137600       OR FS80401-NDX > WS-A-ROSTER-MAX           00137500; 137700    PERFORM 2200-CLOSE-NON-DRUG-CURSOR2            00137600; 137800   ELSE                             00137700; 137900    PERFORM 2100-OPEN-NON-DRUG-CURSOR1            00137800; 13; 138100     VARYING FS80401-NDX FROM 1 BY 1             0013; 138200     UNTIL NOT SQL-SUCCESS                  00138100; 138300       OR FS80401-NDX > WS-A-ROSTER-MAX           00138200; 138400    PERFORM 2100-CLOSE-NON-DRUG-CURSOR1            00138300; 138500   END-IF                            00138400; 138600   .                              00138500; 138700; 138800   EXIT.                            00138700; 138900                                 00138800; 00138900; 139100 2100-OPEN-NON-DRUG-CURSOR1.                   0013; 139200                                 00139100; 00139200; ** OPEN CURSOR FOR NON-DRUG CLAIMS 1              00139300; 00139400; 139600   EXEC SQL                           00139500; 139700     OPEN NONDRUG_C1                     00139600; 139800   END-EXEC                           00139700; 00139800; 1; 140100                                 001; 140200   EVALUATE TRUE                        00140100; 140300                                 00140200; 140400    WHEN SQL-SUCCESS                     00140300; 140500       CONTINUE                       00140400; 140600    WHEN OTHER                        00140500; 140700       INITIALIZE      FX71P0ME-PARMS         00140600; 140800       MOVE '08'    TO FX71P0ME-MSG-NO         00140700; 140900       MOVE MSG-08   TO FS80301-ERROR-MESSAGE      00140800; 14; 141100                                 0014; 141200   END-EVALUATE.                        00141100; 00141200; 141400 2100-FETCH-NON-DRUG-CURSOR1.                   00141300; 00141400; ** FETCH CURSOR FOR NON-DRUG CLAIMS               00141500; 00141600; 141800     EXEC SQL                         00141700; 141900      FETCH NONDRUG_C1                   00141800; 14; 142100         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        0014; 142200         :TRAN-ADJUD-END-TS,               00142100; 142300         :CONTRACT-ID ,                  00142200; 142400         :PATIENT-CD ,                  00142300; 142500         :REPORTING-PLAN-CD,               00142400; 142600         :ORIG-CLM-ID ,                  00142500; 142700         :CLM-FORM-CD ,                  00142600; 142800         :FIRST-SVC-BEGN-DT                00142700; 142900         :FIRST-SVC-BEGN-DT-NULL,             00142800; 14; 143100         :LAST-SVC-END-DT-NULL ,             0014; 143200         :CLM-PROCESS-DT                 00143100; 143300         :CLM-PROCESS-DT-NULL ,              00143200; 143400         :FEP-PAID-DT                   00143300; 143500         :FEP-PAID-DT-NULL ,               00143400; *2007R2-TT69724; *        :TOT-CHG-AMT                   00143600; *        :TOT-CHG-AMT-NULL ,               00143700; 143900         :TOTAL-ALL-CHG-AMT                00143800; 14; 144100         :TOTAL-PAID-AMT                 0014; 144200         :TOTAL-PAID-AMT-NULL ,              00144100; 144300         :CLM-DISPOSITION-CD ,              00144200; 144400         :CLM-PAYEE-CD ,                 00144300; 144500         :CLM-CHG-CNT                   00144400; 144600         :CLM-CHG-CNT-NULL ,               00144500; 144700         :COB-IND ,                    00144600; 144800         :MEDICARE-IND ,                 00144700; 144900         :COB-SPECULATVE-IND ,              00144800; 14; 145100         :ANN-DED-APPLY-AMT,               0014; 145200         :REG-CAT-ACCUM-IND,               00145100; 145300         :EOB-PRINT-IND                  00145200; 145400     END-EXEC                         00145300; 00145400; 145600   MOVE SQLCODE TO WS-S-SQLCODE.                00145500; 145700                                 00145600; 145800   EVALUATE TRUE                        00145700; 145900                                 00145800; 14; 146100       PERFORM; 146200    WHEN SQL-ROW-NOT-FOUND                  00146100; 146300       PERFORM; 146400    WHEN OTHER                        00146300; 146500       INITIALIZE      FX71P0ME-PARMS         00146400; 146600       MOVE '09'    TO FX71P0ME-MSG-NO         00146500; 146700       MOVE MSG-09   TO FS80301-ERROR-MESSAGE      00146600; 146800       PERFORM; 146900                                 00146800; 14; 0014; 147200 2100-CLOSE-NON-DRUG-CURSOR1.                   00147100; 147300                                 00147200; 00147300; ** CLOSE CURSOR FOR NON-DRUG CLAIMS               00147400; 00147500; 147700   EXEC SQL                           00147600; 147800     CLOSE NONDRUG_C1                    00147700; 147900   END-EXEC                           00147800; 00147900; 148100   MOVE SQLCODE TO WS-S-SQLCODE.                0014; 148200                                 00148100; 148300   EVALUATE TRUE                        00148200; 148400                                 00148300; 148500    WHEN SQL-SUCCESS                     00148400; 148600       CONTINUE                       00148500; 148700    WHEN OTHER                        00148600; 148800       INITIALIZE      FX71P0ME-PARMS         00148700; 148900       MOVE '10'    TO FX71P0ME-MSG-NO         00148800; 14; 149100       PERFORM; 149200                                 00149100; 149300   END-EVALUATE.                        00149200; 149400/                                 00149300; 00149400; 149600 2200-OPEN-NON-DRUG-CURSOR2.                   00149500; 149700                                 00149600; 00149700; ** OPEN CURSOR FOR NON-DRUG CLAIMS               00149800; 00149900; 150100   EXEC SQL                           001; 150200     OPEN NONDRUG_C2                     00150100; 150300   END-EXEC                           00150200; 00150300; 150500   MOVE SQLCODE TO WS-S-SQLCODE.                00150400; 150600                                 00150500; 150700   EVALUATE TRUE                        00150600; 150800                                 00150700; 150900    WHEN SQL-SUCCESS                     00150800; 15; 151100    WHEN OTHER                        0015; 151200       INITIALIZE      FX71P0ME-PARMS         00151100; 151300       MOVE '11'    TO FX71P0ME-MSG-NO         00151200; 151400       MOVE MSG-11   TO FS80301-ERROR-MESSAGE      00151300; 151500       PERFORM; 151600                                 00151500; 151700   END-EVALUATE.                        00151600; 00151700; 151900 2200-FETCH-NON-DRUG-CURSOR2.                   00151800; 00151900; ** FETCH CURSOR FOR NON-DRUG CLAIMS               0015; 00152100; 152300     EXEC SQL                         00152200; 152400      FETCH NONDRUG_C2                   00152300; 152500       INTO                        00152400; 152600         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        00152500; 152700         :TRAN-ADJUD-END-TS,               00152600; 152800         :CONTRACT-ID ,                  00152700; 152900         :PATIENT-CD ,                  00152800; 15; 153100         :ORIG-CLM-ID ,                  0015; 153200         :CLM-FORM-CD ,                  00153100; 153300         :FIRST-SVC-BEGN-DT                00153200; 153400         :FIRST-SVC-BEGN-DT-NULL,             00153300; 153500         :LAST-SVC-END-DT                 00153400; 153600         :LAST-SVC-END-DT-NULL,              00153500; 153700         :CLM-PROCESS-DT                 00153600; 153800         :CLM-PROCESS-DT-NULL,              00153700; 153900         :FEP-PAID-DT                   00153800; 15; *2007R2-TT69724; *        :TOT-CHG-AMT                   00154100; *        :TOT-CHG-AMT-NULL ,               00154200; 154400         :TOTAL-ALL-CHG-AMT                00154300; 154500         :TOTAL-ALL-CHG-AMT-NULL ,            00154400; 154600         :TOTAL-PAID-AMT                 00154500; 154700         :TOTAL-PAID-AMT-NULL,              00154600; 154800         :CLM-DISPOSITION-CD ,              00154700; 154900         :CLM-PAYEE-CD ,                 00154800; 15; 155100         :CLM-CHG-CNT-NULL ,               0015; 155200         :COB-IND ,                    00155100; 155300         :MEDICARE-IND ,                 00155200; 155400         :COB-SPECULATVE-IND ,              00155300; 155500         :MDCR-SPECULTVE-IND,               00155400; 155600         :ANN-DED-APPLY-AMT,               00155500; 155700         :REG-CAT-ACCUM-IND,               00155600; 155800         :EOB-PRINT-IND                  00155700; 155900     END-EXEC                         00155800; 00155900; 156100   MOVE SQLCODE TO WS-S-SQLCODE.                0015; 156200                                 00156100; 156300   EVALUATE TRUE                        00156200; 156400    WHEN SQL-SUCCESS                     00156300; 156500       PERFORM; 156600    WHEN SQL-ROW-NOT-FOUND                  00156500; 156700       PERFORM; 156800    WHEN OTHER                        00156700; 156900       INITIALIZE      FX71P0ME-PARMS         00156800; 15; 157100       MOVE MSG-12   TO FS80301-ERROR-MESSAGE      0015; 157200       PERFORM; 157300   END-EVALUATE.                        00157200; 00157300; 157500 2200-CLOSE-NON-DRUG-CURSOR2.                   00157400; 157600                                 00157500; 00157600; ** CLOSE CURSOR FOR NON-DRUG CLAIMS               00157700; 00157800; 15; 158100     CLOSE NONDRUG_C2                    0015; 158200   END-EXEC                           00158100; 00158200; 158400   MOVE SQLCODE TO WS-S-SQLCODE.                00158300; 158500                                 00158400; 158600   EVALUATE TRUE                        00158500; 158700                                 00158600; 158800    WHEN SQL-SUCCESS                     00158700; 158900       CONTINUE                       00158800; 15; 159100       INITIALIZE      FX71P0ME-PARMS         0015; 159200       MOVE '13'    TO FX71P0ME-MSG-NO         00159100; 159300       MOVE MSG-13   TO FS80301-ERROR-MESSAGE      00159200; 159400       PERFORM; 159500                                 00159400; 159600   END-EVALUATE.                        00159500; 159700/                                 00159600; *2007R2-TT69724; 00159800; 1; 160100                                 001; 00160100; 160300   IF YES-DATE-RANGE                      00160200; 160400    PERFORM 2500-OPEN-NON-DRUG-CURSOR2X            00160300; 160500    PERFORM 2500-FETCH-NON-DRUG-CURSOR2X           00160400; 160600     VARYING FS80401-NDX FROM 1 BY 1             00160500; 160700     UNTIL NOT SQL-SUCCESS                  00160600; 160800       OR FS80401-NDX > WS-A-ROSTER-MAX           00160700; 160900    PERFORM 2500-CLOSE-NON-DRUG-CURSOR2X           00160800; 16; 161100    PERFORM 2400-OPEN-NON-DRUG-CURSOR1X            0016; 161200    PERFORM 2400-FETCH-NON-DRUG-CURSOR1X           00161100; 161300     VARYING FS80401-NDX FROM 1 BY 1             00161200; 161400     UNTIL NOT SQL-SUCCESS                  00161300; 161500       OR FS80401-NDX > WS-A-ROSTER-MAX           00161400; 161600    PERFORM 2400-CLOSE-NON-DRUG-CURSOR1X           00161500; 161700   END-IF                            00161600; 161800   .                              00161700; 161900 2300-EXIT.                            00161800; 16; 162100                                 0016; 00162100; 162300 2400-OPEN-NON-DRUG-CURSOR1X.                   00162200; 00162300; 162500   EXEC SQL                           00162400; 162600     OPEN NONDRUG_C1X                    00162500; 162700   END-EXEC                           00162600; 00162700; 162900   MOVE SQLCODE TO WS-S-SQLCODE.                00162800; 16; 163100   EVALUATE TRUE                        0016; 163200    WHEN SQL-SUCCESS                     00163100; 163300       CONTINUE                       00163200; 163400    WHEN OTHER                        00163300; 163500       INITIALIZE      FX71P0ME-PARMS         00163400; 163600       MOVE '38'    TO FX71P0ME-MSG-NO         00163500; 163700       MOVE MSG-38   TO FS80301-ERROR-MESSAGE      00163600; 163800       PERFORM; 163900   END-EVALUATE.                        00163800; 16; 0016; 164200 2400-FETCH-NON-DRUG-CURSOR1X.                  00164100; 00164200; 164400     EXEC SQL                         00164300; 164500      FETCH NONDRUG_C1X                  00164400; 164600       INTO                        00164500; 164700         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        00164600; 164800         :TRAN-ADJUD-END-TS,               00164700; 164900         :CONTRACT-ID ,                  00164800; 16; 165100         :REPORTING-PLAN-CD,               0016; 165200         :ORIG-CLM-ID ,                  00165100; 165300         :CLM-FORM-CD ,                  00165200; 165400         :FIRST-SVC-BEGN-DT                00165300; 165500         :FIRST-SVC-BEGN-DT-NULL,             00165400; 165600         :LAST-SVC-END-DT                 00165500; 165700         :LAST-SVC-END-DT-NULL ,             00165600; 165800         :CLM-PROCESS-DT                 00165700; 165900         :CLM-PROCESS-DT-NULL ,              00165800; 16; 166100         :FEP-PAID-DT-NULL ,               0016; 166200         :TOTAL-ALL-CHG-AMT                00166100; 166300         :TOTAL-ALL-CHG-AMT-NULL ,            00166200; 166400         :TOTAL-PAID-AMT                 00166300; 166500         :TOTAL-PAID-AMT-NULL ,              00166400; 166600         :CLM-DISPOSITION-CD ,              00166500; 166700         :CLM-PAYEE-CD ,                 00166600; 166800         :CLM-CHG-CNT                   00166700; 166900         :CLM-CHG-CNT-NULL ,               00166800; 16; 167100         :MEDICARE-IND ,                 0016; 167200         :COB-SPECULATVE-IND ,              00167100; 167300         :MDCR-SPECULTVE-IND,               00167200; 167400         :ANN-DED-APPLY-AMT,               00167300; 167500         :REG-CAT-ACCUM-IND,               00167400; 167600         :EOB-PRINT-IND                  00167500; 167700     END-EXEC                         00167600; 00167700; 167900   MOVE SQLCODE TO WS-S-SQLCODE.                00167800; 16; 168100   EVALUATE TRUE                        0016; 168200    WHEN SQL-SUCCESS                     00168100; 168300       PERFORM; 168400    WHEN SQL-ROW-NOT-FOUND                  00168300; 168500       PERFORM; 168600    WHEN OTHER                        00168500; 168700       INITIALIZE      FX71P0ME-PARMS         00168600; 168800       MOVE '39'    TO FX71P0ME-MSG-NO         00168700; 168900       MOVE MSG-39   TO FS80301-ERROR-MESSAGE      00168800; 16; 169100   END-EVALUATE.                        0016; 169200                                 00169100; 00169200; 169400 2400-CLOSE-NON-DRUG-CURSOR1X.                  00169300; 00169400; 169600   EXEC SQL                           00169500; 169700     CLOSE NONDRUG_C1X                    00169600; 169800   END-EXEC                           00169700; 00169800; 1; 170100                                 001; 170200   EVALUATE TRUE                        00170100; 170300    WHEN SQL-SUCCESS                     00170200; 170400       CONTINUE                       00170300; 170500    WHEN OTHER                        00170400; 170600       INITIALIZE      FX71P0ME-PARMS         00170500; 170700       MOVE '40'    TO FX71P0ME-MSG-NO         00170600; 170800       MOVE MSG-40   TO FS80301-ERROR-MESSAGE      00170700; 170900       PERFORM; 17; 171100                                 0017; 171200/                                 00171100; 00171200; 171400 2500-OPEN-NON-DRUG-CURSOR2X.                   00171300; 00171400; 171600   EXEC SQL                           00171500; 171700     OPEN NONDRUG_C2X                    00171600; 171800   END-EXEC                           00171700; 00171800; 17; 172100                                 0017; 172200   EVALUATE TRUE                        00172100; 172300    WHEN SQL-SUCCESS                     00172200; 172400       CONTINUE                       00172300; 172500    WHEN OTHER                        00172400; 172600       INITIALIZE      FX71P0ME-PARMS         00172500; 172700       MOVE '41'    TO FX71P0ME-MSG-NO         00172600; 172800       MOVE MSG-41   TO FS80301-ERROR-MESSAGE      00172700; 172900       PERFORM; 17; 173100                                 0017; 00173100; 173300 2500-FETCH-NON-DRUG-CURSOR2X.                  00173200; 00173300; 173500     EXEC SQL                         00173400; 173600      FETCH NONDRUG_C2X                  00173500; 173700       INTO                        00173600; 173800         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        00173700; 173900         :TRAN-ADJUD-END-TS,               00173800; 17; 174100         :PATIENT-CD ,                  0017; 174200         :REPORTING-PLAN-CD,               00174100; 174300         :ORIG-CLM-ID ,                  00174200; 174400         :CLM-FORM-CD ,                  00174300; 174500         :FIRST-SVC-BEGN-DT                00174400; 174600         :FIRST-SVC-BEGN-DT-NULL,             00174500; 174700         :LAST-SVC-END-DT                 00174600; 174800         :LAST-SVC-END-DT-NULL,              00174700; 174900         :CLM-PROCESS-DT                 00174800; 17; 175100         :FEP-PAID-DT                   0017; 175200         :FEP-PAID-DT-NULL,                00175100; 175300         :TOTAL-ALL-CHG-AMT                00175200; 175400         :TOTAL-ALL-CHG-AMT-NULL ,            00175300; 175500         :TOTAL-PAID-AMT                 00175400; 175600         :TOTAL-PAID-AMT-NULL,              00175500; 175700         :CLM-DISPOSITION-CD ,              00175600; 175800         :CLM-PAYEE-CD ,                 00175700; 175900         :CLM-CHG-CNT                   00175800; 17; 176100         :COB-IND ,                    0017; 176200         :MEDICARE-IND ,                 00176100; 176300         :COB-SPECULATVE-IND ,              00176200; 176400         :MDCR-SPECULTVE-IND,               00176300; 176500         :ANN-DED-APPLY-AMT,               00176400; 176600         :REG-CAT-ACCUM-IND,               00176500; 176700         :EOB-PRINT-IND                  00176600; 176800     END-EXEC                         00176700; 00176800; 17; 177100                                 0017; 177200   EVALUATE TRUE                        00177100; 177300                                 00177200; 177400    WHEN SQL-SUCCESS                     00177300; 177500       PERFORM; 177600    WHEN SQL-ROW-NOT-FOUND                  00177500; 177700       PERFORM; 177800    WHEN OTHER                        00177700; 177900       INITIALIZE      FX71P0ME-PARMS         00177800; 17; 178100       MOVE MSG-42   TO FS80301-ERROR-MESSAGE      0017; 178200       PERFORM; 178300   END-EVALUATE.                        00178200; 178400                                 00178300; 00178400; 178600 2500-CLOSE-NON-DRUG-CURSOR2X.                  00178500; 00178600; 178800   EXEC SQL                           00178700; 178900     CLOSE NONDRUG_C2X                    00178800; 17; 0017; 179200   MOVE SQLCODE TO WS-S-SQLCODE.                00179100; 179300                                 00179200; 179400   EVALUATE TRUE                        00179300; 179500    WHEN SQL-SUCCESS                     00179400; 179600       CONTINUE                       00179500; 179700    WHEN OTHER                        00179600; 179800       INITIALIZE      FX71P0ME-PARMS         00179700; 179900       MOVE '43'    TO FX71P0ME-MSG-NO         00179800; 1; 180100       PERFORM; 180200   END-EVALUATE.                        00180100; 180300                                 00180200; 180400/                                 00180300; 00180400; 180600; *2007R2-TT69724; 00180700; 180900   IF TOTAL-CHRG-WAS-ENTERED                  00180800; 18; 181100      GO TO; 181200   END-IF.                           00181100; 00181200; 181400   IF YES-DATE-RANGE                      00181300; 181500     PERFORM 3200-OPEN-DRUG-CURSOR2              00181400; 181600     PERFORM 3210-FETCH-DRUG-CURSOR2             00181500; 181700     VARYING FS80401-NDX FROM 1 BY 1             00181600; 181800      UNTIL NOT SQL-SUCCESS                 00181700; 181900       OR FS80401-NDX > WS-A-ROSTER-MAX          00181800; 18; 182100   ELSE                            0018; 182200     PERFORM 3100-OPEN-DRUG-CURSOR1              00182100; 182300     PERFORM 3110-FETCH-DRUG-CURSOR1             00182200; 182400     VARYING FS80401-NDX FROM 1 BY 1             00182300; 182500      UNTIL NOT SQL-SUCCESS                 00182400; 182600       OR FS80401-NDX > WS-A-ROSTER-MAX          00182500; 182700     PERFORM 3120-CLOSE-DRUG-CURSOR1             00182600; 182800   END-IF                           00182700; 182900   .                              00182800; 18; 183100   EXIT.                            0018; 183200/                                 00183100; 00183200; 183400 3100-OPEN-DRUG-CURSOR1.                     00183300; 183500                                 00183400; 00183500; ** OPEN CURSOR FOR DRUG CLAIMS1                 00183600; 00183700; 183900   EXEC SQL                           00183800; 18; 184100   END-EXEC                           0018; 00184100; 184300   MOVE SQLCODE TO WS-S-SQLCODE.                00184200; 184400                                 00184300; 184500   EVALUATE TRUE                        00184400; 184600                                 00184500; 184700    WHEN SQL-SUCCESS                     00184600; 184800       CONTINUE                       00184700; 184900    WHEN OTHER                        00184800; 18; 185100       MOVE '14'    TO FX71P0ME-MSG-NO         0018; 185200       MOVE MSG-14   TO FS80301-ERROR-MESSAGE      00185100; 185300       PERFORM; 185400                                 00185300; 185500   END-EVALUATE.                        00185400; 185600/                                 00185500; 00185600; 185800 3110-FETCH-DRUG-CURSOR1.                     00185700; 185900                                 00185800; 00185900; ** FETCH CURSOR FOR DRUG CLAIMS1                0018; 00186100; 186300     EXEC SQL                         00186200; 186400      FETCH DRUG_C1                    00186300; 186500       INTO                        00186400; 186600         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        00186500; 186700         :TRAN-ADJUD-END-TS,               00186600; 186800         :CONTRACT-ID ,                  00186700; 186900         :PATIENT-CD ,                  00186800; 18; 187100         :ORIG-CLM-ID ,                  0018; 187200         :CLM-FORM-CD ,                  00187100; 187300         :FIRST-SVC-BEGN-DT                00187200; 187400         :FIRST-SVC-BEGN-DT-NULL ,            00187300; 187500         :LAST-SVC-END-DT                 00187400; 187600         :LAST-SVC-END-DT-NULL ,             00187500; 187700         :CLM-PROCESS-DT                 00187600; 187800         :CLM-PROCESS-DT-NULL ,              00187700; 187900         :FEP-PAID-DT                   00187800; 18; *2007R2-TT69724; *        :TOT-CHG-AMT                   00188100; *        :TOT-CHG-AMT-NULL ,               00188200; 188400         :TOTAL-ALL-CHG-AMT                00188300; 188500         :TOTAL-ALL-CHG-AMT-NULL ,            00188400; 188600         :TOTAL-PAID-AMT                 00188500; 188700         :TOTAL-PAID-AMT-NULL ,              00188600; 188800         :CLM-DISPOSITION-CD ,              00188700; 188900         :CLM-PAYEE-CD ,                 00188800; 18; 189100         :CLM-CHG-CNT-NULL ,               0018; 189200         :COB-IND ,                    00189100; 189300         :MEDICARE-IND ,                 00189200; 189400         :COB-SPECULATVE-IND ,              00189300; 189500         :MDCR-SPECULTVE-IND,               00189400; 189600         :ANN-DED-APPLY-AMT,               00189500; 189700         :REG-CAT-ACCUM-IND,               00189600; 189800         :EOB-PRINT-IND                  00189700; 189900     END-EXEC                         00189800; 00189900; 190100   MOVE SQLCODE TO WS-S-SQLCODE.                001; 190200                                 00190100; 190300   EVALUATE TRUE                        00190200; 190400                                 00190300; 190500    WHEN SQL-SUCCESS                     00190400; 190600       PERFORM; 190700    WHEN SQL-ROW-NOT-FOUND                  00190600; 190800       PERFORM; 190900    WHEN OTHER                        00190800; 19; 191100       MOVE '15'    TO FX71P0ME-MSG-NO         0019; 191200       MOVE MSG-15   TO FS80301-ERROR-MESSAGE      00191100; 191300       PERFORM; 191400                                 00191300; 191500   END-EVALUATE.                        00191400; 191600/                                 00191500; 00191600; 191800 3120-CLOSE-DRUG-CURSOR1.                     00191700; 191900                                 00191800; 00191900; ** CLOSE CURSOR FOR DRUG CLAIMS1                0019; 00192100; 192300   EXEC SQL                           00192200; 192400     CLOSE DRUG_C1                      00192300; 192500   END-EXEC                           00192400; 00192500; 192700   MOVE SQLCODE TO WS-S-SQLCODE.                00192600; 192800                                 00192700; 192900   EVALUATE TRUE                        00192800; 19; 193100    WHEN SQL-SUCCESS                     0019; 193200       CONTINUE                       00193100; 193300    WHEN OTHER                        00193200; 193400       INITIALIZE      FX71P0ME-PARMS         00193300; 193500       MOVE '16'    TO FX71P0ME-MSG-NO         00193400; 193600       MOVE MSG-16   TO FS80301-ERROR-MESSAGE      00193500; 193700       PERFORM; 193800                                 00193700; 193900   END-EVALUATE.                        00193800; 19; 0019; 194200 3200-OPEN-DRUG-CURSOR2.                     00194100; 194300                                 00194200; 00194300; ** OPEN CURSOR FOR DRUG CLAIMS2                 00194400; 00194500; 194700   EXEC SQL                           00194600; 194800     OPEN DRUG_C2                      00194700; 194900   END-EXEC                           00194800; 00194900; 195100   MOVE SQLCODE TO WS-S-SQLCODE.                0019; 195200                                 00195100; 195300   EVALUATE TRUE                        00195200; 195400                                 00195300; 195500    WHEN SQL-SUCCESS                     00195400; 195600       CONTINUE                       00195500; 195700    WHEN OTHER                        00195600; 195800       INITIALIZE      FX71P0ME-PARMS         00195700; 195900       MOVE '17'    TO FX71P0ME-MSG-NO         00195800; 19; 196100       PERFORM; 196200                                 00196100; 196300   END-EVALUATE.                        00196200; 196400/                                 00196300; 00196400; 196600 3210-FETCH-DRUG-CURSOR2.                     00196500; 196700                                 00196600; 00196700; ** FETCH CURSOR FOR DRUG CLAIMS2                00196800; 00196900; 197100     EXEC SQL                         0019; 197200      FETCH DRUG_C2                    00197100; 197300       INTO                        00197200; 197400         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        00197300; 197500         :TRAN-ADJUD-END-TS,               00197400; 197600         :CONTRACT-ID ,                  00197500; 197700         :PATIENT-CD ,                  00197600; 197800         :REPORTING-PLAN-CD,               00197700; 197900         :ORIG-CLM-ID ,                  00197800; 19; 198100         :FIRST-SVC-BEGN-DT                0019; 198200         :FIRST-SVC-BEGN-DT-NULL ,            00198100; 198300         :LAST-SVC-END-DT                 00198200; 198400         :LAST-SVC-END-DT-NULL ,             00198300; 198500         :CLM-PROCESS-DT                 00198400; 198600         :CLM-PROCESS-DT-NULL ,              00198500; 198700         :FEP-PAID-DT                   00198600; 198800         :FEP-PAID-DT-NULL ,               00198700; 198900         :TOT-CHG-AMT                   00198800; 19; 199100         :TOTAL-PAID-AMT                 0019; 199200         :TOTAL-PAID-AMT-NULL ,              00199100; 199300         :CLM-DISPOSITION-CD ,              00199200; 199400         :CLM-PAYEE-CD ,                 00199300; 199500         :CLM-CHG-CNT                   00199400; 199600         :CLM-CHG-CNT-NULL ,               00199500; 199700         :COB-IND ,                    00199600; 199800         :MEDICARE-IND ,                 00199700; 199900         :COB-SPECULATVE-IND ,              00199800; ; 200100         :ANN-DED-APPLY-AMT,               00; 200200         :REG-CAT-ACCUM-IND,               00200100; 200300         :EOB-PRINT-IND                  00200200; 200400     END-EXEC                         00200300; 00200400; 200600   MOVE SQLCODE TO WS-S-SQLCODE.                00200500; 200700                                 00200600; 200800   EVALUATE TRUE                        00200700; 200900                                 00200800; 20; 201100       PERFORM; 201200    WHEN SQL-ROW-NOT-FOUND                  00201100; 201300       PERFORM; 201400    WHEN OTHER                        00201300; 201500       INITIALIZE      FX71P0ME-PARMS         00201400; 201600       MOVE '18'    TO FX71P0ME-MSG-NO         00201500; 201700       MOVE MSG-18   TO FS80301-ERROR-MESSAGE      00201600; 201800       PERFORM; 201900                                 00201800; 20; 202100/                                 0020; 00202100; 202300 3220-CLOSE-DRUG-CURSOR2.                     00202200; 202400                                 00202300; 00202400; ** CLOSE CURSOR FOR DRUG CLAIMS2                00202500; 00202600; 202800   EXEC SQL                           00202700; 202900     CLOSE DRUG_C2                      00202800; 20; 0020; 203200   MOVE SQLCODE TO WS-S-SQLCODE.                00203100; 203300                                 00203200; 203400   EVALUATE TRUE                        00203300; 203500                                 00203400; 203600    WHEN SQL-SUCCESS                     00203500; 203700       CONTINUE                       00203600; 203800    WHEN OTHER                        00203700; 203900       INITIALIZE      FX71P0ME-PARMS         00203800; 20; 204100       MOVE MSG-19   TO FS80301-ERROR-MESSAGE      0020; 204200       PERFORM; 204300                                 00204200; 204400   END-EVALUATE.                        00204300; 204500/                                 00204400; 204600 3300-PROCESS-DRUG-CLAIMSX.                    00204500; 00204600; 204800   IF YES-DATE-RANGE                      00204700; 204900     PERFORM 3500-OPEN-DRUG-CURSOR2X             00204800; 20; 205100     VARYING FS80401-NDX FROM 1 BY 1             0020; 205200      UNTIL NOT SQL-SUCCESS                 00205100; 205300       OR FS80401-NDX > WS-A-ROSTER-MAX          00205200; 205400     PERFORM 3500-CLOSE-DRUG-CURSOR2X             00205300; 205500   ELSE                            00205400; 205600     PERFORM 3400-OPEN-DRUG-CURSOR1X             00205500; 205700     PERFORM 3400-FETCH-DRUG-CURSOR1X             00205600; 205800     VARYING FS80401-NDX FROM 1 BY 1             00205700; 205900      UNTIL NOT SQL-SUCCESS                 00205800; 20; 206100     PERFORM 3400-CLOSE-DRUG-CURSOR1X             0020; 206200   END-IF                           00206100; 206300   .                              00206200; 206400 3300-EXIT.                            00206300; 206500   EXIT.                            00206400; 00206500; 206700 3400-OPEN-DRUG-CURSOR1X.                     00206600; 00206700; 206900   EXEC SQL                           00206800; 20; 207100   END-EXEC                           0020; 00207100; 207300   MOVE SQLCODE TO WS-S-SQLCODE.                00207200; 207400                                 00207300; 207500   EVALUATE TRUE                        00207400; 207600    WHEN SQL-SUCCESS                     00207500; 207700       CONTINUE                       00207600; 207800    WHEN OTHER                        00207700; 207900       INITIALIZE      FX71P0ME-PARMS         00207800; 20; 208100       MOVE MSG-44   TO FS80301-ERROR-MESSAGE      0020; 208200       PERFORM; 208300   END-EVALUATE.                        00208200; 208400                                 00208300; 00208400; 208600 3400-FETCH-DRUG-CURSOR1X.                    00208500; 00208600; 208800     EXEC SQL                         00208700; 208900      FETCH DRUG_C1X                    00208800; 20; 209100         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        0020; 209200         :TRAN-ADJUD-END-TS,               00209100; 209300         :CONTRACT-ID ,                  00209200; 209400         :PATIENT-CD ,                  00209300; 209500         :REPORTING-PLAN-CD,               00209400; 209600         :ORIG-CLM-ID ,                  00209500; 209700         :CLM-FORM-CD ,                  00209600; 209800         :FIRST-SVC-BEGN-DT                00209700; 209900         :FIRST-SVC-BEGN-DT-NULL ,            00209800; 2; 210100         :LAST-SVC-END-DT-NULL ,             002; 210200         :CLM-PROCESS-DT                 00210100; 210300         :CLM-PROCESS-DT-NULL ,              00210200; 210400         :FEP-PAID-DT                   00210300; 210500         :FEP-PAID-DT-NULL ,               00210400; 210600         :TOTAL-ALL-CHG-AMT                00210500; 210700         :TOTAL-ALL-CHG-AMT-NULL ,            00210600; 210800         :TOTAL-PAID-AMT                 00210700; 210900         :TOTAL-PAID-AMT-NULL ,              00210800; 21; 211100         :CLM-PAYEE-CD ,                 0021; 211200         :CLM-CHG-CNT                   00211100; 211300         :CLM-CHG-CNT-NULL ,               00211200; 211400         :COB-IND ,                    00211300; 211500         :MEDICARE-IND ,                 00211400; 211600         :COB-SPECULATVE-IND ,              00211500; 211700         :MDCR-SPECULTVE-IND,               00211600; 211800         :ANN-DED-APPLY-AMT,               00211700; 211900         :REG-CAT-ACCUM-IND,               00211800; 21; 212100     END-EXEC                         0021; 00212100; 212300   MOVE SQLCODE TO WS-S-SQLCODE.                00212200; 212400                                 00212300; 212500   EVALUATE TRUE                        00212400; 212600    WHEN SQL-SUCCESS                     00212500; 212700       PERFORM; 212800    WHEN SQL-ROW-NOT-FOUND                  00212700; 212900       PERFORM; 21; 213100       INITIALIZE      FX71P0ME-PARMS         0021; 213200       MOVE '45'    TO FX71P0ME-MSG-NO         00213100; 213300       MOVE MSG-45   TO FS80301-ERROR-MESSAGE      00213200; 213400       PERFORM; 213500   END-EVALUATE.                        00213400; 213600                                 00213500; 00213600; 213800 3400-CLOSE-DRUG-CURSOR1X.                    00213700; 00213800; 21; 214100     CLOSE DRUG_C1X                     0021; 214200   END-EXEC                           00214100; 00214200; 214400   MOVE SQLCODE TO WS-S-SQLCODE.                00214300; 214500                                 00214400; 214600   EVALUATE TRUE                        00214500; 214700    WHEN SQL-SUCCESS                     00214600; 214800       CONTINUE                       00214700; 214900    WHEN OTHER                        00214800; 21; 215100       MOVE '46'    TO FX71P0ME-MSG-NO         0021; 215200       MOVE MSG-46   TO FS80301-ERROR-MESSAGE      00215100; 215300       PERFORM; 215400   END-EVALUATE.                        00215300; 215500/                                 00215400; 00215500; 215700 3500-OPEN-DRUG-CURSOR2X.                     00215600; 00215700; 215900   EXEC SQL                           00215800; 21; 216100   END-EXEC                           0021; 00216100; 216300   MOVE SQLCODE TO WS-S-SQLCODE.                00216200; 216400                                 00216300; 216500   EVALUATE TRUE                        00216400; 216600    WHEN SQL-SUCCESS                     00216500; 216700       CONTINUE                       00216600; 216800    WHEN OTHER                        00216700; 216900       INITIALIZE      FX71P0ME-PARMS         00216800; 21; 217100       MOVE MSG-47   TO FS80301-ERROR-MESSAGE      0021; 217200       PERFORM; 217300   END-EVALUATE.                        00217200; 217400                                 00217300; 00217400; 217600 3500-FETCH-DRUG-CURSOR2X.                    00217500; 00217600; 217800     EXEC SQL                         00217700; 217900      FETCH DRUG_C2X                    00217800; 21; 218100         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        0021; 218200         :TRAN-ADJUD-END-TS,               00218100; 218300         :CONTRACT-ID ,                  00218200; 218400         :PATIENT-CD ,                  00218300; 218500         :REPORTING-PLAN-CD,               00218400; 218600         :ORIG-CLM-ID ,                  00218500; 218700         :CLM-FORM-CD ,                  00218600; 218800         :FIRST-SVC-BEGN-DT                00218700; 218900         :FIRST-SVC-BEGN-DT-NULL ,            00218800; 21; 219100         :LAST-SVC-END-DT-NULL ,             0021; 219200         :CLM-PROCESS-DT                 00219100; 219300         :CLM-PROCESS-DT-NULL ,              00219200; 219400         :FEP-PAID-DT                   00219300; 219500         :FEP-PAID-DT-NULL ,               00219400; 219600         :TOTAL-ALL-CHG-AMT                00219500; 219700         :TOTAL-ALL-CHG-AMT-NULL ,            00219600; 219800         :TOTAL-PAID-AMT                 00219700; 219900         :TOTAL-PAID-AMT-NULL ,              00219800; 2; 220100         :CLM-PAYEE-CD ,                 002; 220200         :CLM-CHG-CNT                   00220100; 220300         :CLM-CHG-CNT-NULL ,               00220200; 220400         :COB-IND ,                    00220300; 220500         :MEDICARE-IND ,                 00220400; 220600         :COB-SPECULATVE-IND ,              00220500; 220700         :MDCR-SPECULTVE-IND,               00220600; 220800         :ANN-DED-APPLY-AMT,               00220700; 220900         :REG-CAT-ACCUM-IND,               00220800; 22; 221100     END-EXEC                         0022; 00221100; 221300   MOVE SQLCODE TO WS-S-SQLCODE.                00221200; 221400                                 00221300; 221500   EVALUATE TRUE                        00221400; 221600    WHEN SQL-SUCCESS                     00221500; 221700       PERFORM; 221800    WHEN SQL-ROW-NOT-FOUND                  00221700; 221900       PERFORM; 22; 222100       INITIALIZE      FX71P0ME-PARMS         0022; 222200       MOVE '48'    TO FX71P0ME-MSG-NO         00222100; 222300       MOVE MSG-48   TO FS80301-ERROR-MESSAGE      00222200; 222400       PERFORM; 222500   END-EVALUATE.                        00222400; 222600                                 00222500; 00222600; 222800 3500-CLOSE-DRUG-CURSOR2X.                    00222700; 00222800; 22; 223100     CLOSE DRUG_C2X                     0022; 223200   END-EXEC                           00223100; 00223200; 223400   MOVE SQLCODE TO WS-S-SQLCODE.                00223300; 223500                                 00223400; 223600   EVALUATE TRUE                        00223500; 223700    WHEN SQL-SUCCESS                     00223600; 223800       CONTINUE                       00223700; 223900    WHEN OTHER                        00223800; 22; 224100       MOVE '49'    TO FX71P0ME-MSG-NO         0022; 224200       MOVE MSG-49   TO FS80301-ERROR-MESSAGE      00224100; 224300       PERFORM; 224400   END-EVALUATE.                        00224300; 224500                                 00224400; 224600/                                 00224500; 2007-NOTE;THIS CODE/PARAGRAPH NEEDS TO BE VERIFIED IF STILL   00224600; NEEDED BECAUSE SCAN SHOWS VALUE "N" NOT POPULATED FOR THE   00224700; DB2-BUSINESS-FUNCTION.                     00224800; 00224900; 225100; 00225100; 225300   PERFORM 4100-OPEN-MULTIV-CURSOR1              00225200; 225400   PERFORM 4110-FETCH-MULTIV-CURSOR1              00225300; 225500    VARYING FS80401-NDX FROM 1 BY 1              00225400; 225600    UNTIL NOT SQL-SUCCESS                   00225500; 225700      OR FS80401-NDX > WS-A-ROSTER-MAX            00225600; 225800   PERFORM 4120-CLOSE-MULTIV-CURSOR1              00225700; 225900   .                              00225800; 22; 0022; 226200 4100-OPEN-MULTIV-CURSOR1.                    00226100; 226300                                 00226200; 00226300; ** OPEN CURSOR FOR MULTIV-CURSOR1                00226400; 00226500; 226700   EXEC SQL                           00226600; 226800     OPEN MULTIV_C1                     00226700; 226900   END-EXEC                           00226800; 00226900; 227100   MOVE SQLCODE TO WS-S-SQLCODE.                0022; 227200                                 00227100; 227300   EVALUATE TRUE                        00227200; 227400                                 00227300; 227500    WHEN SQL-SUCCESS                     00227400; 227600       CONTINUE                       00227500; 227700    WHEN OTHER                        00227600; 227800       INITIALIZE      FX71P0ME-PARMS         00227700; 227900       MOVE '20'    TO FX71P0ME-MSG-NO         00227800; 22; 228100       PERFORM; 228200                                 00228100; 228300   END-EVALUATE.                        00228200; 228400                                 00228300; 00228400; 228600 4110-FETCH-MULTIV-CURSOR1.                    00228500; 228700                                 00228600; 00228700; ** FETCH CURSOR FOR MULTIV-CURSOR1               00228800; 00228900; 229100     EXEC SQL                         0022; 229200      FETCH MULTIV_C1                   00229100; 229300       INTO                        00229200; 229400         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,        00229300; 229500         :TRAN-ADJUD-END-TS,               00229400; 229600         :CONTRACT-ID ,                  00229500; 229700         :PATIENT-CD ,                  00229600; 229800         :REPORTING-PLAN-CD,               00229700; 229900         :ORIG-CLM-ID ,                  00229800; 2; 230100         :FIRST-SVC-BEGN-DT                002; 230200         :FIRST-SVC-BEGN-DT-NULL ,            00230100; 230300         :LAST-SVC-END-DT                 00230200; 230400         :LAST-SVC-END-DT-NULL ,             00230300; 230500         :CLM-PROCESS-DT                 00230400; 230600         :CLM-PROCESS-DT-NULL ,              00230500; 230700         :FEP-PAID-DT                   00230600; 230800         :FEP-PAID-DT-NULL ,               00230700; 230900         :TOT-CHG-AMT                   00230800; 23; 231100         :TOTAL-PAID-AMT                 0023; 231200         :TOTAL-PAID-AMT-NULL ,              00231100; 231300         :CLM-DISPOSITION-CD ,              00231200; 231400         :CLM-PAYEE-CD ,                 00231300; 231500         :CLM-CHG-CNT                   00231400; 231600         :CLM-CHG-CNT-NULL ,               00231500; 231700         :COB-IND ,                    00231600; 231800         :MEDICARE-IND ,                 00231700; 231900         :COB-SPECULATVE-IND ,              00231800; 23; 232100         :ANN-DED-APPLY-AMT,               0023; 232200         :REG-CAT-ACCUM-IND,               00232100; 232300         :EOB-PRINT-IND                  00232200; 232400     END-EXEC                         00232300; 00232400; 232600   MOVE SQLCODE TO WS-S-SQLCODE.                00232500; 232700                                 00232600; 232800   EVALUATE TRUE                        00232700; 232900                                 00232800; 23; 233100       PERFORM; 233200    WHEN SQL-ROW-NOT-FOUND                  00233100; 233300       PERFORM; 233400    WHEN OTHER                        00233300; 233500       INITIALIZE      FX71P0ME-PARMS         00233400; 233600       MOVE '21'    TO FX71P0ME-MSG-NO         00233500; 233700       MOVE MSG-21   TO FS80301-ERROR-MESSAGE      00233600; 233800       PERFORM; 233900                                 00233800; 23; 234100                                 0023; 00234100; 234300 4120-CLOSE-MULTIV-CURSOR1.                    00234200; 234400                                 00234300; 00234400; ** CLOSE CURSOR FOR MULTIV-CURSOR1               00234500; 00234600; 234800   EXEC SQL                           00234700; 234900     CLOSE MULTIV_C1                     00234800; 23; 0023; 235200   MOVE SQLCODE TO WS-S-SQLCODE.                00235100; 235300                                 00235200; 235400   EVALUATE TRUE                        00235300; 235500                                 00235400; 235600    WHEN SQL-SUCCESS                     00235500; 235700       CONTINUE                       00235600; 235800    WHEN OTHER                        00235700; 235900       INITIALIZE      FX71P0ME-PARMS         00235800; 23; 236100       MOVE MSG-22   TO FS80301-ERROR-MESSAGE      0023; 236200       PERFORM; 236300                                 00236200; 236400   END-EVALUATE.                        00236300; 236500/                                 00236400; 00236500; 236700; 236800                                 00236700; 236900   IF FS80301-PLAN-CODE   > SPACES AND            00236800; 23; 237100     IF FS80301-PLAN-CODE = REPORTING-PLAN-CD OF      0023; 237200                 DCLADJUD-CLAIM   AND      00237100; 237300      FS80301-CLAIM-NUMBER = ORIG-CLM-ID OF DCLADJUD-CLAIM 00237200; 237400      SET FS80401-NDX   TO 1               00237300; 237500      SET CLAIM-FOUND   TO TRUE              00237400; 237600      PERFORM 5100-LOAD-ROSTER-TABLE            00237500; 237700      MOVE SPACES     TO FS80301-PLAN-CODE       00237600; 237800                  FS80301-CLAIM-NUMBER     00237700; 237900     ELSE                           00237800; 23; 238100     END-IF                          0023; 238200   ELSE                            00238100; 238300     PERFORM 5100-LOAD-ROSTER-TABLE              00238200; 238400   END-IF                           00238300; 238500    .                             00238400; 00238500; 238700; 238800   EXIT.                            00238700; 238900                                 00238800; 00238900; 239100 5100-LOAD-ROSTER-TABLE.                     0023; 239200                                 00239100; 239300   PERFORM 5110-GET-PROVIDER-NM                00239200; 239400                                 00239300; 239500   ADD 1 TO FS80401-NUM-ROWS-IN-ROSTER             00239400; 239600                                 00239500; 239700   MOVE FEP-CLAIM-TRAN-ID  OF DCLADJUD-CLAIM         00239600; 239800    TO FS80401-FEP-CLAIM-TRAN-ID               00239700; 239900    OF FS80401-ROSTER-TABLE(FS80401-NDX)           00239800; 2; 240100   MOVE TRAN-ADJUD-END-TS  OF DCLADJUD-CLAIM         002; 240200    TO FS80401-ADJUDICATION-TS                00240100; 240300    OF FS80401-ROSTER-TABLE(FS80401-NDX)           00240200; 240400                                 00240300; 240500   MOVE CONTRACT-ID     OF DCLADJUD-CLAIM         00240400; 240600    TO FS80401-CONTRACT-ID                  00240500; 240700    OF FS80401-ROSTER-TABLE(FS80401-NDX)           00240600; 240800                                 00240700; 240900   MOVE PATIENT-CD     OF DCLADJUD-CLAIM         00240800; 24; 241100    OF FS80401-ROSTER-TABLE(FS80401-NDX)           0024; 241200                                 00241100; 241300   MOVE REPORTING-PLAN-CD  OF DCLADJUD-CLAIM         00241200; 241400    TO FS80401-PLAN-CODE                   00241300; 241500    OF FS80401-ROSTER-TABLE(FS80401-NDX)           00241400; 241600                                 00241500; 241700   MOVE ORIG-CLM-ID     OF DCLADJUD-CLAIM         00241600; 241800    TO FS80401-CLAIM-NUMBER                  00241700; 241900    OF FS80401-ROSTER-TABLE(FS80401-NDX)           00241800; 24; 242100   MOVE CLM-DISPOSITION-CD OF DCLADJUD-CLAIM         0024; 242200    TO FS80401-CLM-DISPOSITION                00242100; 242300    OF FS80401-ROSTER-TABLE(FS80401-NDX)           00242200; 242400                                 00242300; 242500   MOVE CLM-PAYEE-CD    OF DCLADJUD-CLAIM         00242400; 242600    TO FS80401-DIR-OF-PAY                   00242500; 242700    OF FS80401-ROSTER-TABLE(FS80401-NDX)           00242600; 242800                                 00242700; 242900   IF FIRST-SVC-BEGN-DT-NULL = 0                00242800; 24; 243100      TO FS80401-FIRST-SVC-BEGN-DT              0024; 243200      OF FS80401-ROSTER-TABLE(FS80401-NDX)          00243100; 243300   ELSE                            00243200; 243400     MOVE SPACES                       00243300; 243500      TO FS80401-FIRST-SVC-BEGN-DT              00243400; 243600      OF FS80401-ROSTER-TABLE(FS80401-NDX)          00243500; 243700   END-IF                           00243600; 243800                                 00243700; 243900   IF LAST-SVC-END-DT-NULL = 0                 00243800; 24; 244100      TO FS80401-LAST-SVC-END-DT               0024; 244200      OF FS80401-ROSTER-TABLE(FS80401-NDX)          00244100; 244300   ELSE                            00244200; 244400     MOVE SPACES                       00244300; 244500      TO FS80401-LAST-SVC-END-DT               00244400; 244600      OF FS80401-ROSTER-TABLE(FS80401-NDX)          00244500; 244700   END-IF                           00244600; 244800                                 00244700; 244900   IF CLM-PROCESS-DT-NULL = 0                 00244800; 24; 245100      TO FS80401-CLAIM-PROCESS-DT              0024; 245200      OF FS80401-ROSTER-TABLE(FS80401-NDX)          00245100; 245300   ELSE                            00245200; 245400     MOVE SPACES                       00245300; 245500      TO FS80401-CLAIM-PROCESS-DT              00245400; 245600      OF FS80401-ROSTER-TABLE(FS80401-NDX)          00245500; 245700   END-IF                           00245600; 245800                                 00245700; 245900   IF FEP-PAID-DT-NULL = 0                   00245800; 24; 246100      TO FS80401-DATE-PAID                  0024; 246200      OF FS80401-ROSTER-TABLE(FS80401-NDX)          00246100; 246300   ELSE                            00246200; 246400     MOVE SPACES                       00246300; 246500      TO FS80401-DATE-PAID                  00246400; 246600      OF FS80401-ROSTER-TABLE(FS80401-NDX)          00246500; 246700   END-IF                           00246600; 246800                                 00246700; *2007R2-TT69724; *  IF TOT-CHG-AMT-NULL = 0 AND                 00246900; *    TOT-CHG-AMT     OF DCLADJUD-CLAIM > ZEROES     0024; 247200   IF TOTAL-ALL-CHG-AMT-NULL = 0 AND              00247100; 247300     TOTAL-ALL-CHG-AMT   OF DCLADJUD-CLAIM > ZEROES    00247200; 247400     MOVE TOTAL-ALL-CHG-AMT  OF DCLADJUD-CLAIM        00247300; 247500      TO FS80401-TOT-CHRG-AMT                00247400; 247600      OF FS80401-ROSTER-TABLE(FS80401-NDX)          00247500; 247700   ELSE                            00247600; 247800     MOVE ZEROES                       00247700; 247900      TO FS80401-TOT-CHRG-AMT                00247800; 24; 248100   END-IF                           0024; 248200                                 00248100; 248300   IF TOTAL-PAID-AMT-NULL = 0 AND               00248200; 248400     TOTAL-PAID-AMT    OF DCLADJUD-CLAIM > ZEROES    00248300; 248500     MOVE TOTAL-PAID-AMT  OF DCLADJUD-CLAIM         00248400; 248600       TO FS80401-AMOUNT-PAID                00248500; 248700       OF FS80401-ROSTER-TABLE(FS80401-NDX)         00248600; 248800   ELSE                            00248700; 248900     MOVE ZEROES                       00248800; 24; 249100       OF FS80401-ROSTER-TABLE(FS80401-NDX)         0024; 249200   END-IF                           00249100; 249300                                 00249200; 249400   IF CLM-CHG-CNT-NULL = 0                   00249300; 249500     MOVE CLM-CHG-CNT     OF DCLADJUD-CLAIM        00249400; 249600      TO FS80401-CLM-NO-OF-CHGS               00249500; 249700      OF FS80401-ROSTER-TABLE(FS80401-NDX)          00249600; 249800   ELSE                            00249700; 249900     MOVE ZEROES                       00249800; 2; 250100      OF FS80401-ROSTER-TABLE(FS80401-NDX)          002; 250200   END-IF                           00250100; 250300                                 00250200; 250400   IF PROVIDER-NM OF DCLPERFORM-PROVIDER > SPACES      00250300; 250500     MOVE PROVIDER-NM OF DCLPERFORM-PROVIDER         00250400; 250600             TO FS80401-PERF-PROV-NM         00250500; 250700             OF FS80401-ROSTER-TABLE(FS80401-NDX)  00250600; 250800   ELSE                            00250700; 250900     MOVE SPACES   TO FS80401-PERF-PROV-NM         00250800; 25; 251100   END-IF                           0025; 251200                                 00251100; 251300   IF CLM-FORM-CD   OF DCLADJUD-CLAIM > SPACES       00251200; 251400     MOVE 'F'    TO FS80401-CLAIM-FORM          00251300; 251500             OF FS80401-ROSTER-TABLE(FS80401-NDX)  00251400; 251600   ELSE                            00251500; 251700     MOVE 'P'    TO FS80401-CLAIM-FORM          00251600; 251800             OF FS80401-ROSTER-TABLE(FS80401-NDX)  00251700; 251900   END-IF                           00251800; 25; 252100                                 0025; 252200   IF COB-SPECULATVE-IND  OF DCLADJUD-CLAIM = '1'      00252100; 252300     MOVE 'S'    TO FS80401-CLM-COB           00252200; 252400             OF FS80401-ROSTER-TABLE(FS80401-NDX)  00252300; 252500   ELSE                            00252400; 252600     IF COB-IND   OF DCLADJUD-CLAIM = '1'         00252500; 2007-R2 TT#69726                        00252600; 252800       PERFORM 5120-GET-COB-IND-I THRU 5120-EXIT      00252700; MOVE 'Y'   TO FS80401-CLM-COB           00252800; OF FS80401-ROSTER-TABLE(FS80401-NDX)  00252900; 253100     ELSE                          0025; 253200       MOVE 'N'   TO FS80401-CLM-COB           00253100; 253300              OF FS80401-ROSTER-TABLE(FS80401-NDX)  00253200; 253400     END-IF                         00253300; 253500   END-IF.                           00253400; 253600                                 00253500; 253700   IF MDCR-SPECULTVE-IND   OF DCLADJUD-CLAIM = '1'    00253600; 253800     MOVE 'S'     TO FS80401-CLM-MED           00253700; 253900              OF FS80401-ROSTER-TABLE(FS80401-NDX)  00253800; 25; 254100     IF MEDICARE-IND OF DCLADJUD-CLAIM = '1'        0025; 2007-R2 TT#69726                        00254100; 254300       PERFORM 5130-GET-MED-IND-I THRU 5130-EXIT      00254200; MOVE 'Y'   TO FS80401-CLM-MED           00254300; OF FS80401-ROSTER-TABLE(FS80401-NDX)  00254400; 254600     ELSE                          00254500; 254700       MOVE 'N'   TO FS80401-CLM-MED           00254600; 254800              OF FS80401-ROSTER-TABLE(FS80401-NDX)  00254700; 254900     END-IF                         00254800; 25; 255100                                 0025; 255200   IF ANN-DED-APPLY-AMT  OF DCLADJUD-CLAIM > ZEROES     00255100; 255300     MOVE 'Y'    TO FS80401-ANN-DEDUCTIBLE        00255200; 255400             OF FS80401-ROSTER-TABLE(FS80401-NDX)  00255300; 255500   ELSE                            00255400; 255600     MOVE 'N'    TO FS80401-ANN-DEDUCTIBLE        00255500; 255700             OF FS80401-ROSTER-TABLE(FS80401-NDX)  00255600; 255800   END-IF                           00255700; 255900                                 00255800; 25; 256100     MOVE 'Y'     TO FS80401-CATASTROPHIC-IND      0025; 256200              OF FS80401-ROSTER-TABLE(FS80401-NDX)  00256100; 256300   ELSE                            00256200; 256400     MOVE 'N'     TO FS80401-CATASTROPHIC-IND      00256300; 256500              OF FS80401-ROSTER-TABLE(FS80401-NDX)  00256400; 256600   END-IF                           00256500; 256700                                 00256600; 2009-R4 TT#175671                        00256700; 256900   MOVE EOB-PRINT-IND    OF DCLADJUD-CLAIM         00256800; 25; 257100    OF FS80401-ROSTER-TABLE(FS80401-NDX)           0025; 257200   .                              00257100; 257300/                                 00257200; 257400 5110-GET-PROVIDER-NM.                      00257300; 257500                                 00257400; 257600   INITIALIZE      DCLPERFORM-PROVIDER          00257500; 257700   MOVE FEP-CLAIM-TRAN-ID OF DCLADJUD-CLAIM          00257600; 257800    TO FEP-CLAIM-TRAN-ID OF DCLADJUD-CHARGE          00257700; 257900                                 00257800; 25; 258100     SELECT D.PROVIDER_NM                  0025; 258200      INTO :DCLPERFORM-PROVIDER.PROVIDER-NM         00258100; 258300      FROM PERFORM_PROVIDER D                00258200; 258400     WHERE D.PERF_PROVIDER_ID =               00258300; 258500        ( SELECT C.PERF_PROVIDER_ID            00258400; 258600          FROM ADJUD_CHARGE C              00258500; 258700          WHERE C.FEP_CLAIM_TRAN_ID =          00258600; 258800             :DCLADJUD-CHARGE.FEP-CLAIM-TRAN-ID    00258700; 258900          AND C.CLM_CHG_NBR = 1)             00258800; 25; 259100                                 0025; 259200   MOVE SQLCODE TO WS-S-SQLCODE.                00259100; 259300                                 00259200; 259400   EVALUATE TRUE                        00259300; 259500    WHEN SQL-SUCCESS                     00259400; 259600       CONTINUE                       00259500; 259700    WHEN SQL-ROW-NOT-FOUND                  00259600; 259800       SET SQL-SUCCESS TO TRUE               00259700; 259900    WHEN OTHER                        00259800; 2; 260100       MOVE '23'    TO FX71P0ME-MSG-NO         002; 260200       MOVE MSG-23   TO FS80301-ERROR-MESSAGE      00260100; 260300       PERFORM; 260400   END-EVALUATE.                        00260300; 00260400; 2007-R2 TT#69726 BEGIN.                     00260500; 260700 5120-GET-COB-IND-I.                       00260600; 260800   EXEC SQL                           00260700; 260900     SELECT 1                         00260800; 26; 261100      FROM ADJUD_OVERRIDE B                 0026; 261200     WHERE B.FEP_CLAIM_TRAN_ID =              00261100; 261300         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID        00261200; 261400      AND CHG_OVERRIDE_IND = 'I'              00261300; 261500      AND (CHG_OVERRIDE_CD = '584')            00261400; 261600   END-EXEC                           00261500; 261700                                 00261600; 261800   MOVE SQLCODE TO WS-S-SQLCODE.                00261700; 261900                                 00261800; 26; 262100    WHEN SQL-SUCCESS                      0026; 262200    WHEN SQL-MORE-THAN-ONE-ROW                 00262100; 262300     MOVE 'I' TO FS80401-CLM-COB              00262200; 262400          OF FS80401-ROSTER-TABLE(FS80401-NDX)     00262300; 262500     SET SQL-SUCCESS TO TRUE                 00262400; 262600    WHEN SQL-ROW-NOT-FOUND                   00262500; 262700     MOVE 'Y' TO FS80401-CLM-COB              00262600; 262800          OF FS80401-ROSTER-TABLE(FS80401-NDX)     00262700; 262900     SET SQL-SUCCESS TO TRUE                 00262800; 26; 263100     INITIALIZE    FX71P0ME-PARMS             0026; 263200     MOVE '24'  TO FX71P0ME-MSG-NO            00263100; 263300     MOVE MSG-24 TO FS80301-ERROR-MESSAGE         00263200; 263400     PERFORM; 263500   END-EVALUATE.                        00263400; 263600 5120-EXIT.                            00263500; 263700   EXIT.                            00263600; 00263700; 00263800; 26; 264100   EXEC SQL                           0026; 264200     SELECT 1                         00264100; 264300      INTO :WS-CLM-TRANS-ID                 00264200; 264400      FROM ADJUD_OVERRIDE B                 00264300; 264500     WHERE B.FEP_CLAIM_TRAN_ID =              00264400; 264600         :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID        00264500; 264700      AND CHG_OVERRIDE_IND = 'I'              00264600; 264800      AND (CHG_OVERRIDE_CD = '316')            00264700; 264900   END-EXEC                           00264800; 26; 265100   MOVE SQLCODE TO WS-S-SQLCODE.                0026; 265200                                 00265100; 265300   EVALUATE TRUE                        00265200; 265400    WHEN SQL-SUCCESS                      00265300; 265500    WHEN SQL-MORE-THAN-ONE-ROW                 00265400; 265600     MOVE 'I' TO FS80401-CLM-MED              00265500; 265700          OF FS80401-ROSTER-TABLE(FS80401-NDX)     00265600; 265800     SET SQL-SUCCESS TO TRUE                 00265700; 265900    WHEN SQL-ROW-NOT-FOUND                   00265800; 26; 266100          OF FS80401-ROSTER-TABLE(FS80401-NDX)     0026; 266200     SET SQL-SUCCESS TO TRUE                 00266100; 266300    WHEN OTHER                         00266200; 266400     INITIALIZE    FX71P0ME-PARMS             00266300; 266500     MOVE '25'  TO FX71P0ME-MSG-NO            00266400; 266600     MOVE MSG-25 TO FS80301-ERROR-MESSAGE         00266500; 266700     PERFORM; 266800   END-EVALUATE.                        00266700; 266900 5130-EXIT.                            00266800; 26; 2007-R2 TT#69726 END.                      0026; 267200                                 00267100; 267300/                                 00267200; 00267300; 2009 SO; 00267500; 267700; 267800                                 00267700; 267900   IF TOTAL-CHRG-WAS-ENTERED                  00267800; 26; 268100    GO TO; 268200   END-IF.                           00268100; 268300                                 00268200; 268400   IF YES-DATE-RANGE                      00268300; 268500    PERFORM 6200-OPEN-FSA-CURSOR2               00268400; 268600    PERFORM 6200-FETCH-FSA-CURSOR2              00268500; 268700     VARYING FS80401-NDX FROM 1 BY 1             00268600; 268800     UNTIL NOT SQL-SUCCESS                  00268700; 268900       OR FS80401-NDX > WS-A-ROSTER-MAX           00268800; 26; 269100   ELSE                             0026; 269200     PERFORM 6100-OPEN-FSA-CURSOR1              00269100; 269300     PERFORM 6100-FETCH-FSA-CURSOR1              00269200; 269400      VARYING FS80401-NDX FROM 1 BY 1            00269300; 269500      UNTIL NOT SQL-SUCCESS                 00269400; 269600       OR FS80401-NDX > WS-A-ROSTER-MAX          00269500; 269700                                 00269600; 269800   END-IF.                           00269700; 269900                                 00269800; 2; 270100   EXIT.                            002; 00270100; 270300 6100-OPEN-FSA-CURSOR1.                      00270200; 270400                                 00270300; * OPEN CURSOR FOR FSA CLAIMS 1                 00270400; 270600                                 00270500; 270700   EXEC SQL                           00270600; 270800     OPEN FSA_C1                       00270700; 270900   END-EXEC                           00270800; 27; 271100   MOVE SQLCODE TO WS-S-SQLCODE.                0027; 271200   EVALUATE TRUE                        00271100; 271300    WHEN SQL-SUCCESS                     00271200; 271400       CONTINUE                       00271300; 271500    WHEN OTHER                        00271400; 271600       INITIALIZE      FX71P0ME-PARMS         00271500; 271700       MOVE '26'    TO FX71P0ME-MSG-NO         00271600; 271800       MOVE MSG-26   TO FS80301-ERROR-MESSAGE      00271700; 271900       PERFORM; 27; 0027; 272200 6100-FETCH-FSA-CURSOR1.                     00272100; 00272200; FETCH CURSOR FOR FSA CLAIMS                  00272300; 00272400; 272600   EXEC SQL                          00272500; 272700    FETCH FSA_C1                       00272600; 272800    INTO                           00272700; 272900     :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,            00272800; 27; 273100     :CONTRACT-ID ,                      0027; 273200     :PATIENT-CD ,                      00273100; 273300     :REPORTING-PLAN-CD,                   00273200; 273400     :ORIG-CLM-ID ,                      00273300; 273500     :CLM-FORM-CD ,                      00273400; 273600     :FIRST-SVC-BEGN-DT                    00273500; 273700     :FIRST-SVC-BEGN-DT-NULL,                 00273600; 273800     :LAST-SVC-END-DT                     00273700; 273900     :LAST-SVC-END-DT-NULL ,                 00273800; 27; 274100     :CLM-PROCESS-DT-NULL ,                  0027; 274200     :FEP-PAID-DT                       00274100; 274300     :FEP-PAID-DT-NULL ,                   00274200; 274400     :TOTAL-ALL-CHG-AMT                    00274300; 274500     :TOTAL-ALL-CHG-AMT-NULL ,                00274400; 274600     :TOTAL-PAID-AMT                     00274500; 274700     :TOTAL-PAID-AMT-NULL ,                  00274600; 274800     :CLM-DISPOSITION-CD ,                  00274700; 274900     :CLM-PAYEE-CD ,                     00274800; 27; 275100     :CLM-CHG-CNT-NULL ,                   0027; 275200     :COB-IND ,                        00275100; 275300     :MEDICARE-IND ,                     00275200; 275400     :COB-SPECULATVE-IND ,                  00275300; 275500     :MDCR-SPECULTVE-IND,                   00275400; 275600     :ANN-DED-APPLY-AMT,                   00275500; 275700     :REG-CAT-ACCUM-IND,                   00275600; 275800     :EOB-PRINT-IND                      00275700; 275900   END-EXEC                           00275800; 27; 276100   MOVE SQLCODE TO WS-S-SQLCODE.                0027; 00276100; 276300   EVALUATE TRUE                        00276200; 276400     WHEN SQL-SUCCESS                     00276300; 276500       PERFORM; 276600     WHEN SQL-ROW-NOT-FOUND                  00276500; 276700       PERFORM; 276800     WHEN OTHER                        00276700; 276900       INITIALIZE      FX71P0ME-PARMS         00276800; 27; 277100       MOVE MSG-27   TO FS80301-ERROR-MESSAGE     0027; 277200       PERFORM; 277300   END-EVALUATE.                        00277200; 00277300; 00277400; 277600 6100-CLOSE-FSA-CURSOR1.                     00277500; 00277600; ** CLOSE CURSOR FOR FSA CLAIMS                 00277700; 277900                                 00277800; 27; 278100     CLOSE FSA_C1                      0027; 278200   END-EXEC                           00278100; 278300                                 00278200; 278400   MOVE SQLCODE TO WS-S-SQLCODE.                00278300; 278500                                 00278400; 278600   EVALUATE TRUE                        00278500; 278700    WHEN SQL-SUCCESS                     00278600; 278800      CONTINUE                        00278700; 278900    WHEN OTHER                        00278800; 27; 279100      MOVE '28'    TO FX71P0ME-MSG-NO          0027; 279200      MOVE MSG-28   TO FS80301-ERROR-MESSAGE       00279100; 279300      PERFORM; 279400   END-EVALUATE.                        00279300; 00279400; 00279500; 279700 6200-OPEN-FSA-CURSOR2.                      00279600; 00279700; ** OPEN CURSOR FOR FSA CLAIMS                  00279800; 00279900; 280100   EXEC SQL                           002; 280200     OPEN FSA_C2                       00280100; 280300   END-EXEC                           00280200; 00280300; 280500   MOVE SQLCODE TO WS-S-SQLCODE.                00280400; 00280500; 280700   EVALUATE TRUE                        00280600; 280800    WHEN SQL-SUCCESS                     00280700; 280900       CONTINUE                       00280800; 28; 281100       INITIALIZE      FX71P0ME-PARMS         0028; 281200       MOVE '29'    TO FX71P0ME-MSG-NO         00281100; 281300       MOVE MSG-29   TO FS80301-ERROR-MESSAGE      00281200; 281400       PERFORM; 281500   END-EVALUATE.                        00281400; 00281500; 00281600; 281800 6200-FETCH-FSA-CURSOR2.                     00281700; 00281800; * FETCH CURSOR FOR FSA CLAIMS                  00281900; 282100                                 0028; 282200   EXEC SQL                           00282100; 282300   FETCH FSA_C2                        00282200; 282400    INTO                            00282300; 282500    :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,            00282400; 282600    :TRAN-ADJUD-END-TS,                    00282500; 282700    :CONTRACT-ID ,                      00282600; 282800    :PATIENT-CD ,                       00282700; 282900    :REPORTING-PLAN-CD,                    00282800; 28; 283100    :CLM-FORM-CD ,                      0028; 283200    :FIRST-SVC-BEGN-DT                    00283100; 283300    :FIRST-SVC-BEGN-DT-NULL,                 00283200; 283400    :LAST-SVC-END-DT                     00283300; 283500    :LAST-SVC-END-DT-NULL,                  00283400; 283600    :CLM-PROCESS-DT                      00283500; 283700    :CLM-PROCESS-DT-NULL,                   00283600; 283800    :FEP-PAID-DT                       00283700; 283900    :FEP-PAID-DT-NULL,                    00283800; 28; 284100    :TOTAL-ALL-CHG-AMT-NULL ,                 0028; 284200    :TOTAL-PAID-AMT                      00284100; 284300    :TOTAL-PAID-AMT-NULL,                   00284200; 284400    :CLM-DISPOSITION-CD ,                   00284300; 284500    :CLM-PAYEE-CD ,                      00284400; 284600    :CLM-CHG-CNT                       00284500; 284700    :CLM-CHG-CNT-NULL ,                    00284600; 284800    :COB-IND ,                        00284700; 284900    :MEDICARE-IND ,                      00284800; 28; 285100    :MDCR-SPECULTVE-IND,                   0028; 285200    :ANN-DED-APPLY-AMT,                    00285100; 285300    :REG-CAT-ACCUM-IND,                    00285200; 285400    :EOB-PRINT-IND                      00285300; 285500   END-EXEC                           00285400; 285600                                 00285500; 285700   MOVE SQLCODE TO WS-S-SQLCODE.                00285600; 285800                                 00285700; 285900   EVALUATE TRUE                        00285800; 28; 286100       PERFORM; 286200    WHEN SQL-ROW-NOT-FOUND                  00286100; 286300       PERFORM; 286400    WHEN OTHER                        00286300; 286500       INITIALIZE      FX71P0ME-PARMS         00286400; 286600       MOVE '30'    TO FX71P0ME-MSG-NO         00286500; 286700       MOVE MSG-30   TO FS80301-ERROR-MESSAGE      00286600; 286800       PERFORM; 286900   END-EVALUATE.                        00286800; 00286900; 0028; 287200 6200-CLOSE-FSA-CURSOR2.                     00287100; * CLOSE CURSOR FOR FSA CLAIMS                  00287200; 287400                                 00287300; 287500   EXEC SQL                           00287400; 287600     CLOSE FSA_C2                      00287500; 287700   END-EXEC                           00287600; 287800                                 00287700; 287900   MOVE SQLCODE TO WS-S-SQLCODE.                00287800; 28; 288100   EVALUATE TRUE                        0028; 288200    WHEN SQL-SUCCESS                     00288100; 288300       CONTINUE                       00288200; 288400    WHEN OTHER                        00288300; 288500       INITIALIZE      FX71P0ME-PARMS         00288400; 288600       MOVE '31'    TO FX71P0ME-MSG-NO         00288500; 288700       MOVE MSG-31   TO FS80301-ERROR-MESSAGE      00288600; 288800       PERFORM; 288900   END-EVALUATE.                        00288800; 28; 289100                                 0028; 289200 6300-PROCESS-FSA-CLMX.                      00289100; 289300                                 00289200; 289400   IF YES-DATE-RANGE                      00289300; 289500    PERFORM 6500-OPEN-FSA-CURSOR2X              00289400; 289600    PERFORM 6500-FETCH-FSA-CURSOR2X              00289500; 289700     VARYING FS80401-NDX FROM 1 BY 1             00289600; 289800     UNTIL NOT SQL-SUCCESS                  00289700; 289900       OR FS80401-NDX > WS-A-ROSTER-MAX           00289800; 2; 290100   ELSE                             002; 290200    PERFORM 6400-OPEN-FSA-CURSOR1X              00290100; 290300    PERFORM 6400-FETCH-FSA-CURSOR1X              00290200; 290400     VARYING FS80401-NDX FROM 1 BY 1             00290300; 290500     UNTIL NOT SQL-SUCCESS                  00290400; 290600       OR FS80401-NDX > WS-A-ROSTER-MAX           00290500; 290700    PERFORM 6400-CLOSE-FSA-CURSOR1X              00290600; 290800   END-IF.                           00290700; 290900                                 00290800; 29; 291100   EXIT.                            0029; 291200                                 00291100; 291300                                 00291200; 291400 6400-OPEN-FSA-CURSOR1X.                     00291300; 291500                                 00291400; 291600   EXEC SQL                           00291500; 291700     OPEN FSA_C1X                      00291600; 291800   END-EXEC                           00291700; 291900                                 00291800; 29; 292100                                 0029; 292200   EVALUATE TRUE                        00292100; 292300    WHEN SQL-SUCCESS                     00292200; 292400       CONTINUE                       00292300; 292500    WHEN OTHER                        00292400; 292600       INITIALIZE      FX71P0ME-PARMS         00292500; 292700       MOVE '50'    TO FX71P0ME-MSG-NO         00292600; 292800       MOVE MSG-50   TO FS80301-ERROR-MESSAGE      00292700; 292900       PERFORM; 29; 293100                                 0029; 293200                                 00293100; 293300 6400-FETCH-FSA-CURSOR1X.                     00293200; 293400                                 00293300; 293500   EXEC SQL                           00293400; 293600   FETCH FSA_C1X                       00293500; 293700    INTO                            00293600; 293800    :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,            00293700; 293900    :TRAN-ADJUD-END-TS,                    00293800; 29; 294100    :PATIENT-CD ,                       0029; 294200    :REPORTING-PLAN-CD,                    00294100; 294300    :ORIG-CLM-ID ,                      00294200; 294400    :CLM-FORM-CD ,                      00294300; 294500    :FIRST-SVC-BEGN-DT                    00294400; 294600    :FIRST-SVC-BEGN-DT-NULL,                 00294500; 294700    :LAST-SVC-END-DT                     00294600; 294800    :LAST-SVC-END-DT-NULL ,                  00294700; 294900    :CLM-PROCESS-DT                      00294800; 29; 295100    :FEP-PAID-DT                       0029; 295200    :FEP-PAID-DT-NULL ,                    00295100; 295300    :TOTAL-ALL-CHG-AMT                    00295200; 295400    :TOTAL-ALL-CHG-AMT-NULL ,                 00295300; 295500    :TOTAL-PAID-AMT                      00295400; 295600    :TOTAL-PAID-AMT-NULL ,                  00295500; 295700    :CLM-DISPOSITION-CD ,                   00295600; 295800    :CLM-PAYEE-CD ,                      00295700; 295900    :CLM-CHG-CNT                       00295800; 29; 296100    :COB-IND ,                        0029; 296200    :MEDICARE-IND ,                      00296100; 296300    :COB-SPECULATVE-IND ,                   00296200; 296400    :MDCR-SPECULTVE-IND,                   00296300; 296500    :ANN-DED-APPLY-AMT,                    00296400; 296600    :REG-CAT-ACCUM-IND,                    00296500; 296700    :EOB-PRINT-IND                      00296600; 296800   END-EXEC                           00296700; 296900                                 00296800; 29; 297100                                 0029; 297200   EVALUATE TRUE                        00297100; 297300    WHEN SQL-SUCCESS                     00297200; 297400       PERFORM; 297500    WHEN SQL-ROW-NOT-FOUND                  00297400; 297600       PERFORM; 297700    WHEN OTHER                        00297600; 297800       INITIALIZE      FX71P0ME-PARMS         00297700; 297900       MOVE '51'    TO FX71P0ME-MSG-NO         00297800; 29; 298100       PERFORM; 298200   END-EVALUATE.                        00298100; 298300                                 00298200; 298400                                 00298300; 298500 6400-CLOSE-FSA-CURSOR1X.                     00298400; 298600                                 00298500; 298700   EXEC SQL                           00298600; 298800    CLOSE FSA_C1X                       00298700; 298900   END-EXEC                           00298800; 29; 299100   MOVE SQLCODE TO WS-S-SQLCODE.                0029; 299200                                 00299100; 299300   EVALUATE TRUE                        00299200; 299400    WHEN SQL-SUCCESS                     00299300; 299500       CONTINUE                       00299400; 299600    WHEN OTHER                        00299500; 299700       INITIALIZE      FX71P0ME-PARMS         00299600; 299800       MOVE '52'    TO FX71P0ME-MSG-NO         00299700; 299900       MOVE MSG-52   TO FS80301-ERROR-MESSAGE      00299800; ; 300100   END-EVALUATE.                        00; 300200                                 00300100; 300300                                 00300200; 300400 6500-OPEN-FSA-CURSOR2X.                     00300300; 300500                                 00300400; 300600   EXEC SQL                           00300500; 300700     OPEN FSA_C2X                      00300600; 300800   END-EXEC                           00300700; 300900                                 00300800; 30; 301100                                 0030; 301200   EVALUATE TRUE                        00301100; 301300    WHEN SQL-SUCCESS                     00301200; 301400       CONTINUE                       00301300; 301500    WHEN OTHER                        00301400; 301600       INITIALIZE      FX71P0ME-PARMS         00301500; 301700       MOVE '53'    TO FX71P0ME-MSG-NO         00301600; 301800       MOVE MSG-53   TO FS80301-ERROR-MESSAGE      00301700; 301900       PERFORM; 30; 302100                                 0030; 302200                                 00302100; 302300 6500-FETCH-FSA-CURSOR2X.                     00302200; 302400                                 00302300; 302500   EXEC SQL                           00302400; 302600   FETCH FSA_C2X                       00302500; 302700    INTO                            00302600; 302800    :DCLADJUD-CLAIM.FEP-CLAIM-TRAN-ID,            00302700; 302900    :TRAN-ADJUD-END-TS,                    00302800; 30; 303100    :PATIENT-CD ,                       0030; 303200    :REPORTING-PLAN-CD,                    00303100; 303300    :ORIG-CLM-ID ,                      00303200; 303400    :CLM-FORM-CD ,                      00303300; 303500    :FIRST-SVC-BEGN-DT                    00303400; 303600    :FIRST-SVC-BEGN-DT-NULL,                 00303500; 303700    :LAST-SVC-END-DT                     00303600; 303800    :LAST-SVC-END-DT-NULL,                  00303700; 303900    :CLM-PROCESS-DT                      00303800; 30; 304100    :FEP-PAID-DT                       0030; 304200    :FEP-PAID-DT-NULL,                    00304100; 304300    :TOTAL-ALL-CHG-AMT                    00304200; 304400    :TOTAL-ALL-CHG-AMT-NULL ,                 00304300; 304500    :TOTAL-PAID-AMT                      00304400; 304600    :TOTAL-PAID-AMT-NULL,                   00304500; 304700    :CLM-DISPOSITION-CD ,                   00304600; 304800    :CLM-PAYEE-CD ,                      00304700; 304900    :CLM-CHG-CNT                       00304800; 30; 305100    :COB-IND ,                        0030; 305200    :MEDICARE-IND ,                      00305100; 305300    :COB-SPECULATVE-IND ,                   00305200; 305400    :MDCR-SPECULTVE-IND,                   00305300; 305500    :ANN-DED-APPLY-AMT,                    00305400; 305600    :REG-CAT-ACCUM-IND,                    00305500; 305700    :EOB-PRINT-IND                      00305600; 305800   END-EXEC                           00305700; 305900                                 00305800; 30; 306100                                 0030; 306200   EVALUATE TRUE                        00306100; 306300    WHEN SQL-SUCCESS                     00306200; 306400       PERFORM; 306500    WHEN SQL-ROW-NOT-FOUND                  00306400; 306600       PERFORM; 306700    WHEN OTHER                        00306600; 306800       INITIALIZE      FX71P0ME-PARMS         00306700; 306900       MOVE '54'    TO FX71P0ME-MSG-NO         00306800; 30; 307100       PERFORM; 307200   END-EVALUATE.                        00307100; 307300                                 00307200; 307400                                 00307300; 307500 6500-CLOSE-FSA-CURSOR2X.                     00307400; 307600                                 00307500; 307700   EXEC SQL                           00307600; 307800     CLOSE FSA_C2X                      00307700; 307900   END-EXEC                           00307800; 30; 308100   MOVE SQLCODE TO WS-S-SQLCODE.                0030; 308200                                 00308100; 308300   EVALUATE TRUE                        00308200; 308400    WHEN SQL-SUCCESS                     00308300; 308500       CONTINUE                       00308400; 308600    WHEN OTHER                        00308500; 308700       INITIALIZE      FX71P0ME-PARMS         00308600; 308800       MOVE '55'    TO FX71P0ME-MSG-NO         00308700; 308900       MOVE MSG-55   TO FS80301-ERROR-MESSAGE      00308800; 30; 309100   END-EVALUATE.                        0030; 00309100; 2009 SO; 00309300, 

FS90P0M0.CBL, 004500   05 FS01P1M0-MODULE       PIC X(08) VALUE 'FS01P1M0'.; 004600   05 FS90P1M0-MODULE       PIC X(08) VALUE 'FS90P1M0'.

FS90P1M0.CBL, 

FS91P0M0.CBL, PROGRAM:   FS91P0M0 - CLAIMS VERSION ROSTER BUSINESS DRIVER; CALLED PROGRAMS: FS91P1M0; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:; FS01CC01 - MQ MESSAGE LAYOUT, 

FS91P1M0.CBL, === CLAIMS VERSION ROSTER, === ADD MESSAGE TO THE COMMON MESSAGES AREA.; === PARM-LEN POINTS TO THE LAST USED CHAR IN THE COMMON MSG., 

FS92P0M0.CBL, PROGRAM:   FS92P0M0 - CLAIMS DETAILS BUSINESS DRIVER; CALLED PROGRAMS: FS92P1M0; ; ERROR MESSAGES:  -- NONE --; ; DATABASE TABLES AND VIEWS (ACCESS): -- NONE --; ; COPY MEMBERS:; FS01CC01 - MQ MESSAGE LAYOUT, 

FS92P1M0.CBL, 

FS92P1M1.CBL, 

FS92P1M2.CBL, 

FS92P1M3.CBL, 

FS92P1M4.CBL, 

FS92P1M5.CBL, 

FS94P0M0.CBL, 

FX01P0M9.CBL, FUNCTION: PROCESS INP CLAIM, 05 FBK0P0M9-MODULE     PIC X(08)  VALUE 'FBK0P0M9'.; 05 FX71P0M6-MODULE     PIC X(08)  VALUE 'FX71P0M6'.; 05 FX71P0MD-MODULE     PIC X(08)  VALUE 'FX71P0MD'.; 05 FX71P5MA-MODULE     PIC X(08)  VALUE 'FX71P5MA'.; 05 FX71P5M9-MODULE     PIC X(08)  VALUE 'FX71P5M9'.; 05 FX71P0MF-MODULE     PIC X(08)  VALUE 'FX71P0MF'.; 05 FX71P0MG-MODULE     PIC X(08)  VALUE 'FX71P0MG'.; 05 FX71P0MU-MODULE     PIC X(08)  VALUE 'FX71P0MU'.; 05 FX71P5MU-MODULE     PIC X(08)  VALUE 'FX71P5MU'.; ** 05 FX71PIII-MODULE     PIC X(08)  VALUE 'FX71PIII'.; ** 05 FX71P0IV-MODULE     PIC X(08)  VALUE 'FX71P0IV'.

FX71P0IV.CBL, 05 FBK0P0IV-MODULE      PIC X(08) VALUE 'FBK0P0IV'.

FX71P0M3.CBL, 

FX71P0M5.CBL, 

FX71P0M6.CBL, 

FX71P0MD.CBL, === MAIN LINE, **TT#254371 R2/2010 BEGIN; 2299-MOVE-CONT-HLDR-NAMES.; MOVE SPACES TO WS-CH-FIRST-NAME; WS-CH-MIDDLE-INITIAL; WS-CH-LAST-NAME; IF  OTR-CONTRACT-ID-NUMBER-FCR (8:1) NUMERIC; MOVE OTR-CONTRACT-ID-NUMBER-FCR (8:1); TO WS-PARTITION; ELSE; MOVE 0 TO WS-PARTITION; END-IF; MOVE OTR-CONTRACT-ID-NUMBER-FCR (2:8); TO WS-CONTRACT-ID; EXEC SQL; SELECT B.FIRST_NAME,; B.MIDDLE_INITIAL,; B.LAST_NAME; INTO  :WS-CH-FIRST-NAME,; :WS-CH-MIDDLE-INITIAL,; :WS-CH-LAST-NAME; FROM  MEMBER_ELIGIBILITY A; INNER JOIN; MEMBER B; ON B.MEMBER_ID = A.MEMBER_ID; WHERE; A.CONTRACT_ID = :WS-CONTRACT-ID; AND  A.MEMBER_TYPE = 'C'; AND  A.PARTITION  = :WS-PARTITION; ORDER BY TERM_DATE DESC; WITH UR; FETCH FIRST 1 ROW ONLY; END-EXEC; MOVE WS-CH-FIRST-NAME TO; OTR-CONT-HLDR-FIRST-NM-FCR; MOVE WS-CH-MIDDLE-INITIAL TO; OTR-CONT-HLDR-MI-NM-FCR; MOVE WS-CH-LAST-NAME TO; OTR-CONT-HLDR-LAST-NM-FCR; 00650; 00651    EVALUATE SQLCODE; 00652     WHEN ZERO; 00653        CONTINUE; 00654     WHEN 100; 00655        MOVE SPACES TO OTR-CONT-HLDR-FIRST-NM-FCR; OTR-CONT-HLDR-MI-NM-FCR; OTR-CONT-HLDR-LAST-NM-FCR; CONTINUE; 00656     WHEN OTHER; 00655        MOVE SPACES TO OTR-CONT-HLDR-FIRST-NM-FCR; OTR-CONT-HLDR-MI-NM-FCR; OTR-CONT-HLDR-LAST-NM-FCR; CONTINUE; 00664   END-EVALUATE; ., 

FX71P0ME.CBL, 05 FK79P0M0-MODULE       PIC X(08) VALUE 'FK79P0M0'. 00310021

FX71P0MF.CBL, 00028   05 FX71P0MD-MODULE      PIC X(08) VALUE 'FX71P0MD'.  FX71P0MF; 00029   05 FX71P5MD-MODULE      PIC X(08) VALUE 'FX71P5MD'.  FX71P0MF

FX71P0MG.CBL, 

FX71P0ML.CBL, 

FX71P0MO.CBL, 008700   05 FK85P0M0-MODULE       PIC X(08) VALUE

FX71P0MP.CBL, 

FX71P0MT.CBL, 

FX71P0MU.CBL, 009100   05 FK85P0M0-MODULE         PIC X(08) VALUE

FX71P1M1.CBL, FUNCTION: THIS PROGRAM READS THE ADJU; FOLLOWING INPU; INPUT_OPADJUST_PYR,; INPUT_OPADJUST_GRP,; INPUT_OPADJUST_RSN,; AND INPUT_RMT_REMARK WITH OPR CLAIM DATA; ; ALSO POPULATE HEDIS/DRUG DATA IN FOLLOWING TABLES; INPUT_CLAIM,; INPUT_CHARGE,; AND INPUT_SVC_DIAG; ; CMR   DATE    INIT  REMARKS, 

FX71P5M1.CBL, 

FX71P5M3.CBL, 009100  05 FX71P0ML-MODULE        PIC X(08) VALUE 'FX71P0ML'; 009200  05 FX71P0MP-MODULE        PIC X(08) VALUE 'FX71P0MP'; 05 FK80P4M0-MODULE        PIC X(08) VALUE 'FK80P4M0'; 05 FK70P6M0-MODULE        PIC X(08) VALUE 'FK70P6M0'

FX71P5M5.CBL, 

FX71P5M6.CBL, 00021   05 FX71P0ML-MODULE      PIC X(08) VALUE 'FX71P0ML'.   FX71P5M6; 00022   05 FX71P0M6-MODULE      PIC X(08) VALUE 'FX71P0M6'.   FX71P5M6

FX71P5M7.CBL, RELEASE CLAIM DRIVER/FUNCTION, 

FX71P5M9.CBL, 007330   05 FK86P4M0-MODULE      PIC X(08)  VALUE 'FK86P4M0'.

FX71P5MA.CBL, === MAINLINE, 

FX71P5MD.CBL, 010400   05 FK80P4M0-MODULE      PIC X(08)  VALUE 'FK80P4M0'.019700   05 FXADP0M0-MODULE      PIC X(08)  VALUE 'FXADP0M0'.

FX71P5MO.CBL, 015200   05 FH02DTE1-MODULE         PIC X(08) VALUE

FX71P5MU.CBL, 010300   05 FH02DTE1-MODULE         PIC X(08) VALUE

FX71PIII.CBL, === MAINLINE, 

FX71VIII.CBL, 

__last_syncmon_run, 
